name: "Deploy to SaaS: QA"

on:
  workflow_dispatch:
    inputs:
      reason:
        description: "The reason for running the workflow"
        required: true
        default: "Manual run"

jobs:
  createDeploymentPackage:
    name: Create SaaS Deployment Package
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: pwsh

    env:
      ASPNETCORE_ENVIRONMENT: CI
      NODE_VERSION: ""
      DATABASE_BACKUP_FILENAME: ""
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
      DOTNET_NOLOGO: 1
      PROJECT_NAME: Kentico.Community.Portal.Web

    steps:
      - uses: actions/checkout@v3

      - name: "Get node.js version from package.json"
        run: |
          $nodeVersion = (Get-Content -Raw -Path ./src/${{ env.PROJECT_NAME }}/package.json | ConvertFrom-Json).engines.node
          "NODE_VERSION=$nodeVersion" >> $env:GITHUB_ENV

      - name: "Install Node.js from package.json version"
        uses: actions/setup-node@v4
        with:
          node-version: "${{ env.NODE_VERSION }}"

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          global-json-file: global.json

      - name: Install dependencies
        run: dotnet restore --locked-mode

      - name: Build Solution
        run: |
          dotnet build ./src/${{ env.PROJECT_NAME }}/ `
            -c Release `
            --no-restore

      - name: Get Database Backup Name
        run: |
          $latestBackup = Get-Content -Path "./database/backups.txt" -TotalCount 1
          "DATABASE_BACKUP_FILENAME=$latestBackup" >> $env:GITHUB_ENV

      - name: Extract Database Backup
        run: |
          Expand-Archive `
            -Path "./database/${{ env.DATABASE_BACKUP_FILENAME }}.zip" `
            -DestinationPath "./database"

      - name: Install a SQL Server suite of tools (SQLEngine, SQLPackage)
        uses: potatoqualitee/mssqlsuite@v1.7
        with:
          install: sqlpackage, sqlengine
          sa-password: Pass@12345
          version: 2022

      - name: Restore Database .bak
        run: |
          docker exec sql mkdir /var/opt/mssql/backup
          docker cp "./database/${{ env.DATABASE_BACKUP_FILENAME }}" sql:/var/opt/mssql/backup
          sqlcmd `
            -S localhost `
            -d master `
            -U "sa" `
            -P "Pass@12345" `
            -Q "RESTORE DATABASE [Kentico.Community] FROM DISK='/var/opt/mssql/backup/${{ env.DATABASE_BACKUP_FILENAME }}' WITH MOVE 'Kentico.Community' TO '/var/opt/mssql/data/Kentico.Community.mdf', MOVE 'Kentico.Community_log' TO '/var/opt/mssql/data/Kentico.Community_log.ldf'"
        if: endsWith(env.DATABASE_BACKUP_FILENAME, '.bak')

      - name: Restore Database .bacpac
        run: |
          sqlpackage `
            /a:Import `
            /tsn:localhost `
            /tdn:Kentico.Community `
            /tu:sa `
            /tp:Pass@12345 `
            /sf:"./database/${{ env.DATABASE_BACKUP_FILENAME }}" `
            /tec:False
        if: endsWith(env.DATABASE_BACKUP_FILENAME, '.bacpac')

      - name: Restore CI Repository
        run: |
          ./scripts/Restore-CI.ps1 -WorkspaceFolder $PWD

      - name: Generate Deployment Package
        run: |
          ./scripts/Export-DeploymentPackage.ps1 -WorkspaceFolder $PWD

      - name: Upload Deployment Package
        run: |
          $headers = @{ Authorization = "Bearer ${{ secrets.XPERIENCE_PORTAL_DEPLOYMENT_PAT }}" }
          Invoke-RestMethod `
            -Uri https://xperience-portal.com/api/deployment/upload/${{ secrets.XPERIENCE_PORTAL_PROJECT_GUID }} `
            -Method Post `
            -InFile './DeploymentPackage.zip' `
            -ContentType "application/zip" `
            -Headers $headers
