@using Kentico.Content.Web.Mvc
@using Kentico.PageBuilder.Web.Mvc
@using Kentico.Web.Mvc
@using Kentico.Community.Portal.Web.Components.Widgets.FallbackForm

@inject MarkdownRenderer Renderer
@inject IPageBuilderDataContextRetriever ContextRetriever

@model ComponentViewModel<FallbackFormWidgetProperties>

@{
    bool isPreview = Context.Kentico().Preview().Enabled;
    bool hasFallbackContent = !string.IsNullOrWhiteSpace(Model.Properties.FallbackMarkdown);

    if (Model.Properties.IsHidden && !isPreview && !hasFallbackContent)
    {
        return;
    }

    FallbackFormWidget.SetIsFormHidden(ViewData, Model.Properties);
}

<div xpc-preview-outline="@FallbackFormWidget.WIDGET_NAME Widget" xpc-preview-outline-remove-element="true">
    <div class="fallback-form-widget" @(Model.Properties.IsHidden ? "overlay" : "")>

        @await Html.Kentico().RenderNestedWidgetAsync(
        SystemComponentIdentifiers.FORM_WIDGET_IDENTIFIER,
                Model.Properties)

        @if (Model.Properties.IsHidden)
        {
            <div
                class="fallback-content d-flex justify-content-center align-items-center flex-column position-absolute w-100 h-100">
                @if (isPreview)
                {
                    <div class="mb-3">
                        <small>This form will be hidden on the live website.</small>
                        @if (hasFallbackContent)
                        {
                            <br>
                            <small>The following fallback content will be displayed instead.</small>
                        }
                    </div>
                }
                @if (hasFallbackContent)
                {
                    <div class="py-1 px-3 bg-purple-100 rounded">
                        @Renderer.RenderUnsafe(Model.Properties.FallbackMarkdown)
                    </div>
                }
            </div>
        }
    </div>
</div>