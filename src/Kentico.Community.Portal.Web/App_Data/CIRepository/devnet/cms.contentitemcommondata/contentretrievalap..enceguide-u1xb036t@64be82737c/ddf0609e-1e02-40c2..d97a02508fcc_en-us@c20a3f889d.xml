<?xml version="1.0" encoding="utf-8"?>
<cms.contentitemcommondata>
  <BasicItemShortDescription>
    <![CDATA[Kentico's Content Retrieval API and Mapping is POWERFUL and flexible, with multiple ways to accomplish your goals.  But which way do you choose?  Here's some common scenarios and some quick code snippets on how to handle retrieval and parsing content.]]>
  </BasicItemShortDescription>
  <BasicItemTitle>Content Retrieval API Quick Reference Guide</BasicItemTitle>
  <ContentItemCommonDataContentItemID>
    <CodeName>ContentRetrievalAPIQuickReferenceGuide-u1xb036t</CodeName>
    <GUID>c35ead79-dac2-41ed-9b98-ce9974a8d804</GUID>
    <ObjectType>cms.contentitem</ObjectType>
  </ContentItemCommonDataContentItemID>
  <ContentItemCommonDataContentLanguageID>
    <CodeName>en-US</CodeName>
    <GUID>6c743a9e-8a63-425b-bef6-756c12c1bbf5</GUID>
    <ObjectType>cms.contentlanguage</ObjectType>
  </ContentItemCommonDataContentLanguageID>
  <ContentItemCommonDataFirstPublishedWhen>2025-02-06 02:43:12Z</ContentItemCommonDataFirstPublishedWhen>
  <ContentItemCommonDataGUID>ddf0609e-1e02-40c2-ac2b-d97a02508fcc</ContentItemCommonDataGUID>
  <ContentItemCommonDataIsLatest>True</ContentItemCommonDataIsLatest>
  <ContentItemCommonDataLastPublishedWhen>2025-06-12 23:39:39Z</ContentItemCommonDataLastPublishedWhen>
  <ContentItemCommonDataVersionStatus>2</ContentItemCommonDataVersionStatus>
  <ContentItemCommonDataVisualBuilderTemplateConfiguration>
    <![CDATA[{"identifier":"KenticoCommunity.BlogPostPage_Components","properties":{},"fieldIdentifiers":{}}]]>
  </ContentItemCommonDataVisualBuilderTemplateConfiguration>
  <ContentItemCommonDataVisualBuilderWidgets>
    <![CDATA[{"editableAreas":[{"identifier":"main","sections":[{"identifier":"f3cfcf23-f078-455e-a362-6fb87b556570","type":"CommunityPortal.SingleColumnSection","properties":{"layout":"Standard","layoutParsed":0,"paddingTop":"Large","paddingTopParsed":0,"paddingBottom":"Large","paddingBottomParsed":0,"backgroundColor":"White","backgroundColorParsed":1},"zones":[{"identifier":"379959a7-d11f-41fc-90ea-60f95ce2395f","widgets":[{"identifier":"29c44e5f-fe07-420b-91b3-af4c404bfe6c","type":"CommunityPortal.MarkdownWidget","variants":[{"identifier":"0abbb4c6-0974-47e7-81c9-a46a6441485d","properties":{"markdown":"Xperience by Kentico's new [Content Retrieval and Mapping API](https://docs.kentico.com/x/OKrWCQ) is powerful and flexible. But with all things powerful and flexible, there are some complexities, some differences from how things were done in the past, and some awesome hidden features.\n\nDifferent scenarios require different approaches, so let's get into how to best leverage the API to accomplish your goals.\n","markdownStyle":"Standard","markdownStyleParsed":0,"markdownCodeLanguage":"","id":"2f1434e1-ce3f-4b9e-b35e-aa1c8bceece6"},"fieldIdentifiers":{"markdown":"5395bd2b-d782-40a4-a605-497a03faa8a5","markdownStyle":"11c7333a-92f8-45a8-bbee-f9b54a8fa784","markdownStyleParsed":"579b0d90-f613-4ed4-a5cb-69c9555130da","markdownCodeLanguage":"f34f8eb8-0c1b-410d-affa-6c0f5156100b","id":"4c69f691-ad9c-447b-8c94-a813df485d15"}}]},{"identifier":"c0e4aacc-3e75-4d6d-8fef-a95cd38e7f3e","type":"CommunityPortal.MarkdownWidget","variants":[{"identifier":"35c0c16a-b24c-46d3-88f1-57da665842bf","properties":{"markdown":"This post was written for [Xperience by Kentico v30.1.0](https://docs.kentico.com/changelog#refresh-january-23-2025). Please [consult the documentation](https://docs.kentico.com/changelog) for any feature or API changes when using a different version. Be sure to check the [System Requirements](https://docs.kentico.com/x/DgKQC) in the product documentation.\n","markdownStyle":"Note","markdownStyleParsed":1,"markdownCodeLanguage":"","id":"3a45e095-cc19-484b-8980-b9660122c37d"},"fieldIdentifiers":{"markdown":"6b948571-70a6-48a3-937b-bc2ebcea147f","markdownStyle":"ba17336f-746b-408a-8158-fffa6a92cce2","markdownStyleParsed":"bd835527-d72f-496a-b123-ca49c9695123","markdownCodeLanguage":"ee463500-5ea3-4d12-bc24-3fee325f58ae","id":"7f8dda9e-5806-425d-944b-3759dd917572"}}]},{"identifier":"4fab5c50-cbc0-44cd-a6b6-5915f81909c0","type":"CommunityPortal.HeadingWidget","variants":[{"identifier":"0b9f3c5d-b984-48c4-a64b-a6f58b8872c3","properties":{"headingText":"Content Item and Reusable Schema Retrieval","headingLevel":"H2","headingLevelsParsed":1,"headingAlignment":"Left","headingAlignmentsParsed":0,"showHeadingAnchor":true,"id":"42e467b9-3b50-47ee-9b65-7ee6174cb9bf"},"fieldIdentifiers":{"headingText":"c6e77e14-64fd-494e-a5e5-607d5fda14f5","headingLevel":"31ee5232-b0c6-4344-811f-ce67411b3dad","headingLevelsParsed":"5bbcb782-ebb7-41ef-b1f2-f0861bcaebc6","headingAlignment":"d9906a3e-047e-4ed6-b5b1-f2b3b92ecee1","headingAlignmentsParsed":"befff96f-3c1f-434d-9365-26fd7a1c816d","showHeadingAnchor":"80cc8fee-466f-4cbe-ac76-8ef7d40bf4b1","id":"b068c8bb-34a4-48e3-b3cf-13bdc2c58920"}}]},{"identifier":"1cef2141-be16-423a-8536-dbcafdb7d350","type":"CommunityPortal.MarkdownWidget","variants":[{"identifier":"db207668-01cd-4f32-97ba-1ba1dfc0b20f","properties":{"markdown":"With anything concerning the Content Item system you're going to need to use the `ContentItemQueryBuilder` to retrieve the content. This has the systems in place to handle versioning, proper language fallbacks, and linked items.\n\nYou'll also be leveraging the `IContentQueryExecutor` and its `Results` and/or `MappedResults` methods.\n","markdownStyle":"Standard","markdownStyleParsed":0,"markdownCodeLanguage":"","id":"5e164f96-4030-4128-ab4f-b3237d03b437"},"fieldIdentifiers":{"markdown":"c18e1db0-47c3-41c9-b915-555796564aa4","markdownStyle":"7479393e-172b-448b-a438-4c1ce595f3e7","markdownStyleParsed":"a7d3f17d-2c49-44d9-bab7-8e1921f551e2","markdownCodeLanguage":"d99d7514-10bb-4e0f-b629-c44812497e26","id":"b373bc98-1585-43de-9b41-bd15faf80148"}}]},{"identifier":"d20ab83d-3bf9-4303-b56d-b45b3bd4c949","type":"CommunityPortal.HeadingWidget","variants":[{"identifier":"a761477c-f7f8-4055-92fc-37b31c7cda63","properties":{"headingText":"Scenario 1: Retrieve a single Content Item Type + Linked Items","headingLevel":"H3","headingLevelsParsed":2,"headingAlignment":"Left","headingAlignmentsParsed":0,"showHeadingAnchor":true,"id":"69ce5a64-17f7-4487-b729-5ef43ba108f9"},"fieldIdentifiers":{"headingText":"a5fd6f73-3025-44b9-a1db-9b6269282505","headingLevel":"9ada1eba-e2ba-4c7d-97af-778c4974f8f6","headingLevelsParsed":"4960e208-5661-4df3-9c3a-11a36007933b","headingAlignment":"de6e5ca7-dc5f-47f6-b1e7-ae19f74d8cdc","headingAlignmentsParsed":"2218002b-3d21-4524-846b-1c79df225a1c","showHeadingAnchor":"d6c90b17-11a8-4a50-aad7-17575c071a83","id":"25a4e38d-6dde-45dd-909c-9135aef42c50"}}]},{"identifier":"1c27afbe-922c-4f72-9504-1cb2b7d8ed9c","type":"CommunityPortal.MarkdownWidget","variants":[{"identifier":"57efd997-2613-4ec8-95af-dbc8e11f6c38","properties":{"markdown":"The first scenario is probably the most common, you need to get your Content Items and the linked items associated with them.\n\n```CSharp\nvar getBasicPages = new ContentItemQueryBuilder()\n    .ForContentType(BasicPage.CONTENT_TYPE_NAME,\n        query => query\n          // o=> o.IncludeWebPageData() if items may be WebPageItems and you need the data.\n          .WithLinkedItems(2, o => o.IncludeWebPageData())\n    )\n    .InLanguage(_preferredLanguageRetriever.Get());\n\nvar mappedToPage = await _contentQueryExecutor\n    .GetMappedWebPageResult<BasicPage>(\n        getBasicPages,\n        new ContentQueryExecutionOptions()\n        {\n            ForPreview = _previewFeature.Enabled\n        });\n\nif (mappedToPage.Any())\n{\n    var firstItem = mappedToPage.First();\n    var mappedToPageResult = $\"{firstItem.SystemFields.WebPageItemName} - {firstItem.MetaData_Title}\";\n}\n```\n\nThe `WithLinkedItems` will make sure that you retrieve additional items in the model, and the `GetMappedWebPageResult` will automatically type cast and include your data from your page.\n","markdownStyle":"Standard","markdownStyleParsed":0,"markdownCodeLanguage":"","id":"d9e6bc06-a837-4aeb-9fee-7afca181b3f5"},"fieldIdentifiers":{"markdown":"817726ed-40b7-4fe3-a27c-7a2830d848ed","markdownStyle":"d4a49bbe-902b-4b08-bb65-13de72122122","markdownStyleParsed":"09378810-97f0-4f26-af34-b0c11196ca47","markdownCodeLanguage":"342cb27a-3dc2-4570-b0cf-5536ebe766c5","id":"b848e537-f03b-400e-b5b8-085d78cb8d1b"}}]},{"identifier":"d495a269-56af-4d5b-85de-ecfa103a0521","type":"CommunityPortal.HeadingWidget","variants":[{"identifier":"7cb21849-43c2-495c-b603-d1b3e4be3dfc","properties":{"headingText":"Scenario 2: Retrieve Reusable Schema Data","headingLevel":"H3","headingLevelsParsed":2,"headingAlignment":"Left","headingAlignmentsParsed":0,"showHeadingAnchor":true,"id":"fa0de643-f84d-42e9-8a83-c845c43fca2f"},"fieldIdentifiers":{"headingText":"f3784df3-8852-4f52-baca-6d87a25c4859","headingLevel":"4adf13d1-c27d-4d76-91a2-82c8cf48e958","headingLevelsParsed":"2f485d46-6523-4164-a919-76c86a05c705","headingAlignment":"acc0ddc3-d483-48e7-8f41-d366bae42d18","headingAlignmentsParsed":"451ed92c-389a-49e5-a5b0-f1ef71f051ed","showHeadingAnchor":"55219aff-d312-4bee-b138-f91ed2637041","id":"203cc3fb-5559-4d5c-8767-49268298d8e8"}}]},{"identifier":"0ed14f97-e16a-4364-9250-b75c39c1e132","type":"CommunityPortal.MarkdownWidget","variants":[{"identifier":"d4b460a5-5076-44f9-aaa6-ac4b8992dd3b","properties":{"markdown":"Sometimes you don't know what specific content type you want, but you know you want the data found in [a Reusable Schema](https://docs.kentico.com/x/D4_OD). An example may be if you have an `IBaseMetadata` that has the Title and description fields you want for a listing page of multiple content items. For this, you can use the `GetMappedResult<IYourReusableSchema>`\n\n```CSharp\nvar getMetaData = new ContentItemQueryBuilder()\n    .ForContentTypes(\n        query => query\n            .OfReusableSchema([IBaseMetadata.REUSABLE_FIELD_SCHEMA_NAME])\n            // o => o.IncludeWebPageData() if items may be WebPageItems and you need the data.\n            .WithLinkedItems(2, o => o.IncludeWebPageData())\n    )\n    .InLanguage(_preferredLanguageRetriever.Get());\n\nvar mappedToReusableSchemaInterface = await _contentQueryExecutor\n    .GetMappedResult<IBaseMetadata>(\n        getMetaData,\n        new ContentQueryExecutionOptions()\n        {\n            ForPreview = _previewFeature.Enabled\n        });\n\nif (mappedToReusableSchemaInterface.Any())\n{\n    var firstItem = mappedToReusableSchemaInterface.First();\n    var mappedMetaDataResults = $\"{firstItem.MetaData_Title}\";\n}\n```\n\n","markdownStyle":"Standard","markdownStyleParsed":0,"markdownCodeLanguage":"","id":"fb0db4a9-8227-4c58-acd3-f4f4ff997071"},"fieldIdentifiers":{"markdown":"68194e58-9616-4cc8-9f23-6551c8094bde","markdownStyle":"8ebadd60-a6d2-42be-8b08-dc0f76e8c877","markdownStyleParsed":"c0d37e2d-ee86-4b06-9de8-fcc23b9915bb","markdownCodeLanguage":"023bafaa-c21e-4cb8-a56c-7a510e540ac7","id":"2bf82447-c553-47e9-b62d-0ac79334e8e5"}}]},{"identifier":"0638b1af-4c44-4a6b-8eaa-abd1708cf0c4","type":"CommunityPortal.HeadingWidget","variants":[{"identifier":"87704ab9-2f45-46d5-b136-12c2fc5552ec","properties":{"headingText":"Scenario 3: Retrieve Reusable Schema Data + Check for Additional Model Types","headingLevel":"H3","headingLevelsParsed":2,"headingAlignment":"Left","headingAlignmentsParsed":0,"showHeadingAnchor":true,"id":"ab4c3f73-6f3c-4578-9b66-77cafbb3f5b0"},"fieldIdentifiers":{"headingText":"63919451-891e-4633-9119-cb8d22be42be","headingLevel":"30bcbe38-ae31-4296-bd8b-97294d0c4346","headingLevelsParsed":"6d04aa30-2499-44a0-a86d-a7e8a2e792cf","headingAlignment":"db8830df-28c2-4bd2-a7a5-e6d747e68196","headingAlignmentsParsed":"f2f7a2f7-80fc-4326-beac-87fa05850f20","showHeadingAnchor":"eb907b14-5eee-4bb8-b25b-064e193ef16a","id":"4d8105a2-491e-4168-80c2-0af3c57b7f51"}}]},{"identifier":"eb9e7028-8ac8-4ae1-bfe4-0a061bd34c7a","type":"CommunityPortal.MarkdownWidget","variants":[{"identifier":"1cf7b6ec-3ac2-4b0b-91e3-b53305553807","properties":{"markdown":"Keep in mind that the Xperience model Mapper will still map each object to the actual [registered C# Model](https://docs.kentico.com/x/5IbWCQ) created through the `--kpx-codegen` scripts, even if you only are mapping to a Reusable Schema interface. Because of this, you can do additional type checking and casting to retrieve additional fields.\n\nIn the below example we are retrieving any content item that uses our `IBaseMetadata` Reusable Schema and retrieving its OG Image (which is of type `IGenericHasImage`, an empty interface that just indicates it has an image). The OG Image can be any content type that has an image and inherits `IGenericHasImage` so we need to do some type casting with it.\n\n```CSharp\nvar getMetaDataWithOtherData = new ContentItemQueryBuilder()\n    .ForContentTypes(\n        query => query\n            .OfReusableSchema([IBaseMetadata.REUSABLE_FIELD_SCHEMA_NAME])\n            .WithWebPageData()\n            // o=> o.IncludeWebPageData() if items may be WebPageItems and you need the data.\n            .WithLinkedItems(2, o => o.IncludeWebPageData())\n    )\n    .InLanguage(_preferredLanguageRetriever.Get());\n\nvar mappedToReusableSchemaInterfaceThatInheritsFromIWebPageFieldSource = await _contentQueryExecutor\n    .GetMappedWebPageResult<IBaseMetadata>(\n        getMetaDataWithOtherData,\n        new ContentQueryExecutionOptions()\n        {\n            ForPreview = _previewFeature.Enabled\n        });\n        \nif (mappedToReusableSchemaInterfaceThatInheritsFromIWebPageFieldSource.Any())\n{\n    var firstItem = mappedToReusableSchemaInterfaceThatInheritsFromIWebPageFieldSource.First();\n    var mappedMetaDataResults = $\"{firstItem.MetaData_Title}\";\n    // Use type casting to expose SystemFields\n    if (firstItem is IWebPageFieldsSource webPageData)\n    {\n        mappedMetaDataResults += $\" - {webPageData.SystemFields.WebPageItemTreePath}\";\n    }\n\n    // MetaData_OGImage is an empty interface, no fields, but should be assigned to Image Types\n    if (firstItem.MetaData_OGImage.Any())\n    {\n        // Use type checking to get data\n        if (firstItem.MetaData_OGImage.First() is IContentItemFieldsSource contentItemFieldsSource)\n        {\n            mappedMetaDataResults += $\" - {contentItemFieldsSource.SystemFields.ContentItemGUID}\";\n        }\n        if (firstItem.MetaData_OGImage.First() is Generic.Image image)\n        {\n            mappedMetaDataResults += $\" - {image.ImageTitle}\";\n        }\n    }\n}\n```\n\nAdditionally, although this is a little hacky, you can have your Reusable Schema inherit `IContentItemFieldSource` or `IWebPageFieldSource` to expose those fields if applicable.\n\n```CSharp\nif (mappedToReusableSchemaInterfaceThatInheritsFromIWebPageFieldSource.Any())\n{\n    var firstItem = mappedToReusableSchemaInterfaceThatInheritsFromIWebPageFieldSource.First();\n    // MetaData_OGImage Inherits from IContentItemFieldSource\n    if (firstItem.MetaData_OGImage.Any())\n    {\n        var preMappedResult = $\"{firstItem.MetaData_OGImage.First().SystemFields.ContentItemGUID}\";\n    }\n}\n```\n\n","markdownStyle":"Standard","markdownStyleParsed":0,"markdownCodeLanguage":"","id":"2123a449-83d6-4986-95bb-5247cebd3ce8"},"fieldIdentifiers":{"markdown":"660c8bb0-d0cd-4a27-9dc9-610de64e6cec","markdownStyle":"ba35fe96-4d68-4821-8709-2fa5e68fc260","markdownStyleParsed":"ad9c6279-72c4-4022-b1ad-a34a00308750","markdownCodeLanguage":"ae639391-3a36-497b-bb98-777a04c8ec2d","id":"68904f21-c990-4e56-99cf-5059fa14becf"}}]},{"identifier":"1e196eeb-2796-4ead-ac0d-e09e94fd0df1","type":"CommunityPortal.HeadingWidget","variants":[{"identifier":"cc767518-7c62-49c8-aa4a-15537a2a0498","properties":{"headingText":"Section System Example","headingLevel":"H3","headingLevelsParsed":2,"headingAlignment":"Left","headingAlignmentsParsed":0,"showHeadingAnchor":true,"id":"ec6a2fd3-a6d1-4dd1-8e77-2314cf9c7bf9"},"fieldIdentifiers":{"headingText":"d62822d5-2f51-4574-b3b6-562c0629d1c7","headingLevel":"bf0dacbf-0bd6-4c98-893e-fa8ae9b14d38","headingLevelsParsed":"4b3579d7-34de-4f86-9ffb-f83bc20a5bc2","headingAlignment":"f91e87e1-4d92-46ba-98d9-51bf8757b2a5","headingAlignmentsParsed":"821a68c5-515b-4aeb-9c84-d4d915eb032a","showHeadingAnchor":"3c0ca238-b1d6-4590-b236-9668e2f138c9","id":"21779d54-e738-4572-b2a2-531e6c1c2184"}}]},{"identifier":"d74f0ca4-0866-453f-9490-ecf0de92c31a","type":"CommunityPortal.MarkdownWidget","variants":[{"identifier":"0a3976fd-4474-4074-96d4-4ee63542260c","properties":{"markdown":"A common web design pattern for building out pages is the **Section Model**, where a section is a horizontal portion of a page, with strongly typed models (ex: **Hero Banner Section**, **Card Section**, etc.), and your page contains multiple of these sections.\n\nYou would have an Interface (`ISectionSystem`) that contains a Content Items and [Reusable Content selector field](https://docs.kentico.com/developers-and-admins/customization/extend-the-administration-interface/ui-form-components/reference-admin-ui-form-components#combined-content-selector), with defined sections Content Types allowed, and from there the user can create/modify/remove/arrange the sections selected.\n\nThe Field will be rendered as the following on your model.\n\n```CSharp\npublic IEnumerable<IContentItemFieldsSource> SectionsSystemSections { get; set; }\n```\n\nHowever, the mapper will map each section to its appropriate model (ex: `HeroBannerSection`, `CardSection`).\n\nHere's the code:\n\n```CSharp\nvar testPage = new ContentItemQueryBuilder()\n    .ForContentType(Testing.WebPage.CONTENT_TYPE_NAME,\n        query => query\n            .WithLinkedItems(100, o => o.IncludeWebPageData())\n            .ForWebsite(_websiteChannelContext.WebsiteChannelName, includeUrlPath: true)\n            .Where(where => where.WhereEquals(nameof(WebPageFields.WebPageItemID), currentWebPageItemID))\n            .TopN(1)\n    )\n    .InLanguage(_preferredLanguageRetriever.Get());\n\nvar mappedToPage = await _contentQueryExecutor\n    .GetMappedWebPageResult<Testing.WebPage>(\n        testPage,\n        new ContentQueryExecutionOptions()\n        {\n            ForPreview = _previewFeature.Enabled\n        });\n\nif (mappedToPage.Any())\n{\n    var firstItem = mappedToPage.First();\n    foreach (var section in firstItem.SectionsSystemSections)\n    {\n        if (section is Section.TestA testA)\n        {\n            var testing = testA.SectionTestAName;\n        }\n        else if (section is Section.TestB testB)\n        {\n            var testing = testB.SectionTestBName;\n        }\n        else if (section is Section.Widget widget)\n        {\n            // If you don't see the WebPageItem values, \n            // make sure your .WithLinkedItems has the optional \n            // ConfigureOptionsAction (query.WithLinkedItems(100, o=> o.IncludeWebPageData()))\n            // Partial Widget Page \n            //   <inlinewidgetpage web-page-id=\"@webPageID\" initialize-document-prior=\"true\"></inlinewidgetpage>\n            // requires the WebPageItemID\n            var testing = widget.SystemFields.WebPageItemID;\n        }\n    }\n}\n```\n\n","markdownStyle":"Standard","markdownStyleParsed":0,"markdownCodeLanguage":"","id":"bf4115bc-eb55-4616-9b0e-419ef665efb8"},"fieldIdentifiers":{"markdown":"9f18e270-1b3f-453c-b5a5-b4fa53136a70","markdownStyle":"e1cc77c8-8b58-4cde-8d48-b4666d0fe782","markdownStyleParsed":"5f8a87af-08f1-4743-996a-ce74a43b8ecb","markdownCodeLanguage":"5d9ee03b-39b7-49ec-bdbb-9c7e6e27b49d","id":"1ba3cfac-13e1-4f0e-8b83-e8ca3586f3fa"}}]}]}],"fieldIdentifiers":{"layout":"ec174eab-2cba-4a18-b628-748accc383ce","layoutParsed":"1aa19d99-44b3-4ff4-9808-05097ac257b6","paddingTop":"8a67828a-ec8b-48cc-b5d3-61911958506c","paddingTopParsed":"2a6ece34-3544-4cb6-9d76-909c68198998","paddingBottom":"74e5a859-9d8a-4d4a-a321-5feb2baa4a69","paddingBottomParsed":"a1db84de-0b26-4fb3-95d7-49dbebf914c5","backgroundColor":"54aac159-9de9-44f4-9baa-02ef466a8592","backgroundColorParsed":"80a9cad7-b51c-44bd-8a1f-75287664ffc6"}},{"identifier":"beaee6ea-a0b7-4494-ad73-f84ab3aec1f7","type":"CommunityPortal.SingleColumnSection","properties":{"layout":"Standard","layoutParsed":0,"paddingTop":"Large","paddingTopParsed":0,"paddingBottom":"Large","paddingBottomParsed":0,"backgroundColor":"White","backgroundColorParsed":1},"zones":[{"identifier":"f526e489-99ee-450a-90e5-e4fac370d396","widgets":[{"identifier":"d2cae794-3469-46ba-bd9a-f6535497e59b","type":"CommunityPortal.HeadingWidget","variants":[{"identifier":"e634b435-b46e-4d2e-9c3b-d43017f138d0","properties":{"headingText":"Object / Data Retrieval","headingLevel":"H2","headingLevelsParsed":1,"headingAlignment":"Left","headingAlignmentsParsed":0,"showHeadingAnchor":true,"id":"a60b793d-a857-4cd0-80da-21af9147cbdc"},"fieldIdentifiers":{"headingText":"62419e61-be20-4fc6-887c-19b6e3f38c66","headingLevel":"c406a498-8a96-4467-a325-0255ef61b1da","headingLevelsParsed":"6842eec6-07da-4716-b954-68fd390b2c22","headingAlignment":"e50f115c-e2e5-4518-b61d-bbeb0586670e","headingAlignmentsParsed":"fd6c3417-db52-4cc5-93d2-4425ec675849","showHeadingAnchor":"8770be04-abd9-4412-acaa-1919714fc75a","id":"a6b66b52-a175-4f63-b19f-a534fde1d122"}}]},{"identifier":"ac894201-cec7-42b4-97a8-909b19d19c02","type":"CommunityPortal.MarkdownWidget","variants":[{"identifier":"a194ad2d-66b5-4397-8970-80b119ad594f","properties":{"markdown":"If you are [retrieving custom module data](https://docs.kentico.com/developers-and-admins/development/content-retrieval#retrieve-general-object-data), there are multiple ways to accomplish this. The primary method will be to use the `IInfoProvider<TInfoClass>` interface, but additionally sometimes you will want to run a straight query (using the `DataQuery` 's `CustomQueryText`) and then map.\n","markdownStyle":"Standard","markdownStyleParsed":0,"markdownCodeLanguage":"","id":"f1a9992e-5c81-40a9-a809-28b96e29ef57"},"fieldIdentifiers":{"markdown":"4995e568-2609-4321-a769-a4e6a885a512","markdownStyle":"6643d5a8-b32b-4e69-be09-891f08462edf","markdownStyleParsed":"6fe147a3-ef60-4653-89bc-b6f99ff61a83","markdownCodeLanguage":"acf93605-cd14-47dc-97cd-c47f53f3ffb9","id":"97c5a039-474c-4b19-914b-cbf9fa0e6545"}}]},{"identifier":"8930e8af-3b6e-483f-a86e-0e2e04749268","type":"CommunityPortal.MarkdownWidget","variants":[{"identifier":"e52a2c47-01fc-46ae-8f24-35a872848c5b","properties":{"markdown":"**Warning**: Running queries directly against the database, while faster as it skips any of the API logic, also can lead to un-detectable errors.\n\nMake sure use direct queries responsibly, with `nameof(MyInfoType.MyFieldName)` so removing fields will result in compile time errors you can detect and correct, as well as make sure to level SQL query parameters instead of direct-injected or string interpolated input if anything is user-driven.\n","markdownStyle":"Note","markdownStyleParsed":1,"markdownCodeLanguage":"","id":"0820ccf8-d240-4e3f-a996-609793781267"},"fieldIdentifiers":{"markdown":"ef26bb78-156d-4bcb-9055-95eb2627fbcb","markdownStyle":"b9e3369f-ea75-4876-ac82-05f85f0d716d","markdownStyleParsed":"a85a3c19-6c84-4985-8a51-0971bf3289fa","markdownCodeLanguage":"beb9f4a2-ddf3-4e45-b318-d7413efdb0e9","id":"319643d3-88de-48fd-9819-79ccff240118"}}]},{"identifier":"68622dbd-e397-4be4-ae4c-c188e384271b","type":"CommunityPortal.HeadingWidget","variants":[{"identifier":"ad2b6888-bc35-4c62-9565-4767ba0fb743","properties":{"headingText":"Scenario 1: Retrieve data from one source (not retrieving joined data)","headingLevel":"H3","headingLevelsParsed":2,"headingAlignment":"Left","headingAlignmentsParsed":0,"showHeadingAnchor":true,"id":"7124b42f-454b-4ef6-a21d-4fafe09ff759"},"fieldIdentifiers":{"headingText":"60f85f07-f1da-472b-8fb7-baf90baf9e3f","headingLevel":"253e08ed-4bca-4269-bdc4-602e97841aaa","headingLevelsParsed":"cf2a7fec-8751-444d-a8ef-5fa1139b539a","headingAlignment":"665d1df9-1399-411e-a9e6-39f177e878c9","headingAlignmentsParsed":"0e26259d-703a-43c5-844a-4ecab51ba86e","showHeadingAnchor":"200c58be-4e3a-4a7d-9856-c01a9dbf6eca","id":"3bd1e2c3-5801-41c0-99b2-c60d5a7f9e44"}}]},{"identifier":"c9ae5116-9c57-4ea6-8fe0-a2b745c34108","type":"CommunityPortal.MarkdownWidget","variants":[{"identifier":"7678def1-90bd-4ae3-9684-5bfc0302e95e","properties":{"markdown":"The first scenario is simply retrieving data of a single `AbstractInfo<>` model. You can still use the Source method to join for filtering, but you don't need any data except the primary.\n\n```CSharp\n// _mediaFileInfoProvider is IInfoProvider<MediaFileInfo> type\nvar itemsFromOneSource = await _mediaFileInfoProvider.Get()\n    .Source(\n        x => x.InnerJoin<MediaLibraryInfo>(\n            nameof(MediaFileInfo.FileLibraryID),\n            nameof(MediaLibraryInfo.LibraryID)))\n    .WhereEquals(nameof(MediaLibraryInfo.LibraryName), \"MyLibrary\")\n    .Columns(nameof(MediaFileInfo.FileName))\n    .GetEnumerableTypedResultAsync();\n\nif (itemsFromOneSource.Any())\n{\n    var firstItem = itemsFromOneSource.First();\n    var testOneSource = $\"{firstItem.FileName}\";\n}\n```\n\n","markdownStyle":"Standard","markdownStyleParsed":0,"markdownCodeLanguage":"","id":"a014c57c-bf16-45d2-abbe-70647f1d8bdb"},"fieldIdentifiers":{"markdown":"b9a6519d-7818-414d-a61a-5af4ec60e93b","markdownStyle":"b12a5841-f032-4cb7-97b1-1ade19fe60e4","markdownStyleParsed":"a0fce091-c8e0-4da5-bfef-f30b6d150bf7","markdownCodeLanguage":"ee686d91-66c2-427e-a50b-1e1c172c019a","id":"d7927b07-f2f5-4399-96d5-11ea7ac4dd56"}}]},{"identifier":"3222430a-077e-4e20-8178-c33338abb769","type":"CommunityPortal.HeadingWidget","variants":[{"identifier":"76d03a50-ea63-49a1-9988-4e55c972f6cb","properties":{"headingText":"Scenario 2: Retrieve data from multiple sources","headingLevel":"H3","headingLevelsParsed":2,"headingAlignment":"Left","headingAlignmentsParsed":0,"showHeadingAnchor":true,"id":"84cc8025-80f5-47d8-9cce-ed576edd3498"},"fieldIdentifiers":{"headingText":"ccfa6598-6cc3-4f10-aff1-809e4dc38d10","headingLevel":"adda94cd-bc66-444c-8418-b54dcff5c64a","headingLevelsParsed":"840962c8-4d37-4b38-bb6b-b24fca858b4b","headingAlignment":"13dd788b-1de1-4416-a892-b7ac0fef945c","headingAlignmentsParsed":"a40102f0-2246-44f1-b3cf-068615875828","showHeadingAnchor":"686cdb4e-d076-406d-887d-e998880cba50","id":"c46ea435-d439-40b4-a9a6-3c3b54c46ae4"}}]},{"identifier":"c46f50ea-d571-4c3f-b552-08ffa34cfdaa","type":"CommunityPortal.MarkdownWidget","variants":[{"identifier":"6889dd92-a171-4b0d-a05b-28873929444d","properties":{"markdown":"A major departure from previous versions of Kentico is that **mapped Info Classes no longer contain any joined fields of other types**. To overcome this, you'll have to return the `IDataContainer` via the `GetDataContainerResultAsync` instead of the `GetEnumeratedTypedResultAsync` method.\n\nThe `IDataContainer` is the equivalent of a `DataRow`, and contains the raw data (including join data). You can then use the `_____Info.New(myIDataContainer)` to map to multiple sources.\n\n```CSharp\nvar itemsFromTwoSources = await _mediaFileInfoProvider\n    .Get()\n    .Source(\n        x => x.InnerJoin<MediaLibraryInfo>(\n            nameof(MediaFileInfo.FileLibraryID),\n            nameof(MediaLibraryInfo.LibraryID)))\n    .Columns(\n        nameof(MediaFileInfo.FileName),\n        nameof(MediaLibraryInfo.LibraryDisplayName))\n    .GetDataContainerResultAsync();\n\nvar parsedItemsFromTwoSources = itemsFromTwoSources\n    .Select(x => (mediaFile: MediaFileInfo.New(x), mediaLibrary: MediaLibraryInfo.New(x)));\n\nif (parsedItemsFromTwoSources.Any())\n{\n    var firstItem = parsedItemsFromTwoSources.First();\n    var testTwoSource = $\"{firstItem.mediaFile.FileName} - {firstItem.mediaLibrary.LibraryDisplayName}\";\n}\n```\n\n","markdownStyle":"Standard","markdownStyleParsed":0,"markdownCodeLanguage":"","id":"41a9819d-bf8d-46bb-9167-c305f41da894"},"fieldIdentifiers":{"markdown":"38e9a4de-c2e7-4630-a90f-6be18d5e7a85","markdownStyle":"b0c9af25-63f0-47bd-8acd-16674625c038","markdownStyleParsed":"78f9de66-94b9-4cf8-bf42-ad324e71530b","markdownCodeLanguage":"4ec5ec73-66ed-463c-a6a0-90722c671e60","id":"71e31c3d-44c9-4e7f-b3ba-a17e90b7913a"}}]},{"identifier":"d591b689-6836-4a37-acb9-be4938623d20","type":"CommunityPortal.HeadingWidget","variants":[{"identifier":"49b85ca2-0737-4720-ada3-d897c8c5fc3c","properties":{"headingText":"Scenario 3: A custom Query (single table)","headingLevel":"H3","headingLevelsParsed":2,"headingAlignment":"Left","headingAlignmentsParsed":0,"showHeadingAnchor":true,"id":"365119c9-e730-420f-82a6-cb39312ece62"},"fieldIdentifiers":{"headingText":"59bb5248-c48d-404b-b277-2c90bec707f6","headingLevel":"b4d517f9-76bd-4e73-962f-408717ba4d7b","headingLevelsParsed":"e62d250e-1ef6-40a3-8496-c1b39f3f1479","headingAlignment":"f5bd61c7-4c03-4802-970c-4384f0280c0c","headingAlignmentsParsed":"fb6ecb17-2fb4-42b6-ac6c-8c5961f5f5dd","showHeadingAnchor":"5d3104fe-5df0-4f6d-a76d-571b84185f99","id":"d10ac19e-ceb5-4fd8-96c0-2ab3e842ddef"}}]},{"identifier":"e13d0bb2-a9d2-4ea5-80c5-074a5ec662fe","type":"CommunityPortal.MarkdownWidget","variants":[{"identifier":"4cd52765-d17c-4d52-8d29-9e0ff658b1eb","properties":{"markdown":"If you need to run a complex query, or something that returns values you can't easily map, you can leverage the `DataQuery` along with the `CustomQueryText` property (and optional `parameters`), and use the `GetDataContainerResultAsync` to retrieve your rows. From here you can leverage the `GetValue` or `TryGetValue` methods on the `IDataContainer` results to get what you need:\n\n```CSharp\nstring queryText = $\"\"\"\n    select \n        Count(*) over (partition by {nameof(MediaFileInfo.FileExtension)}) as TotalOfThisFileType, \n        * from Media_File\n    \"\"\";\n\nvar customQuery = new DataQuery\n{\n    CustomQueryText = queryText\n};\n\nvar dataContainers = await customQuery.GetDataContainerResultAsync();\n\nvar parsedItemsFromDataQuery = dataContainers\n    .Select(x => (MediaFile: MediaFileInfo.New(x), TotalOfType: (int)x.GetValue(\"TotalOfThisFileType\")));\n\nif (parsedItemsFromDataQuery.Any())\n{\n    var firstItem = parsedItemsFromDataQuery.First();\n    var testsFromQuery = $\"{firstItem.MediaFile.FileName} - {firstItem.TotalOfType}\";\n}\n```\n\n","markdownStyle":"Standard","markdownStyleParsed":0,"markdownCodeLanguage":"","id":"0563a384-468c-4270-8325-b22578707c47"},"fieldIdentifiers":{"markdown":"6c430c63-d7f0-45d9-97d0-0fc533e40d42","markdownStyle":"955dd4e4-1c35-46ef-9fb3-6195e30051da","markdownStyleParsed":"c327dcc8-8a27-4c42-acc7-00b42d66e607","markdownCodeLanguage":"b70e5261-5ba8-4000-9650-347af21a0f7c","id":"cd76ff91-bdce-4fed-b1ea-eb7930085907"}}]},{"identifier":"96d7b879-707c-4491-a322-b2c8c9e24bbf","type":"CommunityPortal.MarkdownWidget","variants":[{"identifier":"a4937380-b941-4f8a-aafa-cd24704ba78e","properties":{"markdown":"**Querying From Different Database**: Keep in mind that the `DataQuery` has many properties, including the connection string name. So, if you need to run a query against another database all together, you'll want to leverage this class with that `ConnectionStringName` property!\n","markdownStyle":"Note","markdownStyleParsed":1,"markdownCodeLanguage":"","id":"a5f1595d-2061-43dc-aa40-5022395f18ee"},"fieldIdentifiers":{"markdown":"55684b40-6580-4919-a4fa-9aab9d65dbd6","markdownStyle":"83e0b97b-be4f-474d-806b-7915c2656fcc","markdownStyleParsed":"6904d3ee-884a-4271-9665-671e71e9a1b2","markdownCodeLanguage":"3953d3cf-feb9-4277-89de-586f1348b876","id":"1bddcfab-53c9-4d06-9ff0-a5caccdc5069"}}]},{"identifier":"8a74c324-06d9-430b-aa30-9eb3e60dfeaf","type":"CommunityPortal.HeadingWidget","variants":[{"identifier":"75aaa00d-305d-4141-bb8e-7c3906770230","properties":{"headingText":"Scenario 4: A custom query (multiple tables)","headingLevel":"H3","headingLevelsParsed":2,"headingAlignment":"Left","headingAlignmentsParsed":0,"showHeadingAnchor":true,"id":"e704d902-ce6e-4743-bbb8-94e16a11300c"},"fieldIdentifiers":{"headingText":"abdfdd7f-1022-4f43-a8c3-43e5584978d0","headingLevel":"ff6d5610-58d8-450d-bd43-0d0c0205aeed","headingLevelsParsed":"132ef34c-8ae2-4e69-a0a1-5f0871e41209","headingAlignment":"d07650ba-aecb-4e4d-bb51-77d737f4edd5","headingAlignmentsParsed":"a8365eaa-df22-44aa-aaa0-09054036cbe3","showHeadingAnchor":"3a086682-1105-439a-be07-28b46968e5cb","id":"d8869d40-5ca8-4d03-bcb3-052dc5facd91"}}]},{"identifier":"6e1c60bb-19e8-4c86-990f-4a3259bd35cc","type":"CommunityPortal.MarkdownWidget","variants":[{"identifier":"a0d614fe-2f58-4503-8db9-993f8d183cb1","properties":{"markdown":"The `DataQuery` class is the go-to in almost all cases for running straight queries, ***except*** if you wish to return multiple tables in a dataset. From here, you will need to go back to the old `ConnectionHelper`, which can be used to get your multiple datasets. From here you can still use the `DataRow` to map to fields or get values.\n\n```CSharp\nstring queryText = $\"\"\"\n    select \n        Count(*) over (partition by {nameof(MediaFileInfo.FileExtension)}) as TotalOfThisFileType, \n        * from Media_File\n\n    select * from Media_Library\n    \"\"\";\n\nDbDataReader dataReader = await ConnectionHelper\n    .ExecuteReaderAsync(\n        queryText, \n        parameters: [], \n        queryType: QueryTypeEnum.SQLQuery, \n        commandBehavior: CommandBehavior.Default, \n        cancellationToken: default);\n\nvar dataSet = dataReader.ToDataSet();\n\nvar parsedMediaItemsFromQuery = dataSet\n    .Tables[0]\n    .Rows\n    .Cast<DataRow>()\n    .Select(x => (MediaFile: MediaFileInfo.New(x), TotalOfType: x.Field<int>(\"TotalOfThisFileType\")));\n\nif (parsedMediaItemsFromQuery.Any())\n{\n    var firstItem = parsedMediaItemsFromQuery.First();\n    var testsFromQuery = $\"{firstItem.MediaFile.FileName} - {firstItem.TotalOfType}\";\n}\n\nvar parsedLibraryItemsFromQuery = dataSet\n    .Tables[1]\n    .Rows\n    .Cast<DataRow>()\n    .Select(x => MediaLibraryInfo.New(x));\n\nif (parsedLibraryItemsFromQuery.Any())\n{\n    var firstItem = parsedLibraryItemsFromQuery.First();\n    var testsFromQuery = $\"{firstItem.LibraryName}\";\n}\n```\n\nHere's the `ToDataSet` extension I call above on `DbDataReader`.\n\n```CSharp\npublic static DataSet ToDataSet(this DbDataReader reader)\n{\n    var ds = new DataSet();\n    if (reader is null)\n    {\n        ds.Tables.Add(new DataTable());\n        return ds;\n    }\n\n    // read each data result into a datatable\n    do\n    {\n        var table = new DataTable();\n        table.Load(reader);\n        ds.Tables.Add(table);\n    } while (!reader.IsClosed);\n\n    return ds;\n}\n```\n\n","markdownStyle":"Standard","markdownStyleParsed":0,"markdownCodeLanguage":"","id":"4a05dfb7-1ca8-4eeb-b0ed-2ccf1a58e913"},"fieldIdentifiers":{"markdown":"a9379166-da47-45af-8c19-84deffc87777","markdownStyle":"fbb6449a-4f0e-48c3-b80c-e5e5e4c618cd","markdownStyleParsed":"b9baa1f9-3164-4753-aea1-bd25db82b660","markdownCodeLanguage":"b949a2ef-4a49-48eb-8067-d2f01f98750f","id":"811066ba-b721-4560-97f0-1b9cef92be54"}}]}]}],"fieldIdentifiers":{"layout":"0475c235-e202-4a19-8acd-1dbfa7cfbcc8","layoutParsed":"ff0baa59-b571-409a-b5a4-be8ad92abaad","paddingTop":"34eec49c-1885-4ce1-abbf-016a1296cfeb","paddingTopParsed":"6e6323fb-776b-4d4e-8e98-ac2fa3cdfb84","paddingBottom":"5f535472-72fb-4b4c-b221-58baaced4bee","paddingBottomParsed":"d51564bb-dceb-40d1-a335-ea2ad0a1bb6a","backgroundColor":"e1b5d16b-8507-46ea-acd8-ff88c0e90f8a","backgroundColorParsed":"34c34ceb-5beb-4586-808a-ca75e36fd596"}},{"identifier":"ef450c26-28bf-4d38-beba-de0f09ce1b76","type":"CommunityPortal.SingleColumnSection","properties":{"layout":"Standard","layoutParsed":0,"paddingTop":"Large","paddingTopParsed":0,"paddingBottom":"Large","paddingBottomParsed":0,"backgroundColor":"White","backgroundColorParsed":1},"zones":[{"identifier":"9038a7c5-e02a-478b-bfd0-11fc1f09ce92","widgets":[{"identifier":"bf8d50bc-9603-43fb-9c57-f076dad492f0","type":"CommunityPortal.HeadingWidget","variants":[{"identifier":"11392117-602d-43d9-a402-a026f5f36f54","properties":{"headingText":"Conclusion","headingLevel":"H2","headingLevelsParsed":1,"headingAlignment":"Left","headingAlignmentsParsed":0,"showHeadingAnchor":false,"id":"eafee294-a22f-4801-80f1-31c9a0607e34"},"fieldIdentifiers":{"headingText":"9a12e28e-2e93-4ff8-ac7e-c9ad6c6d0c71","headingLevel":"b87ac538-1c2f-47eb-bd66-2a0e4c5e9229","headingLevelsParsed":"e720be99-d358-4bd1-a811-f069e6c086f0","headingAlignment":"0c43d26e-f2d5-4a3d-a2f4-e176e34e3609","headingAlignmentsParsed":"445c0c0a-5306-4ee3-8b3b-46ecc3482ce1","showHeadingAnchor":"9b359553-b2d5-4a37-ad5e-bdbf20332d16","id":"3ec8dd1c-5ba8-4fb1-a7c8-4201483e9575"}}]},{"identifier":"63e1c851-4633-435c-9fde-ea36bbe7141a","type":"CommunityPortal.MarkdownWidget","variants":[{"identifier":"28074eaf-e350-4e38-9e97-5aa49b3dfc7a","properties":{"markdown":"I hope this little guide helps you in your data retrieval and modeling. Special thanks to Kentico's Principal Software Engineer, [Jakub Oczko](https://www.linkedin.com/in/jakub-oczko-a3a78631/), who helped field a bunch of questions and these scenarios.\n","markdownStyle":"Standard","markdownStyleParsed":0,"markdownCodeLanguage":"","id":"587d6650-4045-441c-a17c-b8ff462e956b"},"fieldIdentifiers":{"markdown":"29082598-0d25-420e-a91c-95f48cb15cdc","markdownStyle":"ee1a4970-a763-4c73-aa4d-b2f9ead914f8","markdownStyleParsed":"34c21cf3-c115-4467-95ad-67b1a44638ca","markdownCodeLanguage":"c4c96cbf-2426-48c6-8d83-0a4258fd2090","id":"7df93379-0f2f-4c82-ac0b-5ed39642e6fd"}}]}]}],"fieldIdentifiers":{"layout":"75f72bed-d86c-463d-b8f6-35d91b99b355","layoutParsed":"95c165bb-5c2e-4b76-a366-6fc2ccf58522","paddingTop":"5e63e9be-ff34-47d4-a8d3-cc55dccca16a","paddingTopParsed":"347b81b0-865e-4e81-98f9-f06b314017ce","paddingBottom":"7ddad546-b3da-496f-ad66-faaf5ae45dcc","paddingBottomParsed":"7f2a67bf-12e1-4ea0-8ced-082c465ac078","backgroundColor":"ef61a37d-8729-48cc-a2f5-f8f8af22501a","backgroundColorParsed":"2978b470-9e05-493a-9588-48ebd22d5c9f"}}]}]}]]>
  </ContentItemCommonDataVisualBuilderWidgets>
  <CoreTaxonomyDXTopics>
    <![CDATA[[{"Identifier":"40e93dab-1279-49b7-b8a6-fc1518568b1b"},{"Identifier":"378366be-601d-42b0-a719-5daee7392fb9"},{"Identifier":"1015b219-7365-459f-9474-0c96a842291c"},{"Identifier":"b492b56d-3869-4f3e-bda5-cf8dd6588291"},{"Identifier":"9d7f9413-3142-4f27-a6bc-fb9ec266d45f"}]]]>
  </CoreTaxonomyDXTopics>
  <WebPageCanonicalURL />
  <WebPageMetaExcludeFromSitemap>False</WebPageMetaExcludeFromSitemap>
  <WebPageMetaRobots />
  <WebPageMetaShortDescription>
    <![CDATA[Kentico's Content Retrieval API and Mapping is POWERFUL and flexible, with multiple ways to accomplish your goals.  But which way do you choose?  Here's some common scenarios and some quick code snippets on how to handle retrieval and parsing content.]]>
  </WebPageMetaShortDescription>
  <WebPageMetaTitle>Content Retrieval API Quick Reference Guide</WebPageMetaTitle>
  <ContentItemReferences>
    <cms.contentitemreference>
      <ContentItemReferenceGroupGUID>baef8e96-a792-478c-a9dc-1929378ccbac</ContentItemReferenceGroupGUID>
      <ContentItemReferenceGUID>edd298c3-551f-4b96-a740-eba03f35e053</ContentItemReferenceGUID>
      <ContentItemReferenceSourceCommonDataID>
        <GUID>ddf0609e-1e02-40c2-ac2b-d97a02508fcc</GUID>
        <ObjectType>cms.contentitemcommondata</ObjectType>
      </ContentItemReferenceSourceCommonDataID>
      <ContentItemReferenceTargetItemID>
        <CodeName>TrevorFayas-efaxa5ok</CodeName>
        <GUID>4b5585ef-7549-4533-aff7-fc70952001ac</GUID>
        <ObjectType>cms.contentitem</ObjectType>
      </ContentItemReferenceTargetItemID>
    </cms.contentitemreference>
    <cms.contentitemreference>
      <ContentItemReferenceGroupGUID>e09047d5-2c58-403e-be9b-ed772ca76a2d</ContentItemReferenceGroupGUID>
      <ContentItemReferenceGUID>29f349af-1664-45e0-9c2d-a9406b29426f</ContentItemReferenceGUID>
      <ContentItemReferenceSourceCommonDataID>
        <GUID>ddf0609e-1e02-40c2-ac2b-d97a02508fcc</GUID>
        <ObjectType>cms.contentitemcommondata</ObjectType>
      </ContentItemReferenceSourceCommonDataID>
      <ContentItemReferenceTargetItemID>
        <CodeName>Blog-Discussion-Content-Retrieval-API-Quick-Reference-Guide-6f02ef18-1hexgsd2</CodeName>
        <GUID>3d2a18ac-c90f-4681-a68e-9c95d52e9406</GUID>
        <ObjectType>cms.contentitem</ObjectType>
      </ContentItemReferenceTargetItemID>
    </cms.contentitemreference>
    <cms.contentitemreference>
      <ContentItemReferenceGroupGUID>9a93d64c-5cc7-47f0-94e8-f7b3cc48946e</ContentItemReferenceGroupGUID>
      <ContentItemReferenceGUID>f1c31613-c7d7-48cc-8919-8757c6fbe6c0</ContentItemReferenceGUID>
      <ContentItemReferenceSourceCommonDataID>
        <GUID>ddf0609e-1e02-40c2-ac2b-d97a02508fcc</GUID>
        <ObjectType>cms.contentitemcommondata</ObjectType>
      </ContentItemReferenceSourceCommonDataID>
      <ContentItemReferenceTargetItemID>
        <CodeName>ContentRetrievalAPIQuickReferenceGuide-tkjtuxr5</CodeName>
        <GUID>a90abd27-bbe0-458b-8c6b-6e8d1610d0cf</GUID>
        <ObjectType>cms.contentitem</ObjectType>
      </ContentItemReferenceTargetItemID>
    </cms.contentitemreference>
  </ContentItemReferences>
</cms.contentitemcommondata>