<?xml version="1.0" encoding="utf-8"?>
<cms.contentitemcommondata>
  <BasicItemShortDescription>
    <![CDATA[A walkthrough for adding a video embed widget to the Dancing Goat sample site, which demonstrates the use of multiple visibility conditions.]]>
  </BasicItemShortDescription>
  <BasicItemTitle>
    <![CDATA[Creating a video embed widget with visibility conditions]]>
  </BasicItemTitle>
  <ContentItemCommonDataContentItemID>
    <CodeName>CreatingAVideoEmbedWidgetWithVisibilityConditions-yqd4exkh-localtest</CodeName>
    <GUID>e69ad20a-3b3d-4ecf-9f8e-9a84c7201d0a</GUID>
    <ObjectType>cms.contentitem</ObjectType>
  </ContentItemCommonDataContentItemID>
  <ContentItemCommonDataContentLanguageID>
    <CodeName>en-US</CodeName>
    <GUID>6c743a9e-8a63-425b-bef6-756c12c1bbf5</GUID>
    <ObjectType>cms.contentlanguage</ObjectType>
  </ContentItemCommonDataContentLanguageID>
  <ContentItemCommonDataGUID>08df82e9-bdc9-4961-90d9-5ac79575c0c9</ContentItemCommonDataGUID>
  <ContentItemCommonDataIsLatest>True</ContentItemCommonDataIsLatest>
  <ContentItemCommonDataLastPublishedWhen>2025-06-12 23:38:27Z</ContentItemCommonDataLastPublishedWhen>
  <ContentItemCommonDataVersionStatus>2</ContentItemCommonDataVersionStatus>
  <ContentItemCommonDataVisualBuilderTemplateConfiguration>
    <![CDATA[{"identifier":"KenticoCommunity.BlogPostPage_Components","properties":{},"fieldIdentifiers":{}}]]>
  </ContentItemCommonDataVisualBuilderTemplateConfiguration>
  <ContentItemCommonDataVisualBuilderWidgets>
    <![CDATA[{"editableAreas":[{"identifier":"main","sections":[{"identifier":"7a819ae5-4551-4f35-a3fa-ab054abe9186","type":"CommunityPortal.SingleColumnSection","properties":{"layout":"Standard","layoutParsed":0,"paddingTop":"Large","paddingTopParsed":0,"paddingBottom":"Large","paddingBottomParsed":0,"backgroundColor":"White","backgroundColorParsed":1},"zones":[{"identifier":"f7f2a885-cbd5-47b0-a9d4-64dc16c1d52d","widgets":[{"identifier":"c8a5d528-5cb0-4138-9dd1-d9432fb7bdb4","type":"CommunityPortal.MarkdownWidget","variants":[{"identifier":"c68fa8fa-18ce-4036-882c-dbffaf2a8bbe","properties":{"markdown":"This post was written for Xperience by Kentico v26.0.0. Please [consult the documentation](https://docs.kentico.com/x/6wocCQ) for any feature or API changes when using a different version. Be sure to check the [System Requirements](https://docs.kentico.com/x/DgKQC) in the product documentation.\n","markdownStyle":"Note","markdownStyleParsed":1,"markdownCodeLanguage":"","id":"3c10f827-5b64-40b0-8a6d-b93425b99fd0"},"fieldIdentifiers":{"markdown":"64b66935-57d9-4829-94df-553850d76067","markdownStyle":"1a710170-29af-491c-9729-4cb1a7de3f86","markdownStyleParsed":"71899201-6766-46ee-a4f5-0debf593ed85","markdownCodeLanguage":"9f8860e2-ea13-490d-bb50-d8a8539c38e2","id":"758e5e7a-9752-4abc-a0ba-bfd2cedcea2b"}}]}]}],"fieldIdentifiers":{"layout":"1614cd9f-3e2e-4289-a23d-fffb9d9dd430","layoutParsed":"d953b391-deca-4a0d-bbba-17396328498f","paddingTop":"385fb0ac-95c9-49f3-a637-32fa23be7f44","paddingTopParsed":"c2859be0-e4f8-4735-b6f5-9320af3f3b34","paddingBottom":"3f8e761b-b4de-4749-9da8-5350524c1947","paddingBottomParsed":"ed448c76-6357-454f-abdd-a6b149c804a9","backgroundColor":"c25eb310-c3a9-4c54-a556-3fe60098b852","backgroundColorParsed":"8bd9940c-8e8c-4d9e-961e-2f127fd559e9"}},{"identifier":"8441486b-36e5-4008-be70-592fdac534ab","type":"CommunityPortal.SingleColumnSection","properties":{"layout":"Standard","layoutParsed":0,"paddingTop":"Large","paddingTopParsed":0,"paddingBottom":"Large","paddingBottomParsed":0,"backgroundColor":"White","backgroundColorParsed":1},"zones":[{"identifier":"97362792-7e5a-4936-bffd-762d2138cc6b","widgets":[{"identifier":"e45f4d43-a96a-498c-991c-5120f107ed19","type":"CommunityPortal.MarkdownWidget","variants":[{"identifier":"f4423def-4cff-475b-b745-43363916dd78","properties":{"markdown":"Since the October 2022 refresh, Xperience by Kentico has supported the use of multiple visibility conditions in the properties of page builder and form builder components. This means that the visibility of one property can be dependent on multiple other properties at the same time.\n\nLet's create a widget that demonstrates this functionality. A widget for embedding videos in the page could be a good opportunity for this-- Since certain features may vary depending on the video service provider, we can use visibility conditions to make use of the available features for each service, depending on the selection.\n\nFor the purposes of this example, the widget will be added into the **Dancing Goat** sample site, and will use *DancingGoat* namespaces. It will also include code snippets both for older, backwards-compatible C# form components, and newer React-based form components.\n","markdownStyle":"Standard","markdownStyleParsed":0,"markdownCodeLanguage":"","id":"d68c4189-c103-43f6-bdad-44c7642ee842"},"fieldIdentifiers":{"markdown":"f6689471-a43f-47f4-b338-b491cd4032c5","markdownStyle":"b4e3214a-7700-4dde-a10c-fc516f8e712f","markdownStyleParsed":"65f5f1cd-495a-4030-a95b-1ea9aea9d5c9","markdownCodeLanguage":"5369b54e-8d21-4208-b4b8-bdf064239759","id":"0976155e-d56f-49d9-82f0-d025eaf3bd81"}}]},{"identifier":"57409b58-2ed3-400b-9985-6581e3d2f0f9","type":"CommunityPortal.HeadingWidget","variants":[{"identifier":"731a0880-c1c8-4e38-a454-8c4252ec6276","properties":{"headingText":"Setting the goal","headingLevel":"H2","headingLevelsParsed":1,"headingAlignment":"Left","headingAlignmentsParsed":0,"showHeadingAnchor":true,"id":"864f4239-7bee-4c99-b735-ec98daa37101"},"fieldIdentifiers":{"headingText":"ceacfb9e-c552-4591-9db4-bfab2e01047b","headingLevel":"c28298a1-0931-495d-b261-5db1cacc3976","headingLevelsParsed":"b9a00c96-02e9-4cb8-96fd-0fb3df48c265","headingAlignment":"7099fc5c-2845-4931-967f-d951a0023a03","headingAlignmentsParsed":"a1e414fd-64b4-48a8-992b-b68b23b1d394","showHeadingAnchor":"b13de032-d099-49c1-935e-41035b439dec","id":"dec6947c-2947-48b2-97c6-e67bdd60898c"}}]},{"identifier":"e06808cf-f3c6-4db7-99d1-1b6c6829d34f","type":"CommunityPortal.MarkdownWidget","variants":[{"identifier":"d2e44695-7051-488f-9551-aa5934536fec","properties":{"markdown":"The goal of our widget will be to display a video embed in a page. Most video content shared on the internet is hosted on video sharing platforms, so we should include some of these services as options, along with the ability to embed a publicly accessible video file via the HTML `<video>` tag.\n\nHowever, using multiple video sharing platforms introduces some complication-- not all platforms have the same features. For instance, Youtube and Vimeo allow for a video to be started midway, at a certain point in time, while Dailymotion does not. Conversely, Vimeo and Dailymotion can be sized dynamically (percentage-based widths in CSS), while Youtube did not play well with this in my testing.\n\nBased on these available features, we can use visibility conditions to show or hide different configuration options.\n","markdownStyle":"Standard","markdownStyleParsed":0,"markdownCodeLanguage":"","id":"f4ac8f5d-598c-48e5-b98c-c6e5d1e50555"},"fieldIdentifiers":{"markdown":"a4e0c186-cc7c-47e7-acf6-867169a90600","markdownStyle":"507605e4-8c21-48f4-a5c7-8b1adf118041","markdownStyleParsed":"43289f0b-6fc8-48b2-8c1d-28d925459aca","markdownCodeLanguage":"2da86f67-e8f5-4455-ac19-f843160d2252","id":"54fe9c26-c984-4e64-8c7e-fed68489a7e9"}}]},{"identifier":"2f2c9a72-a88c-4043-8cd6-c203631ba1ec","type":"CommunityPortal.HeadingWidget","variants":[{"identifier":"b3b6d7aa-70f5-4636-919e-0cf3dc91ab72","properties":{"headingText":"Defining the properties","headingLevel":"H2","headingLevelsParsed":1,"headingAlignment":"Left","headingAlignmentsParsed":0,"showHeadingAnchor":true,"id":"db93a957-6884-48a5-afbd-57dfa9ae90b5"},"fieldIdentifiers":{"headingText":"abd0d127-287b-4091-a776-493562d78bc4","headingLevel":"11635c28-9457-4149-825d-1a9ce90c5bcb","headingLevelsParsed":"378c829b-34be-490f-b4d9-41e25574cf0f","headingAlignment":"22346884-9c5f-4da4-b8c7-7ab5e0a33354","headingAlignmentsParsed":"f2ed9ed8-4ada-4298-aa9d-040aa1bbffba","showHeadingAnchor":"b84acef6-46f1-441e-9172-9e6260d23832","id":"a10477c5-b61c-40ff-996e-c77819fa581a"}}]},{"identifier":"ec9517c9-935d-45cf-b213-25dca30ae45a","type":"CommunityPortal.HeadingWidget","variants":[{"identifier":"dde7eca0-ad17-46ef-9b72-6b410610fa54","properties":{"headingText":"Basic properties","headingLevel":"H3","headingLevelsParsed":2,"headingAlignment":"Left","headingAlignmentsParsed":0,"showHeadingAnchor":true,"id":"686e82ac-59bc-439f-9429-8eae73e9dc08"},"fieldIdentifiers":{"headingText":"0295da3c-be8d-403f-a1ad-fff299b027bc","headingLevel":"9d7b23bc-5313-42a1-99f6-890049ba944a","headingLevelsParsed":"d8991e63-3a6e-4c2a-af64-000ef67d3aab","headingAlignment":"1328a052-40c0-49d9-ab4c-4fc4071685be","headingAlignmentsParsed":"096b7520-412c-4e7c-9a08-d38cc6bc623d","showHeadingAnchor":"021414d9-dbab-4911-9c44-2976de39040b","id":"5f08ec49-9827-43c9-abf1-6e6fc8621213"}}]},{"identifier":"b04267ad-ef92-4564-844a-7ebfebaf89a2","type":"CommunityPortal.MarkdownWidget","variants":[{"identifier":"b1d39d5c-d9ca-4223-a1d5-efbddc6834e2","properties":{"markdown":"In the Dancing Goat project, go to `~/Components/Widgets` and add a new folder called `VideoEmbedWidget`. Within this folder, define a properties class that inherits from `IWidgetProperties`.\n\n```CSharp\nnamespace DancingGoat.Widgets;\n\npublic class VideoEmbedWidgetProperties : IWidgetProperties\n{\n\n}\n```\n\nAdd the necessary `using` directives to the file.\n\n```CSharp\nusing Kentico.Forms.Web.Mvc;\nusing Kentico.PageBuilder.Web.Mvc;\nusing Kentico.Xperience.Admin.Base.FormAnnotations;\nusing DancingGoat.FormComponents;\n```\n\nNext, define some constants within the class to hold the code names of the services we will use. Let's go with the examples cited above.\n\n```CSharp\npublic const string YOUTUBE = \"youtube\";\npublic const string VIMEO = \"vimeo\";\npublic const string DAILYMOTION = \"dailymotion\";\npublic const string FILE = \"file\";\n```\n\nNow let's consider what kinds of properties we'll need.\n\nSince the video can come from several places, and we'll need to react differently based on where, let's add property that signifies which service a video is from, and another to hold the url of the video itself.\n\n```CSharp\npublic string Service { get; set; }\npublic string Url { get; set; }\n```\n\nNext, we can signify whether the video should be sized dynamically, using a boolean property, and also add properties for the dimensions when its size is explicitly specified.\n\n```CSharp\npublic bool DynamicSize { get; set; }\npublic int Width { get; set; }\npublic int Height { get; set; }\n```\n\nFinally, let's add properties to specify whether the video should be played from the beginning, or from a timestamp, and what that timestamp should be.\n\n```CSharp\npublic bool PlayFromBeginning { get; set; }\npublic int StartingTime { get; set; }\n```\n\n","markdownStyle":"Standard","markdownStyleParsed":0,"markdownCodeLanguage":"","id":"a261d3f1-9fe4-47e3-9ddc-beeb8a86f093"},"fieldIdentifiers":{"markdown":"0ebd8460-85c5-4234-80a8-da2d351d0b88","markdownStyle":"08edba8f-019f-4c03-b163-24a931493001","markdownStyleParsed":"e1a452e0-aa3c-4d63-81e8-7eb92c958e7c","markdownCodeLanguage":"4e093776-1f76-41d6-b16b-504b0e590e12","id":"8d02d252-2f52-4b28-b636-28c04575cb52"}}]},{"identifier":"8691c5e8-398e-4bef-876f-7a4e75566a30","type":"CommunityPortal.HeadingWidget","variants":[{"identifier":"530b0665-3001-4b68-823f-f5ad0e99fd64","properties":{"headingText":"Editing controls","headingLevel":"H3","headingLevelsParsed":2,"headingAlignment":"Left","headingAlignmentsParsed":0,"showHeadingAnchor":true,"id":"49e1ed22-e34b-401c-acab-65b5b2c99354"},"fieldIdentifiers":{"headingText":"245bb4d9-4906-4694-af20-e89a0a326a6a","headingLevel":"7e6a23e3-b1f1-45fd-9e2f-85ff03109651","headingLevelsParsed":"b41ea393-356f-407e-85c6-fd3c3cb7f54c","headingAlignment":"91639fd6-76af-4bd2-b06c-caca599cc941","headingAlignmentsParsed":"b6dceaf0-8792-4853-9d32-01a838dcb629","showHeadingAnchor":"8a44c5e9-bf3c-4e6e-b050-585ec577d490","id":"744e95b5-ec90-4f98-914f-0f5aa51ae8f0"}}]},{"identifier":"f8256677-8197-43f5-91de-22b45675398c","type":"CommunityPortal.MarkdownWidget","variants":[{"identifier":"6efd4616-331b-4061-96e8-766cfb972c92","properties":{"markdown":"Now we can assign editing controls to our properties.\n\nSince the Service property should be picking from a finite list of options, let's make it use radio buttons, and have it default to the Youtube option, since this is the most popular video sharing service. We can assign a plain textbox to the Url property.\n\n```CSharp\n[RadioGroupComponent(Label = \"Video service\", Inline = true, Order = 1, Options = YOUTUBE + \";YouTube\\r\\n\" + VIMEO + \";Vimeo\\r\\n\" + DAILYMOTION + \";Dailymotion\\r\\n\" + FILE + \";File URL\\r\\n\")]\npublic string Service { get; set; } = YOUTUBE;\n\n[TextInputComponent(Label = \"Url\", Order = 2)]\npublic string Url { get; set; }\n```\n\nWe can use checkbox components for the boolean properties `DynamicSize` and `PlayFromBeginning`, and number or integer components for `Width`, `Height`, and `StartingTime`.\n\nSet the default starting time to 0, since we don't know how long the provided videos will be, and choose default dimensions that seem appropriate. Below are the default dimensions Youtube seems to use when generating embeds for videos with the standard aspect ratio.\n\n```CSharp\n[CheckBoxComponent(Label = \"Size dynamically\", Order = 3)]\npublic bool DynamicSize { get; set; } = true;\n\n[NumberInputComponent(Label = \"Width (px)\", Order = 4)]\npublic int Width { get; set; } = 560;\n\n[NumberInputComponent(Label = \"Height (px)\", Order = 5)]\npublic int Height { get; set; } = 315;\n\n[CheckBoxComponent(Label = \"Play from beginning\", Order = 6)]\npublic bool PlayFromBeginning { get; set; } = true;\n\n[NumberInputComponent(Label = \"Starting time (seconds)\", Order = 7)]\npublic int StartingTime { get; set; } = 0;\n```\n\n","markdownStyle":"Standard","markdownStyleParsed":0,"markdownCodeLanguage":"","id":"2e9dee91-77ce-40c9-a7e9-5aab6f3b2fcb"},"fieldIdentifiers":{"markdown":"d3b16f76-2ceb-446d-b1a5-03a559864589","markdownStyle":"3104903f-435c-4a98-aa94-181633056414","markdownStyleParsed":"4c97db08-c16d-4a7f-887e-792f4ac8a8cf","markdownCodeLanguage":"47f75fd2-5eb8-41c8-a61b-3967f9d22e22","id":"e48804cb-a9e3-40c5-9603-978900db337c"}}]},{"identifier":"4b1eaf37-a1fa-4f8f-9bf0-d9fccce43fe3","type":"CommunityPortal.HeadingWidget","variants":[{"identifier":"13dce7c4-9cc1-47dc-ac9a-d89203b781a1","properties":{"headingText":"Standard visibility conditions","headingLevel":"H3","headingLevelsParsed":2,"headingAlignment":"Left","headingAlignmentsParsed":0,"showHeadingAnchor":true,"id":"40e132cb-96f4-4d5b-916e-58bdfd62a14c"},"fieldIdentifiers":{"headingText":"0a6a928c-ee09-4f4a-8757-46fd940edc9a","headingLevel":"dda798cb-479f-4ecc-9e1e-3beb1aa00221","headingLevelsParsed":"d74c9697-13e2-4174-868b-89a3b73290a6","headingAlignment":"15bd4dca-afb3-469d-a846-19118cbb15f6","headingAlignmentsParsed":"531043db-1831-4b77-8b68-59b60f1fb178","showHeadingAnchor":"223aadb8-989f-45bf-9fc3-fa195d13cc19","id":"09d47265-2ef7-4c68-b05a-e8abaf976751"}}]},{"identifier":"7f8c6af6-c261-4d51-b7d7-ad1fb023e5c8","type":"CommunityPortal.MarkdownWidget","variants":[{"identifier":"5bd8ee4e-f431-46a8-97c6-0e6e0d195329","properties":{"markdown":"Now we can add visibility conditions to these properties.\n\nIn my testing, Youtube embeds seem to get a bit wonky when trying to size them dynamically (via percentage-based CSS). There may be some way around this with CSS wizardry, but that's not my strong suit, so let's hide the `DynamicSize` property when Youtube is the selected service.\n\n```CSharp\n[CheckBoxComponent(Label = \"Size dynamically\", Order = 3)]\n[VisibleIfNotEqualTo(nameof(Service), YOUTUBE)]\npublic bool DynamicSize { get; set; } = true;\n```\n\nSimilarly, Dailymotion does not allow embeds to start at a specific timestamp, so we can hide the `PlayFromBeginning` checkbox when it is the selected service.\n\n```CSharp\n[CheckBoxComponent(Label = \"Play from beginning\", Order = 6)]\n[VisibleIfNotEqualTo(nameof(Service), DAILYMOTION)]\npublic bool PlayFromBeginning { get; set; } = true;\n```\n\nNext, let's determine the visibility of the `StartingTime` numeric input. We want this to hidden when `PlayFromBeginning` is true, as well as when Dailymotion is selected, regardless of the value of `PlayFromBeginning`. Thankfully, these conditions can be applied by stacking multiple visibility conditions. The `StartingTime` property will only be visible when both conditions are met.\n\n```CSharp\n[NumberInputComponent(Label = \"Starting time (seconds)\", Order = 7)]\n[VisibleIfFalse(nameof(PlayFromBeginning))]\n[VisibleIfNotEqualTo(nameof(Service), DAILYMOTION)]\npublic int StartingTime { get; set; } = 0;\n```\n\n","markdownStyle":"Standard","markdownStyleParsed":0,"markdownCodeLanguage":"","id":"f03abe06-3763-4164-aa0d-2b58f18360b3"},"fieldIdentifiers":{"markdown":"75a6f9a3-f81d-4e7b-9e03-d0a54f3e6a1b","markdownStyle":"ab6f9435-aba8-4817-bf27-0bc34062449b","markdownStyleParsed":"2cbe9938-25c0-4b4a-8374-bdeb9d3a9974","markdownCodeLanguage":"5a33e344-5bdc-4f95-bee5-8140f583dfec","id":"f733fe19-5a44-4005-9b53-ca386510c773"}}]},{"identifier":"32da4a5c-251b-45d3-856c-a75375a71fdd","type":"CommunityPortal.HeadingWidget","variants":[{"identifier":"ad856242-cf29-4efb-986e-12a6804fd71d","properties":{"headingText":"Setting up the widget display","headingLevel":"H2","headingLevelsParsed":1,"headingAlignment":"Left","headingAlignmentsParsed":0,"showHeadingAnchor":true,"id":"3ad905ab-a973-442f-ad8b-a2b7a7382b30"},"fieldIdentifiers":{"headingText":"7c0b7b4e-a3b4-4b77-9810-140f9a0977f3","headingLevel":"67d40084-b244-4a70-bcaa-5e2302883af1","headingLevelsParsed":"5190d438-2224-4cb1-9a98-6059dc8f8722","headingAlignment":"91d5df3e-be60-4528-8143-f03628eee546","headingAlignmentsParsed":"d92305a0-2db2-49b1-bbe2-175141498ac8","showHeadingAnchor":"b7c3533f-1692-42a5-891d-9a88e671e4a2","id":"e6e9f715-714c-4df0-b904-77f4ef3a41c3"}}]},{"identifier":"cd6d2a18-a4a0-45c5-93f8-9b5782a45ef7","type":"CommunityPortal.MarkdownWidget","variants":[{"identifier":"2683aaa8-aa8d-4c2a-ac0e-c5886835417e","properties":{"markdown":"Now let's add a viewmodel and view for our widget.\n","markdownStyle":"Standard","markdownStyleParsed":0,"markdownCodeLanguage":"","id":"d8d9a3eb-e324-4ea7-833c-166692cee812"},"fieldIdentifiers":{"markdown":"96cf3ec2-1bfe-4205-b810-f15188756e74","markdownStyle":"8b8fd7e7-59f9-4420-a4f0-5a795291ee1e","markdownStyleParsed":"8d648ae8-ebdb-4d54-8fb9-320e7a66ee6e","markdownCodeLanguage":"0e30289f-d26c-47ba-8a0c-426419fc625d","id":"a1a2a57e-4a39-45d9-a58a-c4a8be0a1ef0"}}]},{"identifier":"97c989e5-b90a-4b1b-a5ce-ad5b1e4b3c51","type":"CommunityPortal.HeadingWidget","variants":[{"identifier":"130b05b7-08d4-4659-92a5-97aef483eaef","properties":{"headingText":"Viewmodel","headingLevel":"H3","headingLevelsParsed":2,"headingAlignment":"Left","headingAlignmentsParsed":0,"showHeadingAnchor":true,"id":"4bf5fbc8-2bbb-4cb4-b702-528ddb2f825d"},"fieldIdentifiers":{"headingText":"756f7fa4-a4c3-49c2-ab23-dcdd7fa5282b","headingLevel":"8f3d78e1-d289-4a92-b944-6c8e3bd4f049","headingLevelsParsed":"740e5552-fa32-433a-a314-ca057dab4da0","headingAlignment":"356685c9-9833-48e1-a112-4ede6d2704ec","headingAlignmentsParsed":"144e9cf5-b513-43ab-bd80-9598157588b4","showHeadingAnchor":"b779ad06-8faf-4f05-b6b7-940d47126161","id":"0316365a-8349-4b1b-b3d6-2c227fe33b94"}}]},{"identifier":"71911fca-3b48-40c6-9437-8294c07e1db8","type":"CommunityPortal.MarkdownWidget","variants":[{"identifier":"f2edbd88-c80b-4ddd-83a0-08f095574ba3","properties":{"markdown":"Create a class called `VideoEmbedWidgetViewModel` in the `DancingGoat.Widgets` namespace.\n\n```CSharp\nnamespace DancingGoat.Widgets;\n\npublic class VideoEmbedWidgetViewModel\n{\n    //...\n}\n```\n\nAdd a string property called `Markup`, which we can use to store the Html that will be rendered for the widget. Due to the variety of video platforms, and potential configuration within each one, a lot of conditional logic will go into assembling the markup for the embed, so we should evaluate this logic in the view component rather than the view.\n\n```CSharp\npublic string Markup { get; set; }\n```\n\n","markdownStyle":"Standard","markdownStyleParsed":0,"markdownCodeLanguage":"","id":"a67c48df-1dca-4e75-9b66-6ab3b73544de"},"fieldIdentifiers":{"markdown":"9fd48cc7-5870-4459-ae68-b5f6cabe6343","markdownStyle":"460019a7-0cff-4d6d-aad2-e733f960155a","markdownStyleParsed":"200db579-90f2-4b1b-b4a3-84b7c45639b3","markdownCodeLanguage":"f688bef6-267c-45b7-b7f8-25712a31f718","id":"861cabe8-5ac2-4b2e-a39a-3d0688b9db7b"}}]},{"identifier":"07c1f457-d06b-4f7e-b45f-4a4780485006","type":"CommunityPortal.HeadingWidget","variants":[{"identifier":"6303482d-8b53-4cb2-8ad7-6de923242353","properties":{"headingText":"View","headingLevel":"H3","headingLevelsParsed":2,"headingAlignment":"Left","headingAlignmentsParsed":0,"showHeadingAnchor":true,"id":"cb67863b-966e-4801-89dc-e917601a0bfc"},"fieldIdentifiers":{"headingText":"84c03ddd-ef49-488a-b03d-74053bfcbc03","headingLevel":"dd5655f4-2bfa-4464-a06d-be8e46f92f4d","headingLevelsParsed":"8a7eaa3a-5603-4fbb-b78d-175a41014bb9","headingAlignment":"b7412d49-6739-45b9-90a7-3009992e1b4c","headingAlignmentsParsed":"ca59665d-7a97-40d7-a7aa-8fe5a084df99","showHeadingAnchor":"57d08d1c-f1d5-4a09-a82d-377d30e281e1","id":"645f4b9d-8f11-4516-a091-0806ee0ec441"}}]},{"identifier":"0db59d12-f504-42e5-a7f6-e1310b01d0e2","type":"CommunityPortal.MarkdownWidget","variants":[{"identifier":"b54dcc39-84b2-4cba-953e-35f51cc5ca61","properties":{"markdown":"Now let's add the view. Create a new view file in the same folder called `_VideoEmbedWidget.cshtml`.\n\nThis aligns with the conventions set by the other widgets in the Dancing Goat project, such as `HeroImageWidget` and `ProductCardWidget`, though other projects may have their own conventions. The system automatically checks the `~/Views/Shared/Widgets` for a view named `_{your widget identifier}.cshtml` when no view is specified in the widget registration or the view component's result.\n\nFor the purposes of this example, we'll keep it simple, and simply render the markup passed in the viewmodel.\n\n```CSharp\n@model DancingGoat.Widgets.VideoEmbedWidgetViewModel\n@Html.Raw(Model.Markup)\n```\n\n","markdownStyle":"Standard","markdownStyleParsed":0,"markdownCodeLanguage":"","id":"201189d0-13cc-4b95-b823-363634b0e327"},"fieldIdentifiers":{"markdown":"c71cc600-4996-41b5-8634-5a413692becc","markdownStyle":"4b0ebd34-e47f-434b-b2af-8c1e33899f9c","markdownStyleParsed":"acd0975a-1f13-42d0-8860-ee6015282e8c","markdownCodeLanguage":"77c70bfb-9485-4809-a9d7-a1221c7ac3ee","id":"62fe8ac8-dc9e-496e-81f2-459178e76c00"}}]},{"identifier":"114107d5-2e85-4d30-9c20-f872fc2a93f5","type":"CommunityPortal.HeadingWidget","variants":[{"identifier":"3e5cc3b8-7106-4905-aa7a-30f964b1bcaa","properties":{"headingText":"Creating the ViewComponent","headingLevel":"H2","headingLevelsParsed":1,"headingAlignment":"Left","headingAlignmentsParsed":0,"showHeadingAnchor":true,"id":"41299495-07af-4bff-98d3-672ee22099d9"},"fieldIdentifiers":{"headingText":"f9e9b4d5-981a-4a4b-b93b-6f046abee4b1","headingLevel":"141dc77f-390d-46f4-bdff-bdbf98e0a246","headingLevelsParsed":"f4edd582-dc49-4261-ab0f-4c4f32c23c77","headingAlignment":"f89f090a-de59-431f-9043-d2b6a44e7e03","headingAlignmentsParsed":"657576ef-608e-45fb-8a66-88105c8c263c","showHeadingAnchor":"5ee6bee6-7e40-4d43-ab4a-eb5e4f4692d7","id":"046aae4f-9170-4f82-a423-fe7104631ad6"}}]},{"identifier":"0a0acf97-c1a0-45c0-a713-8fb61515d512","type":"CommunityPortal.MarkdownWidget","variants":[{"identifier":"286e0f32-76c6-4145-a331-214a7a35b9c1","properties":{"markdown":"Now we can create a `ViewComponent` class that holds most of the widget's logic. Add a new file to your `VideoEmbedWidget` folder called `VideoEmbedWidgetViewComponent.cs`.\n\nGive this class the following using directives.\n\n```CSharp\nusing Kentico.PageBuilder.Web.Mvc;\nusing Microsoft.AspNetCore.Mvc;\nusing System;\nusing System.Web;\nusing DancingGoat.Widgets;\nusing Microsoft.Extensions.Localization;\n```\n\nUse the `DancingGoat.Widgets` namespace, and make the class inherit from `ViewComponent`.\n\n```CSharp\nnamespace DancingGoat.Widgets;\n\npublic class VideoEmbedWidgetViewComponent : ViewComponent\n{\n    //...\n}\n```\n\nAdd a constant for the widget's identifier. This is the value that is used to connect the widget configurations saved for each instance of your widget in the database with the code that is used to render it.\n\n```CSharp\npublic const string IDENTIFIER = \"DancingGoat.VideoEmbedWidget\";\n```\n\nThen add the `RegisterWidget` assembly attribute to this class, passing each of the following parameters.\n\n* The identifier constant.\n* The type of the widget's view component.\n* A localization macro for the display name of the widget, which is rendered in the page builder.\n* The type of the widget's properties.\n* A localization macro for the description of the widget, which is rendered in the page builder\n* The CSS class of the icon which should visually represent the widget in the listing in page builder. Let's use the right-facing triangle icon, which resembles a \"play\" button.\n\n```CSharp\n[assembly: RegisterWidget(\n    identifier: VideoEmbedWidgetViewComponent.IDENTIFIER, \n    viewComponentType: typeof(VideoEmbedWidgetViewComponent), \n    name: \"Video embed\", \n    propertiesType: typeof(VideoEmbedWidgetProperties), \n    Description = \"Embeds a video in the page.\", \n    IconClass = \"icon-triangle-right\")]\n```\n\nThe path to the widget's view can also be included in the widget registration, but in keeping with this project's conventions, we will forgo this option and handle it elsewhere.\n\nAdd a private property for an `IStringLocalizer`, utilizing the `SharedResources` type which is included in the Dancing Goat by default, and populate it through dependency injection in the constructor.\n\n```CSharp\nprivate readonly IStringLocalizer<SharedResources> localizer;\n\npublic VideoEmbedWidgetViewComponent(IStringLocalizer<SharedResources> localizer)\n{\n    this.localizer = localizer;\n}\n```\n\nThis will open up the widget to the possibility of localization for its error messages in the future.\n\nWith this setup taken care of, we can look into the meat of the component.\n\nThe primary method of a view component is Invoke, of the type `IViewComponentResult`. For a parameter, it takes a `ComponentViewModel` with a generic type parameter to hold the type of its properties. This can be set to the `IWidgetProperties` implementation defined earlier, `VideoEmbedWidgetProperties`.\n\n```CSharp\npublic IViewComponentResult Invoke(ComponentViewModel<VideoEmbedWidgetProperties> widgetProperties)\n{\n    //...\n}\n```\n\nIn keeping with the conventions of the other Dancing Goat widgets, this method should return a view, the path to which is passed directly to the `View()` method rather than through the widget registration attribute.\n\nWe'll pass an instance of the `VideoEmbedWidgetViewModel` class that we created earlier as the model for this view. This view model has a string property called `Markup`, which holds the HTML markup of the video embed. We should add a method to supply this markup, which uses the supplied `VideoEmbedWidgetProperties` to generate the proper markup.\n\nLet's call it `GetEmbedMarkup`, and add a call in the Invoke method.\n\n```CSharp\npublic IViewComponentResult Invoke(ComponentViewModel<VideoEmbedWidgetProperties> widgetProperties)\n{\n    string markup = GetEmbedMarkup(widgetProperties.Properties);\n    return View(\"~/Components/Widgets/VideoEmbedWidget/_VideoEmbedWidget.cshtml\", new VideoEmbedWidgetViewModel { Markup = markup });\n}\n```\n\nNow, with this example of how it should work, let's implement this method. It needs to take a `VideoEmbedWidgetProperties` object as a parameter.\n\n```CSharp\nprivate string GetEmbedMarkup(VideoEmbedWidgetProperties widgetProperties)\n{\n    //...             \n}\n```\n\nSince all of this functionality hinges on embedding a video, let's first make sure the video is not null, and return a message if it is missing. Since this text will be returned as markup, it will be rendered to the page builder interface, where the editor can read it and react accordingly.\n\n```CSharp\nif(widgetProperties != null && !string.IsNullOrEmpty(widgetProperties.Url))\n{\n    //...\n}\n\nreturn localizer[\"Please make sure the URL property is filled in.\"];\n```\n\nNow we can check which video service is selected, and create HTML markup accordingly. Let's use a *switch expression* to return a different method for each video service. We can use calls to methods that don't exist yet, and then go through an implement them one-at-a-time.\n\nCheck the value of `widgetProperties.Service` against the various constants defined in the properties, and return a message if there are no matches.\n\n```CSharp\nreturn widgetProperties.Service switch\n{\n    VideoEmbedWidgetProperties.YOUTUBE => GetYoutubeMarkup(widgetProperties),\n    VideoEmbedWidgetProperties.VIMEO => GetVimeoMarkup(widgetProperties),\n    VideoEmbedWidgetProperties.DAILYMOTION => GetDailyMotionMarkup(widgetProperties),\n    VideoEmbedWidgetProperties.FILE => GetFileMarkup(widgetProperties),\n    _ => localizer[\"Specified video service not found.\"],\n};\n```\n\nThe resulting `GetEmbedMarkup` file should look like this.\n\n```CSharp\nprivate string GetEmbedMarkup(VideoEmbedWidgetProperties widgetProperties)\n{\n    if(widgetProperties != null && !string.IsNullOrEmpty(widgetProperties.Url))\n    {\n        return widgetProperties.Service switch\n        {\n            VideoEmbedWidgetProperties.YOUTUBE => GetYoutubeMarkup(widgetProperties),\n            VideoEmbedWidgetProperties.VIMEO => GetVimeoMarkup(widgetProperties),\n            VideoEmbedWidgetProperties.DAILYMOTION => GetDailyMotionMarkup(widgetProperties),\n            VideoEmbedWidgetProperties.FILE => GetFileMarkup(widgetProperties),\n            _ => localizer[\"Specified video service not found.\"],\n        };\n    }\n    return localizer[\"Please make sure the URL property is filled in.\"];                \n}\n```\n\nLet's start out with the Youtube-specific method first. Create a string method called `GetYoutubeMarkup`, which takes a `VideoEmbedWidgetProperties` object as a parameter.\n\n```CSharp\nprivate string GetYoutubeMarkup(VideoEmbedWidgetProperties widgetProperties)\n{\n    //...\n}\n```\n\nStart out by validating the parameters, like in the `GetEmbedMarkup` method. The code should not reach this point if the properties or URL is null, but it's a good practice to validate nullable parameters anyway, in case there are future changes to how the method is called.\n\n```CSharp\nif (widgetProperties != null && !string.IsNullOrEmpty(widgetProperties.Url))\n{\n    //...\n}\nreturn localizer[\"Please make sure the URL property is filled in.\"];\n```\n\nLet's add a call to a method that extracts the Youtube ID of the video from the URL, which we will implement next.\n\n```CSharp\nstring videoId = GetYoutubeId(widgetProperties.Url);\n```\n\nThen, validate this video ID and assemble the markup if it is not empty.\n\nBased on whether or not the video is set to play from the beginning, we can make a query string using the `start` parameter.\n\nThen, we can drop all of our pieces into an `iframe`, which is configured to mirror the markup provided by the embed sharing option on Youtube itself.\n\n```CSharp\nif (!string.IsNullOrEmpty(videoId))\n{\n    string query = widgetProperties.PlayFromBeginning ? string.Empty : $\"?start={widgetProperties.StartingTime}\";\n    return $\"<iframe width=\\\"{widgetProperties.Width}\\\" height=\\\"{widgetProperties.Height}\\\" src=\\\"https://www.youtube.com/embed/{videoId}{query}\\\" title=\\\"YouTube video player\\\" frameborder=\\\"0\\\" allow=\\\"accelerometer;autoplay;clipboard-write;encrypted-media;gyroscope;picture-in-picture;web-share\\\" allowfullscreen></iframe>\";\n}\nreturn localizer[\"Unable to parse Youtube video ID from the provided Url.\"];\n```\n\nThe ending result will look like this:\n\n```CSharp\nprivate string GetYoutubeMarkup(VideoEmbedWidgetProperties widgetProperties)\n{\n    if (widgetProperties != null && !string.IsNullOrEmpty(widgetProperties.Url))\n    {\n        string videoId = GetYoutubeId(widgetProperties.Url);\n        if (!string.IsNullOrEmpty(videoId))\n        {\n            string query = widgetProperties.PlayFromBeginning ? string.Empty : $\"?start={widgetProperties.StartingTime}\";\n            return $\"<iframe width=\\\"{widgetProperties.Width}\\\" height=\\\"{widgetProperties.Height}\\\" src=\\\"https://www.youtube.com/embed/{videoId}{query}\\\" title=\\\"YouTube video player\\\" frameborder=\\\"0\\\" allow=\\\"accelerometer;autoplay;clipboard-write;encrypted-media;gyroscope;picture-in-picture;web-share\\\" allowfullscreen></iframe>\";\n        }\n        return localizer[\"Unable to parse Youtube video ID from the provided Url.\"];\n    }\n    return localizer[\"Please make sure the URL property is filled in.\"];\n}\n```\n\nMoving on to the `GetYoutubeId` method mentioned above, it should be of the type `string`, and take a string parameter for the URL.\n\n```CSharp\nprivate string GetYoutubeId(string url)\n{\n    //...\n}\n```\n\nHere, we have to find the video ID based on the provided Youtube URL. However, we may encounter multiple formats of Youtube URL, as we don't know where the editor using the widget is going to be copy/pasting from. For example, all of the following URLs have the same video ID, `dQw4w9WgXcQ`.\n\n* <https://www.youtube.com/watch?v=dQw4w9WgXcQ>\n* <http://www.youtube.com/watch?feature=player_embedded&v=dQw4w9WgXcQ>\n* <https://youtu.be/dQw4w9WgXcQ>\n* <http://m.youtube.com/v/dQw4w9WgXcQ>\n* <https://youtube.com/v/dQw4w9WgXcQ?feature=youtube_gdata_player>\n\nIt seems that if the video URL is passed through the query string, it will reliably be sent as the v parameter. Otherwise, it will be the final part of the path, prior to a possible query string.\n\nTo account for this, let's make two more methods-- one to pull the video ID from the query parameter, and another to get it from the end of the path. We can call the first, then if it returns no result, call the second.\n\n```CSharp\nif (!string.IsNullOrEmpty(url))\n{\n    string queryId = GetIdFromQuery(url, \"v\");\n    return string.IsNullOrEmpty(queryId) ? GetFinalPathComponent(url) : queryId;\n}\nreturn string.Empty;\n```\n\n`GetIdFromQuery` should take two string parameters-- one for the Url, and one for the name of the query parameter.\n\n```CSharp\nprivate string GetIdFromQuery(string url, string paramName)\n{\n    //...\n}\n```\n\nValidate the parameters, and construct a Uri from the URL if they are not empty. This object has a property called `Query`, which can be parsed by the `HttpUtility` class if it is not null.\n\n```CSharp\nif (!string.IsNullOrEmpty(url) && !string.IsNullOrEmpty(paramName))\n{\n    Uri uri = new Uri(url);\n    if (!string.IsNullOrEmpty(uri.Query))\n    {\n        var query = HttpUtility.ParseQueryString(uri.Query);\n        //...\n    }\n}\nreturn string.Empty;\n```\n\nFinally, we can validate this parsed collection of values and extract the necessary parameter.\n\n```CSharp\nif (query != null)\n{\n    return query.Get(paramName);\n}\n```\n\nAltogether, the method should look like this.\n\n```CSharp\nprivate string GetIdFromQuery(string url, string paramName)\n{\n    if (!string.IsNullOrEmpty(url) && !string.IsNullOrEmpty(paramName))\n    {\n        Uri uri = new Uri(url);\n        if (!string.IsNullOrEmpty(uri.Query))\n        {\n            var query = HttpUtility.ParseQueryString(uri.Query);\n            if (query != null)\n            {\n                return query.Get(paramName);\n            }\n        }\n    }\n    return string.Empty;\n}\n```\n\nThe other method for finding the ID from the path only needs one parameter, the URL.\n\n```CSharp\nprivate string GetFinalPathComponent(string url)\n{\n    //...\n}\n```\n\nAfter validating the URL, use the `string.Split()` method to isolate everything that comes before the query string, if there is one.\n\n```CSharp\nif(!string.IsNullOrEmpty(url))\n{\n    string baseUrl = url.Split('?')[0];\n    //...\n}\nreturn string.Empty;\n```\n\nThen, you can split the string again, this time on the `/` character. If the resulting array has more than 3 elements, it means that the URL contains more than just the protocol and domain, so you can return the final element of this array.\n\n```CSharp\nvar urlComponents = baseUrl.Split('/');\n\nif(urlComponents.Length > 3)\n{\n    return urlComponents[urlComponents.Length - 1];\n}\n```\n\nThe resulting method should look like this, once all is finished.\n\n```CSharp\nprivate string GetFinalPathComponent(string url)\n{\n    if(!string.IsNullOrEmpty(url))\n    {\n        string baseUrl = url.Split('?')[0];\n        var urlComponents = baseUrl.Split('/');\n        \n        if(urlComponents.Length > 3)\n        {\n            return urlComponents[urlComponents.Length - 1];\n        }\n    }\n    return string.Empty;\n}\n```\n\nThat should wrap up the Youtube method, so now we can move on to the next.\n\n`GetVimeoMarkup` will be similar overall, but with the addition of dynamic sizing, and no need to look for the video ID in the query string.\n\nStart out by validating the properties and the URL, before using the `GetFinalPathComponent` method to retrieve the Vimeo ID. Validate the retrieved ID as well.\n\n```CSharp\nprivate string GetVimeoMarkup(VideoEmbedWidgetProperties widgetProperties)\n{\n   if (widgetProperties != null && !string.IsNullOrEmpty(widgetProperties.Url))\n   {\n       var videoId = GetFinalPathComponent(widgetProperties.Url);\n       if (!string.IsNullOrEmpty(videoId))\n       {\n           //...\n       }\n       return localizer[\"Unable to parse Vimeo video ID from the provided Url.\"];\n   }\n   return localizer[\"Please make sure the URL property is filled in.\"];\n}\n```\n\nVimeo's embeds use an anchor rather than a query string parameter to specify what time the video should start at, but the process of getting the anchor should be nearly identical to that of the query string in the Youtube example.\n\n```CSharp\nstring anchor = widgetProperties.PlayFromBeginning \n    ? string.Empty \n    : $\"#t={widgetProperties.StartingTime}s\";\n```\n\nNext, we want to render different markup depending on whether the video should be sized dynamically, or with explicit width and height.\n\nThe share embed functionality on Vimeo nests the `iframe` within a div with certain styles, and provides a script for adapting to the size responsively. The markup for the static sized version looks somewhat similar to Youtube.\n\n```CSharp\nif(widgetProperties.DynamicSize)\n{\n    return $\"<div style=\\\"padding: 56.25% 0 0 0;position:relative;\\\"><iframe src=\\\"https://player.vimeo.com/video/{videoId}{anchor}\\\" style=\\\"position:absolute;top:0;left:0;width:100%;height:100%;\\\" frameborder=\\\"0\\\" allow=\\\"autoplay; fullscreen; picture-in-picture\\\" allowfullscreen></iframe></div><script src=\\\"https://player.vimeo.com/api/player.js\\\"></script>\";\n}\nelse\n{\n    return $\"<iframe src=\\\"https://player.vimeo.com/video/{videoId}{anchor}\\\" width=\\\"{widgetProperties.Width}\\\" height=\\\"{widgetProperties.Height}\\\" frameborder=\\\"0\\\" allow=\\\"autoplay; fullscreen; picture-in-picture\\\" allowfullscreen ></iframe >\";\n}\n```\n\nThe completed `GetVimeoMarkup` method should look like this.\n\n```CSharp\nprivate string GetVimeoMarkup(VideoEmbedWidgetProperties widgetProperties)\n{\n    if (widgetProperties != null && !string.IsNullOrEmpty(widgetProperties.Url))\n    {\n        var videoId = GetFinalPathComponent(widgetProperties.Url);\n        if (!string.IsNullOrEmpty(videoId))\n        {\n            string anchor = widgetProperties.PlayFromBeginning ? string.Empty : $\"#t={widgetProperties.StartingTime}s\";\n            if(widgetProperties.DynamicSize)\n            { \n                return $\"<div style=\\\"padding: 56.25% 0 0 0;position:relative;\\\"><iframe src=\\\"https://player.vimeo.com/video/{videoId}{anchor}\\\" style=\\\"position:absolute;top:0;left:0;width:100%;height:100%;\\\" frameborder=\\\"0\\\" allow=\\\"autoplay; fullscreen; picture-in-picture\\\" allowfullscreen></iframe></div><script src=\\\"https://player.vimeo.com/api/player.js\\\"></script>\";\n            }\n            else\n            {\n                return $\"<iframe src=\\\"https://player.vimeo.com/video/{videoId}{anchor}\\\" width=\\\"{widgetProperties.Width}\\\" height=\\\"{widgetProperties.Height}\\\" frameborder=\\\"0\\\" allow=\\\"autoplay; fullscreen; picture-in-picture\\\" allowfullscreen ></iframe >\";\n            }\n        }\n        return localizer[\"Unable to parse Vimeo video ID from the provided Url.\"];\n    }\n    return localizer[\"Please make sure the URL property is filled in.\"];\n}\n```\n\nContinuing down the switch statement in `GetEmbedMarkup`, we have `GetDailyMotionMarkup` next, which is nearly identical to the Vimeo method, except that it has no functionality for starting the video partway through or special script. At this point, I think you should be able to make sense of it all.\n\n```CSharp\nprivate string GetDailyMotionMarkup(VideoEmbedWidgetProperties widgetProperties)\n{\n    if (widgetProperties != null && !string.IsNullOrEmpty(widgetProperties.Url))\n    {\n        var videoId = GetFinalPathComponent(widgetProperties.Url);\n        if (!string.IsNullOrEmpty(videoId))\n        {\n            if (widgetProperties.DynamicSize)\n            {\n                return $\"<div style=\\\"position:relative;padding-bottom:56.25%;height:0;overflow:hidden;\\\"> <iframe style=\\\"width:100%;height:100%;position:absolute;left:0px;top:0px;overflow:hidden\\\" frameborder=\\\"0\\\" type=\\\"text/html\\\" src=\\\"https://www.dailymotion.com/embed/video/{videoId}\\\" width=\\\"100%\\\" height=\\\"100%\\\" allowfullscreen title=\\\"Dailymotion Video Player\\\" allow=\\\"autoplay\\\"></iframe></div>\";\n            }\n            else\n            {\n                return $\"<iframe src=\\\"https://www.dailymotion.com/embed/video/{videoId}\\\" width=\\\"{widgetProperties.Width}\\\" height=\\\"{widgetProperties.Height}\\\" frameborder=\\\"0\\\" type=\\\"text/html\\\" allowfullscreen title=\\\"Dailymotion Video Player\\\"></iframe>\";\n            }\n        }\n        return localizer[\"Unable to parse Dailymotion video ID from the provided Url.\"];\n    }\n    return localizer[\"Please make sure the URL property is filled in.\"];\n}\n```\n\nThe last of the Markup methods is `GetFileMarkup`. It will start out similarly to the others.\n\n```CSharp\nprivate string GetFileMarkup(VideoEmbedWidgetProperties widgetProperties)\n{\n    if (widgetProperties != null && !string.IsNullOrEmpty(widgetProperties.Url))\n    {\n        //...\n    }\n    return localizer[\"Please make sure the URL property is filled in.\"];\n}\n```\n\nHowever, this final method introduces a new requirement- The `<video>` tag in Html utilizes an attribute called type which is typically set to values such as `video/mp4` or `video/ogg`. In order to populate this attribute, we'll need to find the file extension of the provided video.\n\nLet's add a call to a new method, `GetFileExtension`, and validate its result.\n\n```CSharp\nstring extension = GetFileExtension(widgetProperties.Url);\nif (!string.IsNullOrEmpty(extension))\n{\n    //...\n}\nreturn localizer[\"Unable to parse file extension from the provided Url.\"];\n```\n\nThe video tag supports starting times set through an anchor tag on the URL, similar to Vimeo.\n\n```CSharp\nstring anchor = widgetProperties.PlayFromBeginning \n    ? string.Empty \n    : $\"#t={widgetProperties.StartingTime}\";\n```\n\nLastly, we can return a different video tag that uses either the `style` or `width`/`height` attributes to set its size, depending on whether the properties indicate that it should be sized dynamically.\n\n```CSharp\nif (widgetProperties.DynamicSize)\n{\n    return $\"<video style=\\\"width:100%;\\\" controls><source src=\\\"{widgetProperties.Url}{anchor}\\\" type=\\\"video/{extension}\\\"></video>\";\n}\nelse\n{\n    return $\"<video width=\\\"{widgetProperties.Width}\\\" height=\\\"{widgetProperties.Height}\\\" controls><source src=\\\"{widgetProperties.Url}{anchor}\\\" type=\\\"video/{extension}\\\"></video>\";\n}\n```\n\nNow all that's left is to implement the GetFileExtension method. This method should take a URL like <https://www.mywebsite.com/files/videofile.mp4> and isolate the `.mp4` at the end.\n\nTake the URL as a parameter, and set the return type to `string`.\n\n```CSharp\nprivate string GetFileExtension(string url)\n{\n    //...\n}\n```\n\nAfter validating the URL, use the `GetFinalPathComponent` method from earlier to get what comes after the last slash in the path.\n\n```CSharp\nif (!string.IsNullOrEmpty(url))\n{\n    string finalComponent = GetFinalPathComponent(url);\n    //...\n}\nreturn string.Empty;\n```\n\nSplit this string on the `.` character, and if the resulting array has more than one element, return the final one as the file extension.\n\n```CSharp\nstring[] parts = finalComponent.Split('.');\nif (parts.Length > 1)\n{\n    return parts[parts.Length - 1];\n}\n```\n\nThe resulting method should look like this.\n\n```CSharp\nprivate string GetFileExtension(string url)\n{\n    if (!string.IsNullOrEmpty(url))\n    {\n        string finalComponent = GetFinalPathComponent(url);\n        string[] parts = finalComponent.Split('.');\n        if (parts.Length > 1)\n        {\n            return parts[parts.Length - 1];\n        }\n    }\n    return string.Empty;\n}\n```\n\n","markdownStyle":"Standard","markdownStyleParsed":0,"markdownCodeLanguage":"","id":"c721b117-1e26-431b-8dff-3fb9230f3067"},"fieldIdentifiers":{"markdown":"c76ce8bb-8398-43f7-a401-dfd0cb976876","markdownStyle":"b9f12721-863d-4011-93b8-a2f73d2b0d51","markdownStyleParsed":"389a6cd1-af3f-47e7-a398-76a13b46a319","markdownCodeLanguage":"5df701da-a980-4512-8daf-892d5ed65224","id":"d32d3727-ba68-481d-b9eb-5ea10dfb4f53"}}]},{"identifier":"12b296c8-f33b-4bae-acdc-f0eb3b76a9d2","type":"CommunityPortal.HeadingWidget","variants":[{"identifier":"d36f170e-0069-43a1-b965-8d2af33f84e5","properties":{"headingText":"More advanced visibility scenarios","headingLevel":"H2","headingLevelsParsed":1,"headingAlignment":"Left","headingAlignmentsParsed":0,"showHeadingAnchor":true,"id":"601f5d97-38a2-45df-b625-bcf87a2ab1e6"},"fieldIdentifiers":{"headingText":"11b12e49-f1ee-404c-a31b-bc348934017d","headingLevel":"d8be80b8-3096-4bc3-bda5-2fcba505451e","headingLevelsParsed":"a3c7e145-8dc0-4c22-acbf-cc82097b0e25","headingAlignment":"3211b0cc-298f-4dcf-b945-39e9802c3bfc","headingAlignmentsParsed":"e2cc77b9-6931-474f-9113-af31226c186a","showHeadingAnchor":"9694183e-e30b-4169-aa2c-fcb327b0f388","id":"78ccc5b2-732f-4d78-a1e4-7ae888fb2575"}}]},{"identifier":"d496ac48-b209-4934-9be4-ff3ece9c187b","type":"CommunityPortal.MarkdownWidget","variants":[{"identifier":"99b3166f-5b0a-4ab4-b0c9-ad5f83dec046","properties":{"markdown":"You may have noticed that the properties that specify explicit dimensions for the video are still always visible. This is because the logic that should determine whether they are displayed is a bit more complicated.\n\nThey should always be displayed when the selected service is Youtube, but only when the checkbox for dynamic size is not enabled for any other service. Logically, it should look something like this:\n\n`(Service is Youtube) OR (DynamicSize is disabled)`\n\nor alternatively,\n\n`NOT((Service is not youtube) AND (Dynamic size is enabled))`\n\nWith stacked visibility conditions, the field will only display when both of them are true. And since there's no way to negate the entire combination, we have to find an alternate way to evaluate a more complex boolean condition.\n\nA [custom visibility condition](https://docs.xperience.io/xp/developers-and-admins/customization/extend-the-administration-interface/ui-form-components/ui-form-component-visibility-conditions#UIformcomponentvisibilityconditions-Visibilityconditionswithfielddependencies) also does not quite cut it for this scenario. While they allow for more complex logic, they can only access the value of the property to which they are applied, and a single other property.\n\nA complicating factor to adding this logic is that visibility conditions must depend on properties that are rendered in the properties form. We can't rely on the value of a `get` accessor for a property that does not have an editing component, or which is currently hidden.\n\nHowever, if we can get a field that technically renders without actually displaying anything, we can use its `get` accessor however we please, without worrying about its value becoming inaccessible due to a visibility condition change.\n\nSo in order to accomplish this end, let's create an invisible form component.\n","markdownStyle":"Standard","markdownStyleParsed":0,"markdownCodeLanguage":"","id":"a6a7ed66-e465-4a50-9d28-b5c8073b7174"},"fieldIdentifiers":{"markdown":"7b046cd2-7365-4b49-9199-4140abb989e0","markdownStyle":"a1a78d7f-68da-44be-9f7a-d5756f6594f8","markdownStyleParsed":"b0aa67a0-8315-4c72-9948-2a7659fd2679","markdownCodeLanguage":"9097c2e0-7235-4a20-901e-064ce208d0fc","id":"275135c4-46db-4c8c-819e-ec8d10054cbb"}}]},{"identifier":"2a588784-c784-447f-84ee-37782ee1c39b","type":"CommunityPortal.HeadingWidget","variants":[{"identifier":"05f5deee-de32-4ddb-a0d9-0331a7719d5b","properties":{"headingText":"Invisible component in C#","headingLevel":"H3","headingLevelsParsed":2,"headingAlignment":"Left","headingAlignmentsParsed":0,"showHeadingAnchor":true,"id":"2e5a60bc-2ee8-4eb3-a07d-86337be71562"},"fieldIdentifiers":{"headingText":"21267020-b866-41fb-817b-9c7a54b5a82b","headingLevel":"f9723b05-8259-4d63-aa61-97e5fde77ca4","headingLevelsParsed":"069f8df0-5e99-4769-9353-171ed8c51aae","headingAlignment":"20f59551-2aac-44f7-ae27-b0c624d12b99","headingAlignmentsParsed":"6fe69367-ff37-4526-a54f-c60002180bbe","showHeadingAnchor":"6233da02-a4f7-4e8f-b52a-52ad103d7a41","id":"05735117-060f-4059-b8ca-3e28859ac037"}}]},{"identifier":"4386ce8a-d5c5-43f1-93b9-9ddc59aa84ed","type":"CommunityPortal.MarkdownWidget","variants":[{"identifier":"39b6d919-c123-4c11-b45b-a3fb6087ac55","properties":{"markdown":"If you're using C# components in your widget, follow along with this section. If not, move on to [Invisible component in React](https://github.com/kentico-matthews/Custom.XperienceByKentico.VideoEmbedWidget/blob/master/ArticleMarkdown.md#invisible-component-in-react).\n\nUnder the `~/Components` folder in the solution, add a folder called `FormComponents`, then a folder called `InvisibleComponent` within it. This will be the directory for our invisible component.\n\nCreate a new class called `InvisibleProperties` in the `DancingGoat.FormComponents` namespace, extending `FormComponentProperties<bool>`. You'll need using directives for `CMS.DataEngine` and `Kentico.Forms.Web.Mvc`.\n\n```CSharp\nusing CMS.DataEngine;\nusing Kentico.Forms.Web.Mvc;\n\nnamespace DancingGoat.FormComponents;\n\npublic class InvisibleProperties : FormComponentProperties<bool>\n{\n    //...\n}\n```\n\nPassing a bool to the generic type of `FormComponentProperties` allows this editing component to apply to be used on boolean properties.\n\nNext, call the constructor of the base class, specifying the `Boolean` data type for the field.\n\n```CSharp\npublic InvisibleProperties() : base(FieldDataType.Boolean)\n{\n}\n```\n\nOverride the `DefaultValue` and `Label` properties, adjusting the latter so that its get accessor always returns an empty string.\n\n```CSharp\npublic override bool DefaultValue { get; set; }\n\npublic override string Label { get => string.Empty; set => base.Label = value; }\n```\n\nThe finished properties class should look like this.\n\n```CSharp\nusing CMS.DataEngine;\nusing Kentico.Forms.Web.Mvc;\n\nnamespace DancingGoat.FormComponents;\n\npublic class InvisibleProperties : FormComponentProperties<bool>\n{\n    public InvisibleProperties() : base(FieldDataType.Boolean)\n    {\n    }\n\n    public override bool DefaultValue { get; set; }\n    public override string Label { get => string.Empty; set => base.Label = value; }\n}\n```\n\nNext, add a completely blank file called `_Invisible.cshtml` to the same folder.\n\nLastly, add a final file called `InvisibleFormComponent.cs`. Give it the following using directives.\n\n```CSharp\nusing Kentico.Forms.Web.Mvc;\nusing DancingGoat.FormComponents;\n```\n\nUse the namespace `DancingGoat.FormComponents` and have the class inherit from `FormComponent<InvisibleProperties,bool>`. This ensures that the component is applicable to a boolean property, and utilizes the previously defined properties.\n\n```CSharp\nnamespace DancingGoat.FormComponents;\n\npublic class InvisibleFormComponent : FormComponent<InvisibleProperties, bool>\n{\n    //...\n}\n```\n\nAdd constants for the identifier and name of the component.\n\n```CSharp\npublic const string IDENTIFIER = \"Custom.InvisibleComponent\";\npublic const string NAME = \"InvisibleComponent\";\n```\n\nUsing these new constants we can add the `RegisterFormComponent` assembly attribute to register the editing component. Place the attribute above the namespace declaration.\n\n```CSharp\n[assembly: RegisterFormComponent(\n    identifier: InvisibleFormComponent.IDENTIFIER, \n    componentType: typeof(InvisibleFormComponent),\n    name: InvisibleFormComponent.NAME, \n    ViewName = \"~/Components/FormComponents/InvisibleComponent/_Invisible.cshtml\", \n    IsAvailableInFormBuilderEditor = false)]\n```\n\nGetting back to the class, we can add a property to hold the value, and use it to override the required abstract methods `GetValue` and `SetValue`. This allows the component to react to changes in the value of its property, enabling the visibility conditions to work properly.\n\n```CSharp\npublic bool Value { get; set; }\n\npublic override bool GetValue()\n{\n    return Value;\n}\n\npublic override void SetValue(bool value)\n{\n    Value = value;\n}\n```\n\nThe finished component class should look like this.\n\n```CSharp\nnamespace DancingGoat.FormComponents;\n\npublic class InvisibleFormComponent : FormComponent<InvisibleProperties, bool>\n{\n    public const string IDENTIFIER = \"Custom.InvisibleComponent\";\n    public const string NAME = \"InvisibleComponent\";\n\n    public bool Value { get; set; }\n\n    public override bool GetValue()\n    {\n        return Value;\n    }\n\n\n    public override void SetValue(bool value)\n    {\n        Value = value;\n    }\n}\n```\n\n","markdownStyle":"Standard","markdownStyleParsed":0,"markdownCodeLanguage":"","id":"a76ec1df-d1b5-4b49-aff6-967c780a571b"},"fieldIdentifiers":{"markdown":"32b6e829-f474-4e55-81d1-bc225be251d4","markdownStyle":"41521b11-3794-4352-9006-40e16d281e48","markdownStyleParsed":"c123bef2-69ba-42a8-b60e-96d8df67b6f3","markdownCodeLanguage":"24a7f818-8a4a-4bdd-a414-c8755cb500fd","id":"a264c193-14d4-4823-a1fa-2c59fbc87996"}}]},{"identifier":"2dfbe17f-7ae2-472b-a077-04b015161603","type":"CommunityPortal.HeadingWidget","variants":[{"identifier":"39b095d2-d0f5-4bbb-a800-4a62df2ebe6d","properties":{"headingText":"Invisible component in React","headingLevel":"H2","headingLevelsParsed":1,"headingAlignment":"Left","headingAlignmentsParsed":0,"showHeadingAnchor":true,"id":"c8e2e0be-8de5-4443-ac53-79fb43f96bc8"},"fieldIdentifiers":{"headingText":"4567364b-eead-43a2-95e9-cd95ec2dab5e","headingLevel":"112f4863-7c2a-4fe9-a601-f2cf260384a2","headingLevelsParsed":"52121165-d990-4d79-aa4c-75721ffcdc47","headingAlignment":"7173a05d-74c9-441b-a760-bbae34f851f3","headingAlignmentsParsed":"8e6f8dff-f793-45b4-b395-aaae08a9d80b","showHeadingAnchor":"cc5167c4-7f69-4247-aea9-213d58192b82","id":"f5260e27-bd67-4d7c-99d6-ce3405f27a1d"}}]},{"identifier":"41499954-e989-456e-aa1b-43105720afcc","type":"CommunityPortal.MarkdownWidget","variants":[{"identifier":"ddfba020-4495-4273-af73-714b4c9d502c","properties":{"markdown":"If you're using React components in your widget, follow along with this section.\n","markdownStyle":"Standard","markdownStyleParsed":0,"markdownCodeLanguage":"","id":"a7245568-c830-4684-a44b-72a2484b5a1c"},"fieldIdentifiers":{"markdown":"c4f6eef6-f826-492f-98c9-05f2a136ada1","markdownStyle":"9b72745e-1e12-43e4-bb1c-bebffab542de","markdownStyleParsed":"65b80cd2-bcc0-425e-b473-d8ebc161d2ea","markdownCodeLanguage":"cdad160a-2428-42b3-8940-86b6104e49f8","id":"650dc938-10c5-4fda-8f70-ad9094d1b3d7"}}]},{"identifier":"e6f8d2b3-2d49-49da-a55c-e521f7bc90bd","type":"CommunityPortal.HeadingWidget","variants":[{"identifier":"f667a96f-4e89-4f7c-9f47-bc872480ae9a","properties":{"headingText":"Installing and setting up the boilerplate","headingLevel":"H3","headingLevelsParsed":2,"headingAlignment":"Left","headingAlignmentsParsed":0,"showHeadingAnchor":true,"id":"58c2beaa-b093-43d6-810c-c603a034f301"},"fieldIdentifiers":{"headingText":"c0c4ec06-a738-400c-8b40-1617691f5856","headingLevel":"378dae3f-d493-4ce2-b9c7-1ee9f8b6af46","headingLevelsParsed":"2d18feca-9731-415e-bf8e-89ee20cc61cc","headingAlignment":"2b3f94bc-71a2-4ac1-821f-688804bfcb24","headingAlignmentsParsed":"f94b5979-c232-41b3-a2fa-e3acf138311c","showHeadingAnchor":"e4a7d7a0-3a72-4746-a680-1e47c19d48de","id":"55a4f508-368c-46a4-9562-1f4b8d0ed697"}}]},{"identifier":"d544ee13-d611-47ee-93e7-c2615d9153d9","type":"CommunityPortal.MarkdownWidget","variants":[{"identifier":"95eed444-81ea-4d4a-8c61-a003b4d77dd6","properties":{"markdown":"To start out in React, download the admin customization boilerplate as described [in the documentation](https://docs.xperience.io/xp/developers-and-admins/customization/extend-the-administration-interface/prepare-your-environment-for-admin-development#Prepareyourenvironmentforadmindevelopment-Clientdevelopmentboilerplate) with the name `DancingGoat.WebAdmin`.\n\nDon't forget to add a reference from your Dancing Goat solution to this new admin project.\n\n```Shell\ndotnet add reference <the relative path from your main project's root to your custom admin csproj>\n```\n\nThen, set the `CMSAdminClientModuleSettings` mode for the boilerplate in the Dancing Goat site's `appsettings.json` file.\n\n```JSON\n\"CMSAdminClientModuleSettings\": {\n    \"dancinggoat-web-admin\": {\n        \"Mode\": \"\"\n    }\n}\n```\n\nOptionally, open the boilerplate project, and delete the `~/UIPages` folder, as well as the `~/Client/src/custom-layout/CustomLayoutTemplate.tsx` file. Then, open `~/Client/src/entry.tsx` and delete the following line:\n\n```TypeScript\nexport * from './custom-layout/CustomLayoutTemplate';\n```\n\nThis will get rid of sample customizations for the UI which are not relevant to this article.\n\nTo complete the setup, follow the steps outlined [in the documentation](https://docs.xperience.io/xp/developers-and-admins/customization/extend-the-administration-interface/prepare-your-environment-for-admin-development#Prepareyourenvironmentforadmindevelopment-Renametheboilerplateproject) to rename the organization from `acme` to `dancinggoat`.\n","markdownStyle":"Standard","markdownStyleParsed":0,"markdownCodeLanguage":"","id":"740f8413-d650-462d-be25-104c4cbe1581"},"fieldIdentifiers":{"markdown":"247f9e73-ad29-4eb3-b27c-c6ed2154952f","markdownStyle":"26197fd7-fb7f-417f-9d8d-b89327220a6f","markdownStyleParsed":"f5e51de7-4c78-4d07-8b49-f1691dc38087","markdownCodeLanguage":"cf02d462-dd58-49e1-b0cf-836847feb654","id":"f39538a0-bf66-425d-9910-ac0d063338bd"}}]},{"identifier":"0ad9670c-6bce-421e-af0e-c3cf1d393f1e","type":"CommunityPortal.HeadingWidget","variants":[{"identifier":"48c568c2-2c65-4bd0-983b-1ad46a41a37d","properties":{"headingText":"Creating the form component","headingLevel":"H3","headingLevelsParsed":2,"headingAlignment":"Left","headingAlignmentsParsed":0,"showHeadingAnchor":true,"id":"c74fc403-a68e-4668-9d43-c5e1e25d025f"},"fieldIdentifiers":{"headingText":"7ebe583d-d641-4109-8e34-44333832fee6","headingLevel":"eb1620bd-aa4f-4033-9c82-5ad4dd5374be","headingLevelsParsed":"b33a2270-7a54-4d01-8afe-c70933576402","headingAlignment":"c4873592-288c-4171-9d54-2004f2ca0087","headingAlignmentsParsed":"f024ad8e-501c-489f-9dbe-78a71ff1da18","showHeadingAnchor":"3f65a7dd-8dff-4b35-b4d1-3bd4d5b6d5bb","id":"05c997eb-1a23-4c2e-a9b2-e9d863a2c8f8"}}]},{"identifier":"e70953be-797d-4635-8f30-67e9430bbd62","type":"CommunityPortal.MarkdownWidget","variants":[{"identifier":"3c7b7604-ba0b-4468-ad85-b934a0d17923","properties":{"markdown":"Next, create a folder called `invisible-form-component` in the `~/Client` directory, and add a file called `InvisibleFormComponent.tsx`\n\nThis will be our front-end file for the invisible form component, used by the administration UI. Because the whole point of our form component is to display nothing, it will be even simpler than the [example](https://docs.xperience.io/xp/developers-and-admins/customization/extend-the-administration-interface/ui-form-components#UIformcomponents-Formcomponentfrontend) provided by the documentation.\n\nUnlike the documentation's example, we don't need to import react or the default form component properties. We aren't actually using the properties, or any react functionality. Simply export `InvisibleFormComponent` to return nothing.\n\n```TypeScript\nexport const InvisibleFormComponent = () => {\n    return;\n};\n```\n\nNow, switch back to the `entry.tsx` file and export everything from this file.\n\n```TypeScript\nexport * from './invisible-form-component/InvisibleFormComponent';\n```\n\nNext, we can create the C# files that this control needs.\n\nAdd a folder called `FormComponents` to the root of the project, and a folder called `InvisibleComponent` inside of it.\n\nAdd a new C# file called `InvisibleClientProperties.cs`. This class represents the properties passed to the administration application when it renders the react component.\n\nAdd a using directive for `Kentico.Xperience.Admin.Base.Forms`; and set the namespace to `DancingGoat.FormComponents`.\n\n```CSharp\nusing Kentico.Xperience.Admin.Base.Forms;\n\nnamespace DancingGoat.FormComponents\n```\n\nMake the class inherit from `FormComponentClientProperties<bool>`. This uses the bool type so that we can assign the component to a boolean property, which will work most easily with visibility conditions.\n\nSince the component doesn't display anything, we can leave the class empty, with a final result like this.\n\n```CSharp\nusing Kentico.Xperience.Admin.Base.Forms;\n\nnamespace DancingGoat.FormComponents;\n\npublic class InvisibleClientProperties : FormComponentClientProperties<bool>\n{\n}\n```\n\nNext, add a similar class called `InvisibleProperties.cs`, which represents the configuration of the component. Again, since this component renders nothing, the class can be empty.\n\n```CSharp\nusing Kentico.Xperience.Admin.Base.Forms;\n\nnamespace DancingGoat.FormComponents;\n\npublic class InvisibleProperties : FormComponentProperties\n{\n}\n```\n\nNext, let's add an attribute class, which will allow us to use an attribute to assign the component to our widget property. This class doesn't need to contain anything-- it will only be used to map any widget properties that use it to the proper form component class.\n\nUse the same namespace as the previous two files, and have it inherit from the `FormComponentAttribute` class.\n\n```CSharp\nusing Kentico.Xperience.Admin.Base.FormAnnotations;\nnamespace DancingGoat.FormComponents;\n\npublic class InvisibleComponentAttribute : FormComponentAttribute\n{\n}\n```\n\nFinally, we can tie all of these together with the component class. Create a new file, `InvisibleFormComponent.cs`.\n\nAdd using directives for `DancingGoat.FormComponents` and `Kentico.Xperience.Admin.Base.Forms`, and place the class in the `DancingGoat.FormComponents` namespace.\n\n```CSharp\nusing DancingGoat.FormComponents;\nusing Kentico.Xperience.Admin.Base.Forms;\n\nnamespace DancingGoat.FormComponents;\n// ...\n```\n\nMake the InvisibleFormComponent class inherit from `FormComponent<InvisibleProperties,InvisibleClientProperties,bool>`. This connects the class with the properties and client properties, and specifies that it should be used on a boolean property.\n\nDefine `IDENTIFIER` and `NAME` constants for the class, and point the `ClientComponentName` property to the front-end we defined previously. (Note that the app will automatically add `FormComponent` to the end of the name passed here.)\n\n```TypeScript\npublic const string IDENTIFIER = \"Custom.InvisibleComponent\";\npublic const string NAME = \"InvisibleComponent\";\n\npublic override string ClientComponentName => \"@dancinggoat/web-admin/Invisible\";\n```\n\nNext, use the `ComponentAttributeAttribute` to map `InvisibleComponentAttribute` to this class.\n\n```CSharp\n[ComponentAttribute(typeof(InvisibleComponentAttribute))]\n```\n\nFinally, use the `RegisterFormComponent` assembly attribute to register the form component.\n\n```CSharp\n[assembly: RegisterFormComponent(\n    identifier: InvisibleFormComponent.IDENTIFIER,\n    componentType: typeof(InvisibleFormComponent), \n    name: InvisibleFormComponent.NAME)]\n```\n\nAltogether, the class should look like this:\n\n```CSharp\nusing DancingGoat.FormComponents;\nusing Kentico.Xperience.Admin.Base.Forms;\n\n[assembly: RegisterFormComponent(\n    identifier: InvisibleFormComponent.IDENTIFIER,\n    componentType: typeof(InvisibleFormComponent),\n    name: InvisibleFormComponent.NAME)]\n\nnamespace DancingGoat.FormComponents;\n\n[ComponentAttribute(typeof(InvisibleComponentAttribute))]\npublic class InvisibleFormComponent : FormComponent<InvisibleProperties, InvisibleClientProperties, bool>\n{\n    public const string IDENTIFIER = \"Custom.InvisibleComponent\";\n    public const string NAME = \"InvisibleComponent\";\n\n    public override string ClientComponentName => \"@dancinggoat/web-admin/Invisible\";\n}\n```\n\n","markdownStyle":"Standard","markdownStyleParsed":0,"markdownCodeLanguage":"","id":"3fcd5e92-2c03-45b0-a7a9-718e58ea0856"},"fieldIdentifiers":{"markdown":"840ef96b-780c-4a34-ae3e-b1eb1766db6d","markdownStyle":"e5ed6bfd-c422-4fa6-8e5d-d627ca059d85","markdownStyleParsed":"4248bcf3-14d3-472a-8868-cb80b9621c30","markdownCodeLanguage":"24cc425d-e441-44da-8145-15e5d0e602e0","id":"7fbded84-fe37-47e8-b85b-6de3931924bb"}}]},{"identifier":"c1453564-a48d-43a8-8db5-f7f2e205e2f7","type":"CommunityPortal.HeadingWidget","variants":[{"identifier":"af99da4f-2db3-46ff-bcbb-dda2df488dc5","properties":{"headingText":"Building the project","headingLevel":"H3","headingLevelsParsed":2,"headingAlignment":"Left","headingAlignmentsParsed":0,"showHeadingAnchor":true,"id":"10edbdcd-91ba-4b96-bc38-0883cebde6cc"},"fieldIdentifiers":{"headingText":"b9c8df67-f734-40c6-85ff-6cc1ae443e16","headingLevel":"092fcb73-439d-44b2-9779-664f93a73a66","headingLevelsParsed":"a9178ddc-53c6-46ac-a312-24bb2b76fac7","headingAlignment":"cd327c30-50d7-4b3b-a725-f07749939f91","headingAlignmentsParsed":"cd1e94de-1f2e-4af2-873c-1ec900223ccb","showHeadingAnchor":"3539192d-fc05-4d8e-8eff-c61e7c404473","id":"6a6e3077-f52a-4c69-8660-96df9141bad2"}}]},{"identifier":"3fd16a0b-364f-43e3-86f2-c285837011a3","type":"CommunityPortal.MarkdownWidget","variants":[{"identifier":"28439555-ffa3-4fe2-8e0e-02c634f8fa3d","properties":{"markdown":"Now build the C# portion of the project through visual studio, and build the `~/Client` app through the command line with the command `npm run build`. Thanks to the boilerplate's use of [Babel](https://babeljs.io/docs/), this will automatically transpile our typescript files to work in browsers.\n\nDepending on whether your future changes involve client files, C# files, or both, you will need to determine which of these build options to use.\n\nThen, go back to the Dancing Goat Xperience project and `clean` and `build` the solution.\n","markdownStyle":"Standard","markdownStyleParsed":0,"markdownCodeLanguage":"","id":"ba55dbb8-fb2f-4f53-849a-5ec860756d97"},"fieldIdentifiers":{"markdown":"c6c0020c-1716-4cbf-9727-cb6114b7c7b1","markdownStyle":"b8b419ef-24dd-461b-b29a-5ba158d1ea8d","markdownStyleParsed":"31d72828-4e7c-47a8-a88b-a9587abb7f8b","markdownCodeLanguage":"3370cd7d-24b4-42f3-8afb-7107494109b1","id":"dfeaa6da-ec92-42dd-af38-c20503406bee"}}]},{"identifier":"e3294ae2-9fe3-4cb3-8db8-af00b6866dc0","type":"CommunityPortal.HeadingWidget","variants":[{"identifier":"c8488b94-2ff8-4f27-9b2f-7a956707b114","properties":{"headingText":"Using the editing component on properties","headingLevel":"H3","headingLevelsParsed":2,"headingAlignment":"Left","headingAlignmentsParsed":0,"showHeadingAnchor":true,"id":"081c6009-3c1f-4631-b4c1-111eab616c7a"},"fieldIdentifiers":{"headingText":"ad6f6ef1-7b84-4b5e-b177-5f4d98bec7a0","headingLevel":"d632bcfa-26c0-47bd-ae7b-9e362b0f3401","headingLevelsParsed":"153035ab-8d2a-4ae6-8458-1fa5f9ba059c","headingAlignment":"b18204a0-8243-4f28-9a10-f4c1192c784d","headingAlignmentsParsed":"5a494129-188a-429f-a0cb-0e910ee85e61","showHeadingAnchor":"e18de79c-2f68-4a4d-8f2a-0f941cf861cc","id":"7ab650ee-2854-416e-8b7a-1156167d6c2f"}}]},{"identifier":"1e6f0ff5-ca13-415d-ab4f-5649db0fbae4","type":"CommunityPortal.MarkdownWidget","variants":[{"identifier":"62603021-7445-4fae-8429-9c4108eae643","properties":{"markdown":"With this form component in place, we can use it in the properties of our widget. Return to the `VideoEmbedWidgetProperties.cs` file.\n\nLet's create a new public bool property called `ShowDimensions`. Since we're going to be putting custom functionality in the accessors, it will need an associated private variable. Create a private `bool` variable called `_showDimensions`.\n\n```CSharp\nprivate bool _showDimensions;\n\npublic bool ShowDimensions { get; set; }\n```\n\nNow we can update the `get` accessor to return true when the dimensions should be displayed.\n\nAs discussed earlier, the dimensions should display when the service is youtube, or when `DynamicSize` is disabled, so the the following boolean expression `Service == YOUTUBE || !DynamicSize;` should be sufficient for this case, though the logic here can be as complex as necessary.\n\nAdd the boolean expression to the getter through an expression body definition.\n\n```CSharp\nget => Service == YOUTUBE || !DynamicSize;\n```\n\nNow that we've set the `get` accessor in this way, the compiler will expect the same to be done for the set accessor. We can simply set the private variable to the provided value, even though this value will never be used.\n\n```CSharp\nset => _showDimensions = value;\n```\n\nNow we can assign our invisible component to the property. If you made the React component, use the `InvisibleComponentAttribute` that we created earlier. If you made the C# component instead, use the typical `EditingComponentAttribute`.\n\nIn either case, Set the order to 0 so that it comes before the fields that depend on it.\n\n```CSharp\n[InvisibleComponent(Order = 0)]\n```\n\nNow that this special property is in place, we can add visibility conditions depending on it to the `Width` and `Height` properties.\n\n```CSharp\n[NumberInputComponent(Label = \"Width (px)\", Order = 4)]\n[VisibleIfTrue(nameof(ShowDimensions))]\npublic int Width { get; set; } = 560;\n\n[NumberInputComponent(Label = \"Height (px)\", Order = 5)]\n[VisibleIfTrue(nameof(ShowDimensions))]\npublic int Height { get; set; } = 315;\n```\n\nIf you run the site now, you may notice a problem-- toggling the checkbox for the `DynamicSize` property in the UI does not seem to make a difference. Currently, the dialog is not listening to changes to this control, because no other properties reference `DynamicSize` through a normal visibility condition.\n\nLet's use the invisible form component on another property, and make it depend on the `DynamicSize` property, to ensure that the value of `ShowDimensions` is re-evaluated when it changes.\n\nWe can call it `DummyProperty`, and set its order to a very high number so that it logically comes after any properties it depends on.\n\n```CSharp\n[InvisibleComponent(Order = 999)]\n[VisibleIfFalse(nameof(DynamicSize))]\npublic bool DummyProperty { get; set; }\n```\n\nNow, `ShowDimensions` should be evaluated, and thus show and hide the `Width` and `Height` properties, whenever the `DynamicSize` checkbox value changes.\n\nIn the end, with added summary comments, the properties class should look like this.\n\n```CSharp\nusing Kentico.Forms.Web.Mvc;\nusing Kentico.PageBuilder.Web.Mvc;\nusing Kentico.Xperience.Admin.Base.FormAnnotations;\nusing DancingGoat.FormComponents;\n\nnamespace DancingGoat.Widgets;\n\npublic class VideoEmbedWidgetProperties : IWidgetProperties\n{\n    public const string YOUTUBE = \"youtube\";\n    public const string VIMEO = \"vimeo\";\n    public const string DAILYMOTION = \"dailymotion\";\n    public const string FILE = \"file\";\n\n    private bool _showDimensions;\n\n    /// <summary>\n    /// Holds a complex boolean expression used in determining other fields' visibility.\n    /// </summary>\n    [InvisibleComponent(Order = 0)]\n    public bool ShowDimensions\n    {\n        get => Service == YOUTUBE || !DynamicSize;\n        set => _showDimensions = value;\n    }\n\n    /// <summary>\n    /// Defines the video platform from which the embedded video originates.\n    /// </summary>\n    [RadioGroupComponent(Label = \"Video service\", Inline = true, Order = 1, Options = YOUTUBE + \";YouTube\\r\\n\" + VIMEO + \";Vimeo\\r\\n\" + DAILYMOTION + \";Dailymotion\\r\\n\" + FILE + \";File URL\\r\\n\")]\n    public string Service { get; set; } = YOUTUBE;\n\n    /// <summary>\n    /// Defines the URL of the embedded video.\n    /// </summary>\n    [TextInputComponent(Label = \"Url\", Order = 2)]\n    public string Url { get; set; }\n\n    /// <summary>\n    /// Determines whether the video should be sized dynamically or with explicit dimensions.\n    /// </summary>\n    [CheckBoxComponent(Label = \"Size dynamically\", Order = 3)]\n    [VisibleIfNotEqualTo(nameof(Service), YOUTUBE)]\n    public bool DynamicSize { get; set; } = true;\n\n    /// <summary>\n    /// Determines the width of the embed.\n    /// </summary>\n    [NumberInputComponent(Label = \"Width (px)\", Order = 4)]\n    [VisibleIfTrue(nameof(ShowDimensions))]\n    public int Width { get; set; } = 560;\n\n    /// <summary>\n    /// Determines the height of the embed.\n    /// </summary>\n    [NumberInputComponent(Label = \"Height (px)\", Order = 5)]\n    [VisibleIfTrue(nameof(ShowDimensions))]\n    public int Height { get; set; } = 315;\n\n    /// <summary>\n    /// Defines the time to start the player at.\n    /// </summary>        \n    [CheckBoxComponent(Label = \"Play from beginning\", Order = 6)]\n    [VisibleIfNotEqualTo(nameof(Service), DAILYMOTION)]\n    public bool PlayFromBeginning { get; set; } = true;\n\n    /// <summary>\n    /// Determines whether the video will start at the beginning, or at a specified timestamp.\n    /// </summary>\n    [NumberInputComponent(Label = \"Starting time (seconds)\", Order = 7)]\n    [VisibleIfFalse(nameof(PlayFromBeginning))]\n    [VisibleIfNotEqualTo(nameof(Service), DAILYMOTION)]\n    public int StartingTime { get; set; } = 0;\n\n    /// <summary>\n    /// Makes sure all necessary properties used in ShowDimensions are listened to.\n    /// </summary>\n    [InvisibleComponent(Order = 999)]\n    [VisibleIfFalse(nameof(DynamicSize))]\n    public bool DummyProperty { get; set; }\n}\n```\n\n","markdownStyle":"Standard","markdownStyleParsed":0,"markdownCodeLanguage":"","id":"79963662-d35f-4dfd-8419-ff3a1c6da87c"},"fieldIdentifiers":{"markdown":"553cf274-484a-4121-8f68-3e768598ce19","markdownStyle":"2b41820d-969d-4467-9d8f-2d30bb04ed5d","markdownStyleParsed":"7da81b7d-35e2-414c-a785-c467113e44f4","markdownCodeLanguage":"69fe2403-b7cc-4e85-b6cc-1f303b17f886","id":"c8ec571f-66a5-4be3-b0f3-a1c5136448b7"}}]},{"identifier":"6f7deeb5-0873-4059-b7bc-904fe4f392c3","type":"CommunityPortal.HeadingWidget","variants":[{"identifier":"a28bf2a4-cf73-48b4-b4a3-4fd51495a3f8","properties":{"headingText":"Conclusion","headingLevel":"H2","headingLevelsParsed":1,"headingAlignment":"Left","headingAlignmentsParsed":0,"showHeadingAnchor":true,"id":"123561fb-bc4a-4b2c-8367-db0743229853"},"fieldIdentifiers":{"headingText":"876bf150-5162-4265-ab96-9bde5d57d441","headingLevel":"b87f3cfe-4e2a-422e-814f-6cf4e8f13a87","headingLevelsParsed":"fdbb0529-ece0-4bda-ad5b-036f5b2a75e0","headingAlignment":"85bea02b-b98f-4ac0-a5cd-2482aca21b6c","headingAlignmentsParsed":"a4458b37-baa2-4d98-96bf-f78ad6bb9b0d","showHeadingAnchor":"bcd55ae1-0ea6-44f1-b354-2262554d5599","id":"aad1a0df-2302-4e7d-8aa5-c222a7353665"}}]},{"identifier":"5ea3ae26-4598-4e78-9630-bd17785cb789","type":"CommunityPortal.MarkdownWidget","variants":[{"identifier":"fd88610a-f947-4dd3-9727-16a787f80175","properties":{"markdown":"Now you should have a functioning video embed widget. Feel free to modify the code and add more styles and features. You can find [a repository on GitHub](https://github.com/kentico-matthews/Custom.XperienceByKentico.VideoEmbedWidget) with the code of the widget and component. The main branch uses react components for the widget properties, while the `CSharpComponents` branch uses C# components.\n","markdownStyle":"Standard","markdownStyleParsed":0,"markdownCodeLanguage":"","id":"b67966e2-ee0e-42e4-b688-27669d67974a"},"fieldIdentifiers":{"markdown":"4cd389f3-4d01-441c-bd04-853e048000bd","markdownStyle":"4abec69b-bbda-4a84-8080-37632cec7e98","markdownStyleParsed":"ecdb9b26-17d6-4fb2-8785-c2227bc82945","markdownCodeLanguage":"dc362771-3e7c-4721-b153-246acca3273c","id":"253a5af7-23bd-4dbc-b163-cd102864edf0"}}]}]}],"fieldIdentifiers":{"layout":"9e371f33-9ec3-4971-b643-f159688380d5","layoutParsed":"c5cea2eb-5681-447a-a899-f224a0a566c9","paddingTop":"674461ab-7172-4cf7-be27-2e9a24f9d9f4","paddingTopParsed":"5fd13160-38e6-430f-903d-761fd2f218ee","paddingBottom":"3430c5f7-ba01-41d1-a546-b653871b255d","paddingBottomParsed":"5a6725c1-1f7f-4064-bf4e-1074b1eab3c5","backgroundColor":"7f7cafaa-cfbf-4b2c-84c6-2d20bab19158","backgroundColorParsed":"ea69405b-1ab7-4674-bb30-1702bc457073"}}]}]}]]>
  </ContentItemCommonDataVisualBuilderWidgets>
  <CoreTaxonomyDXTopics>
    <![CDATA[[{"Identifier":"aa57c06d-5738-4fdb-ab10-08b42fc6c9c2"},{"Identifier":"79fe8557-f24c-4fd9-ba03-3be795855e15"},{"Identifier":"378366be-601d-42b0-a719-5daee7392fb9"},{"Identifier":"b1318d81-f9d8-4cec-9590-23d622daf9d6"},{"Identifier":"e7e52666-98dc-42bf-8c66-e47abe81cf08"},{"Identifier":"e147865c-dab2-48e1-84d3-e28731ccda54"}]]]>
  </CoreTaxonomyDXTopics>
  <WebPageCanonicalURL />
  <WebPageMetaExcludeFromSitemap>False</WebPageMetaExcludeFromSitemap>
  <WebPageMetaRobots />
  <WebPageMetaShortDescription>
    <![CDATA[A walkthrough for adding a video embed widget to the Dancing Goat sample site, which demonstrates the use of multiple visibility conditions.]]>
  </WebPageMetaShortDescription>
  <WebPageMetaTitle>
    <![CDATA[Creating a video embed widget with visibility conditions]]>
  </WebPageMetaTitle>
  <ContentItemReferences>
    <cms.contentitemreference>
      <ContentItemReferenceGroupGUID>baef8e96-a792-478c-a9dc-1929378ccbac</ContentItemReferenceGroupGUID>
      <ContentItemReferenceGUID>371d02d6-85b6-4822-8263-1e4604584b70</ContentItemReferenceGUID>
      <ContentItemReferenceSourceCommonDataID>
        <GUID>08df82e9-bdc9-4961-90d9-5ac79575c0c9</GUID>
        <ObjectType>cms.contentitemcommondata</ObjectType>
      </ContentItemReferenceSourceCommonDataID>
      <ContentItemReferenceTargetItemID>
        <CodeName>MatthewSandstrom-knu7unn1</CodeName>
        <GUID>058f60dc-c9ff-4416-b856-ddc6005ccb21</GUID>
        <ObjectType>cms.contentitem</ObjectType>
      </ContentItemReferenceTargetItemID>
    </cms.contentitemreference>
    <cms.contentitemreference>
      <ContentItemReferenceGroupGUID>9a93d64c-5cc7-47f0-94e8-f7b3cc48946e</ContentItemReferenceGroupGUID>
      <ContentItemReferenceGUID>26df6802-d32b-40c9-8007-90eae8d76eba</ContentItemReferenceGUID>
      <ContentItemReferenceSourceCommonDataID>
        <GUID>08df82e9-bdc9-4961-90d9-5ac79575c0c9</GUID>
        <ObjectType>cms.contentitemcommondata</ObjectType>
      </ContentItemReferenceSourceCommonDataID>
      <ContentItemReferenceTargetItemID>
        <CodeName>CreatingAVideoEmbedWidgetWithVisibilityConditions-0qiejc7n-localtest</CodeName>
        <GUID>39f8842c-b86a-4b18-a31c-514095b72970</GUID>
        <ObjectType>cms.contentitem</ObjectType>
      </ContentItemReferenceTargetItemID>
    </cms.contentitemreference>
  </ContentItemReferences>
</cms.contentitemcommondata>