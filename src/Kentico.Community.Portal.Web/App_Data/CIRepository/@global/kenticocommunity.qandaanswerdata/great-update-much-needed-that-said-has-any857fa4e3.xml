<?xml version="1.0" encoding="utf-8"?>
<kenticocommunity.qandaanswerdata>
  <QAndAAnswerDataAuthorMemberID>
    <GUID>8fb0dad6-8c28-43e4-849b-684df65417a7</GUID>
    <ObjectType>cms.member</ObjectType>
  </QAndAAnswerDataAuthorMemberID>
  <QAndAAnswerDataCodeName>Great-update-much-needed-That-said-has-any857fa4e3</QAndAAnswerDataCodeName>
  <QAndAAnswerDataContent><![CDATA[
Great update, much needed.

That said, has anyone gotten the `IContentQueryExecutor.GetMappedWebPageResult<>` stuff to work? After regenerating the Kentico autogen page type models, which have the new `[RegisterContentTypeMapping]` attribute, Kentico complains that it cannot find a type registered to the code name of queried pages.  

Of these, only the explicit mapping works, and Dancing Goat doesn't have an example of `GetMappedWebPageResult<>()`, so I'm wondering if there's some undocumented setup requirement or something else I've missed?

    ContentItemQueryBuilder builder = new ContentItemQueryBuilder()
    	.ForContentTypes( config =>
    	{
    		config.OfContentType( PageContentTypes.Card.CONTENT_TYPE_NAME );
    		config.WithContentTypeFields();
    	} );
    
    var mapped = await queryExecutor.GetWebPageResult( builder, kenticoMapper.Map<T>, cancellationToken: cancellationToken );
    //Doesn't work: var mapped = await queryExecutor.GetMappedWebPageResult<PageContentTypes.Card>( builder, cancellationToken: cancellationToken );
    //Doesn't work: var mapped = await queryExecutor.GetMappedWebPageResult<IWebPageContentQueryDataContainer>( builder, cancellationToken: cancellationToken );
	//Doesn't work: var mapped = await queryExecutor.GetMappedWebPageResult<IContentItemFieldsSource>( builder, cancellationToken: cancellationToken );

    

Error:
    ArgumentException: Type for content type name 'Xxxx.Card' is not found.
    CMS.ContentEngine.ContentTypeMappingRegister.Get(string contentTypeName)
    CMS.ContentEngine.ContentQueryModelTypeMapper.CMS.ContentEngine.IContentQueryModelTypeMapper.Map<TModel>(IContentQueryDataContainer dataContainer)
    CMS.ContentEngine.ContentQueryExecutor.Map<TModel>(IContentQueryDataContainer dataContainer)
    CMS.Websites.ContentQueryExecutorExtensions+<>c__DisplayClass3_0<TModel>.<GetMappedWebPageResult>g__ResultSelector|0(IWebPageContentQueryDataContainer dataContainer)
    CMS.Websites.ContentQueryExecutorExtensions+<>c__DisplayClass0_0<TModel>.<GetWebPageResult>b__0(IContentQueryDataContainer contentQueryDataContainer)
    CMS.ContentEngine.ContentQueryExecutor.GetResultInternal<TModel>(ContentItemQueryBuilder builder, Func<IContentQueryDataContainer, TModel> resultSelector, ContentQueryExecutionOptions options, CancellationToken cancellationToken)
    Xxxx.Kentico.Infrastructure.Services.ContentService.GetFromContainer<T>(Guid containerGuid, IRequestContext context, CancellationToken cancellationToken) in ContentService.cs
    +
    		var mapped = await queryExecutor.GetMappedWebPageResult<IContentItemFieldsSource>( builder, cancellationToken: cancellationToken );
]]></QAndAAnswerDataContent>
  <QAndAAnswerDataDateCreated>2024-03-23 21:55:51Z</QAndAAnswerDataDateCreated>
  <QAndAAnswerDataGUID>2a833c32-9345-4814-a047-5c8f3a189826</QAndAAnswerDataGUID>
  <QAndAAnswerDataQuestionWebPageItemID>
    <CodeName>Blog-Discussion-Xperience-by-Kentico-Refr-960adf96</CodeName>
    <GUID>6aa278c0-f9e0-43e2-9f67-c0d3d632e5ba</GUID>
    <ObjectType>cms.webpageitem</ObjectType>
  </QAndAAnswerDataQuestionWebPageItemID>
  <QAndAAnswerDataWebsiteChannelID>
    <GUID>9ca57e0f-969f-43be-91d3-6c45659316bd</GUID>
    <ObjectType>cms.websitechannel</ObjectType>
    <Parent>
      <CodeName>devnet</CodeName>
      <GUID>4f636110-fd4a-4905-83e6-998752c2b2c2</GUID>
      <ObjectType>cms.channel</ObjectType>
    </Parent>
  </QAndAAnswerDataWebsiteChannelID>
</kenticocommunity.qandaanswerdata>