<?xml version="1.0" encoding="utf-8"?>
<kenticocommunity.qandaanswerdata>
  <QAndAAnswerDataAuthorMemberID>
    <GUID>7577a98f-036d-454e-8e19-5ff0881e6fc7</GUID>
    <ObjectType>cms.member</ObjectType>
  </QAndAAnswerDataAuthorMemberID>
  <QAndAAnswerDataCodeName>-nele-debrouwer-Hm-I-m-guessing-you-are-accf2581be</QAndAAnswerDataCodeName>
  <QAndAAnswerDataContent><![CDATA[
@nele.debrouwer

Hm, I'm guessing you are accessing the administration through one of the website channel domains?

If so, don't do this 😉.

The administration _is not_ a website channel. It should be accessed by a non-channel domain that is only used for the administration.

If you look at the [Community Portal project](https://github.com/Kentico/community-portal/blob/v28.4.2.2/README.md#site-info) you can see we have this separation in the local environment. The Community Portal is deployed to SaaS which _enforces_ this separation.

Here's an example of the system domains in the SaaS environment (which are used to access the administration UI):

![System domains list in SaaS](/getmedia/d02e0a1c-4744-4cdc-b3dd-54b0fc96775e/saas-system-domains.webp)

You can also see the error that is displayed if you try to access a website channel from the system (administration) domain:

![Website channel access of administration domain](/getmedia/fa61b5e8-cf58-4b43-a1af-e439bef268e8/saas-system-domain-website-channel.webp)

---

## Update #1

I just realized the use-case I was testing for this solution didn't match your use-case. So, in addition to my example solutions and my guidance above (which still applies), I also acknowledge we have a gap in the product right now.

You can't use `IWebsiteChannelContext` or `IPageBuilderDataContextRetriever` in Page Builder UI Form Components or related types (visibility conditions, custom options providers).

We have some _internal_ services to access this context, but they aren't available for you to use. We'll look at exposing this information in the future.

In the meantime, here's a ... "workaround" that you can use 😁:

```csharp
public interface IPageBuilderUtilityContextRetriever
{
    Task<PageBuilderUtilityContext> Retrieve();
}

public record PageBuilderUtilityContext(
	string WebsiteChannelName, 
	int WebsiteChannelID, 
	IWebPageFieldsSource Webpage);

public class PageBuilderUtilityContextRetriever(
    IHttpContextAccessor contextAccessor,
    IInfoProvider<ChannelInfo> channelInfoProvider,
    IContentQueryExecutor queryExecutor) 
	: IPageBuilderUtilityContextRetriever
{
    private readonly IHttpContextAccessor contextAccessor = contextAccessor;
    private readonly IInfoProvider<ChannelInfo> channelInfoProvider = channelInfoProvider;
    private readonly IContentQueryExecutor queryExecutor = queryExecutor;

    private PageBuilderUtilityContext? context = null;

    public async Task<PageBuilderUtilityContext> Retrieve()
    {
        if (context is not null)
        {
            return context;
        }

        int websiteChannelID = 0;
        int webPageID = 0;

        var httpContext = contextAccessor.HttpContext;

        string path = httpContext.Request.Form["path"].FirstOrDefault() ?? "";
        string pattern = @"webpages-(\d+)/([^_/]+)_(\d+)";
        var match = Regex.Match(path, pattern);
        if (match.Success)
        {
            websiteChannelID = int.TryParse(match.Groups[1].Value, out int channelID) ? channelID : 0;
            webPageID = int.TryParse(match.Groups[3].Value, out int pageID) ? pageID : 0;
        }

        var channels = await channelInfoProvider.Get()
            .Source(s => s.Join<WebsiteChannelInfo>(nameof(ChannelInfo.ChannelID), nameof(WebsiteChannelInfo.WebsiteChannelChannelID)))
            .Where(w => w.WhereEquals(nameof(WebsiteChannelInfo.WebsiteChannelID), websiteChannelID))
            .Columns(nameof(ChannelInfo.ChannelName))
            .GetEnumerableTypedResultAsync();

        string websiteChannelName = channels
            .Select(s => s.ChannelName)
            .FirstOrDefault() ?? "";

        var query = new ContentItemQueryBuilder()
            .ForContentTypes(q => q.ForWebsite([webPageID], false));

        var pages = await queryExecutor.GetMappedWebPageResult<IWebPageFieldsSource>(query);

        var webPage = pages.FirstOrDefault();

        context = new(websiteChannelName, websiteChannelID, webPage);

        return context;
    }
}
```

Register this service with DI:

```csharp
services.AddScoped<
	IPageBuilderUtilityContextRetriever, 
	PageBuilderUtilityContextRetriever>();
```

And then inject into your visibility condition class constructor.

You'll probably want to add better guards in the `Retrieve()` method or maybe convert it to `TryRetrieve()` in case the context can't be retrieved.
]]></QAndAAnswerDataContent>
  <QAndAAnswerDataDateCreated>2024-04-16 16:07:53Z</QAndAAnswerDataDateCreated>
  <QAndAAnswerDataGUID>632354ab-ca4b-4fd2-bd7f-91379ca98e8a</QAndAAnswerDataGUID>
  <QAndAAnswerDataQuestionWebPageItemID>
    <CodeName>Can-I-have-different-Section-properties-b-8e152458</CodeName>
    <GUID>ae20e51b-de41-42ae-8f3a-8e8d21e83b6a</GUID>
    <ObjectType>cms.webpageitem</ObjectType>
  </QAndAAnswerDataQuestionWebPageItemID>
  <QAndAAnswerDataWebsiteChannelID>
    <GUID>9ca57e0f-969f-43be-91d3-6c45659316bd</GUID>
    <ObjectType>cms.websitechannel</ObjectType>
    <Parent>
      <CodeName>devnet</CodeName>
      <GUID>4f636110-fd4a-4905-83e6-998752c2b2c2</GUID>
      <ObjectType>cms.channel</ObjectType>
    </Parent>
  </QAndAAnswerDataWebsiteChannelID>
</kenticocommunity.qandaanswerdata>