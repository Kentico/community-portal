<?xml version="1.0" encoding="utf-8"?>
<kenticocommunity.qandaanswerdata>
  <QAndAAnswerDataAuthorMemberID>
    <GUID>f69d9d84-4ca9-4a3d-80f0-cff18438940a</GUID>
    <ObjectType>cms.member</ObjectType>
  </QAndAAnswerDataAuthorMemberID>
  <QAndAAnswerDataCodeName>-seangwright-So-in-the-example-above-in-te5d7e8f87</QAndAAnswerDataCodeName>
  <QAndAAnswerDataContent>
<![CDATA[
@seangwright

So in the example above in test method the given functions are mocked which is syntactically correct and the test passes! It's exactly what you'd expect. However the real issue starts when you do the actual calls to the mocked functions to verify that they return the correct values.

Let's extend the test method by adding a couple of calls and storing them in variables:

```csharp
[Fact]
public async void Test1()
{
    var _webPageQueryResultMapper = Substitute.For<IWebPageQueryResultMapper>();
    var _contentQueryExecutor = Substitute.For<IContentQueryExecutor>();

    var homePage = new HomePage
    {
        SystemFields = new WebPageFields
        {
            WebPageItemID = 1
        }
    };

    _webPageQueryResultMapper
       .Map<HomePage>(Arg.Any<IWebPageContentQueryDataContainer>())
       .Returns(homePage);

    _contentQueryExecutor
        .GetWebPageResult(
            builder: Arg.Any<ContentItemQueryBuilder>(),
            resultSelector: _webPageQueryResultMapper.Map<HomePage>,
            options: Arg.Any<ContentQueryExecutionOptions>(),
            cancellationToken: Arg.Any<CancellationToken>()
        )
        .Returns([homePage]);

    var testBuilder = new ContentItemQueryBuilder().InLanguage("en");
    HomePage mappedResult = _webPageQueryResultMapper.Map<HomePage>(null);
    IEnumerable<HomePage> result = await _contentQueryExecutor
        .GetWebPageResult(
            builder: testBuilder,
            resultSelector: _webPageQueryResultMapper.Map<HomePage>,
            options: null,
            cancellationToken: CancellationToken.None
        );
}
```

When I debug the test method I see that the value in the `mappedResult` variable is correct, it returns an instance of `HomePage`. However the `result` variable is an empty enumerable. That's the issue that I've been having, that it's just difficult to mock the `IContentQueryExecutor`.

I've also tried this out in v28.4.1, but it yields the same result. It could genuinely be the case that using `xUnit` is what's causing this problem. I'm curious to see whether this actually works in `NUnit`.

]]>
  </QAndAAnswerDataContent>
  <QAndAAnswerDataDateCreated>2024-03-27 14:19:51Z</QAndAAnswerDataDateCreated>
  <QAndAAnswerDataGUID>b6f3d13a-9b9c-4737-98cb-5425443297da</QAndAAnswerDataGUID>
  <QAndAAnswerDataQuestionWebPageItemID>
    <CodeName>Xperience-unit-test-mocking-of-content-qu-d9f8ee18</CodeName>
    <GUID>d67e9aeb-0c33-45f5-9c66-119225f1b25b</GUID>
    <ObjectType>cms.webpageitem</ObjectType>
  </QAndAAnswerDataQuestionWebPageItemID>
  <QAndAAnswerDataWebsiteChannelID>
    <GUID>9ca57e0f-969f-43be-91d3-6c45659316bd</GUID>
    <ObjectType>cms.websitechannel</ObjectType>
    <Parent>
      <CodeName>devnet</CodeName>
      <GUID>4f636110-fd4a-4905-83e6-998752c2b2c2</GUID>
      <ObjectType>cms.channel</ObjectType>
    </Parent>
  </QAndAAnswerDataWebsiteChannelID>
</kenticocommunity.qandaanswerdata>