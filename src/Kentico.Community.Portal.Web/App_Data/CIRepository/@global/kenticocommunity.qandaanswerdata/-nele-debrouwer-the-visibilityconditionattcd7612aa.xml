<?xml version="1.0" encoding="utf-8"?>
<kenticocommunity.qandaanswerdata>
  <QAndAAnswerDataAuthorMemberID>
    <GUID>b63e360d-4b76-4418-a8a7-affd51730462</GUID>
    <ObjectType>cms.member</ObjectType>
  </QAndAAnswerDataAuthorMemberID>
  <QAndAAnswerDataCodeName>-nele-debrouwer-The-VisibilityConditionAttcd7612aa</QAndAAnswerDataCodeName>
  <QAndAAnswerDataContent>
<![CDATA[
@nele.debrouwer

The `VisibilityConditionAttribute` type is _actually_ in `Kentico.Xperience.Admin.Base.Shared`, which is a special assembly that is "shared" between `Kentico.Xperience.WebApp` and `Kentico.Xperience.Admin`.

:::note
The `Kentico.Xperience.Admin.Base.Shared` assembly is not published as a separate NuGet package and instead should be accessed through `Kentico.Xperience.WebApp` or `Kentico.Xperience.Admin`.
:::

This means your `VisibilityCondition` and `VisibilityConditionProperties` classes would need to go in a separate "admin" .NET project, which is only included during administration deployments.

You would then need to create a "shared" Admin project that references the `Kentico.Xperience.WebApp` NuGet package and is itself referenced by your ASP.NET Core project and your "admin" .NET project.

This shared project would contain the `VisibilityConditionAttribute` class.

**Shared .NET project**

This project references the `Kentico.Xperience.WebApp` NuGet package.

```csharp
public class ChannelVisibilityConditionAttribute(string channelName)
    : VisibilityConditionAttribute
{
    public string ChannelName { get; set; } = channelName ?? "";
}
```

**ASP.NET Core project**

This project references the `Kentico.Xperience.WebApp` NuGet package and the Shared project.

It also "conditionally" references the Admin project (only when performing a deployment including the administration).

```csharp
public class MySectionProperties 
    : ISectionProperties
{
    [ChannelVisibilityCondition("DancingGoatPages")]
    [DropDownComponent(
		Label = "Pages Color", 
		Options = "Primary;Primary\nSecondary;Secondary")] 
    public string PagesColor { get; set; } = "";
}
```

**Administration .NET project**

This project references the Shared project and the `Kentico.Xperience.Admin` NuGet package.

By referencing the Shared project, the `ChannelVisibilityConditionAttribute` can be assigned to the `ChannelVisibilityCondition` class, gluing them together for the administration/Page Builder UI.

```csharp
[VisibilityConditionAttribute(
    typeof(ChannelVisibilityConditionAttribute))]
public class ChannelVisibilityCondition(...)
    : VisibilityCondition<ChannelVisibilityConditionProperties>
{
    // ...
}

public class ChannelVisibilityConditionProperties 
    : VisibilityConditionProperties
{
    public string ChannelName { get; set; } = "";
}
```

I hope this makes sense! Deploying without the administration _is possible_ but it requires a little more planning and architecture by your team.
]]>
  </QAndAAnswerDataContent>
  <QAndAAnswerDataDateCreated>2024-04-23 22:27:08Z</QAndAAnswerDataDateCreated>
  <QAndAAnswerDataGUID>181ace81-d17a-44af-a8e3-92ea7d65af39</QAndAAnswerDataGUID>
  <QAndAAnswerDataQuestionWebPageItemID>
    <CodeName>Can-I-have-different-Section-properties-b-8e152458</CodeName>
    <GUID>ae20e51b-de41-42ae-8f3a-8e8d21e83b6a</GUID>
    <ObjectType>cms.webpageitem</ObjectType>
  </QAndAAnswerDataQuestionWebPageItemID>
  <QAndAAnswerDataWebsiteChannelID>
    <GUID>9ca57e0f-969f-43be-91d3-6c45659316bd</GUID>
    <ObjectType>cms.websitechannel</ObjectType>
    <Parent>
      <CodeName>devnet</CodeName>
      <GUID>4f636110-fd4a-4905-83e6-998752c2b2c2</GUID>
      <ObjectType>cms.channel</ObjectType>
    </Parent>
  </QAndAAnswerDataWebsiteChannelID>
</kenticocommunity.qandaanswerdata>