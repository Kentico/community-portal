<?xml version="1.0" encoding="utf-8"?>
<kenticocommunity.qandaanswerdata>
  <QAndAAnswerDataAuthorMemberID>
    <GUID>f69d9d84-4ca9-4a3d-80f0-cff18438940a</GUID>
    <ObjectType>cms.member</ObjectType>
  </QAndAAnswerDataAuthorMemberID>
  <QAndAAnswerDataCodeName>A-couple-things-to-note-in-your-example-co28ee80ce</QAndAAnswerDataCodeName>
  <QAndAAnswerDataContent>
<![CDATA[
A couple things to note in your example code:

1. It's not clear what `cacheService.Get()` is doing. That's not a type built into Xperience, so you'll need to provide that code here as well.
1. I notice you aren't specifying any cache dependencies in your first example - these results will remain cached even if the data in the database changes. Is this intentional?

In regards to the error you're seeing. I'm not positive what the cause is, but I'm thinking that you might have a `Task` returning operation that is _not_ being awaited correctly. Either the `await` is missing completely (fire-and-forget) or it is being awaited _after_ the connection has closed.

Your `.ForAssets()` call returns an `ObjectQuery<MediaFileInfo>`. Yes, you _can_ implicitly iterate on the result which will force materialization of the SQL query and result set, but I always recommend using one of Xperience's built-in extensions, like `.GetEnumerableTypedResultAsync()` which performs the query execution and result set generation explicitly.

Your implicit cast of `results` (which is `ObjectQuery<MediaFileInfo>`) to `IEnumerable<MediaFileInfo>` is a big risk, in my opinion. I would refactor the code to the following:

```csharp
public async Task<ImmutableList<MediaFileInfo>> GetAssetsFromRelatedItems(IEnumerable<AssetRelatedItem> items)
{
    return await cache.LoadAsync(
        async (cacheSettings) =>
        {
            var results = await new ObjectQuery<MediaFileInfo>()
                .ForAssets(items)
                .GetEnumerableTypedResultAsync();

            var dependencyKeys = results
                .Select(result => $"mediafile|{result.FileGUID}")
                .ToArray();

            cacheSettings.CacheDependency = CacheHelper.GetCacheDependency(dependencyKeys);

			// ImmutableList has the immutability benefits of IEnumerable
			// while also clearly showing the result set is finite and already iterated
            return results.ToImmutableList();
        },
        new CacheSettings(
            cacheMinutes: CacheConstants.CacheMinutes,
            useSlidingExpiration: true,
            cacheItemNameParts: new[]
            {
                nameof(MediaLibraryService),
                nameof(GetAssetsFromRelatedItems)
            }.Concat(items?.OrderBy(item => item.Name).Select(item => item.Name) ?? Enumerable.Empty<string>()).ToArray()
        )
    );
}
```
]]>
  </QAndAAnswerDataContent>
  <QAndAAnswerDataDateCreated>2024-06-12 00:54:39Z</QAndAAnswerDataDateCreated>
  <QAndAAnswerDataGUID>7029ba23-1611-49e9-8948-bd81823e5f54</QAndAAnswerDataGUID>
  <QAndAAnswerDataQuestionWebPageItemID>
    <CodeName>Connection-is-closed-error-Using-ObjectQuery-and-IContentQueryExecutor-6a8b5700-z3e1gp6j</CodeName>
    <GUID>f8dd8c7e-e8a4-49f7-a0bf-fc9e9baf3d04</GUID>
    <ObjectType>cms.webpageitem</ObjectType>
  </QAndAAnswerDataQuestionWebPageItemID>
  <QAndAAnswerDataWebsiteChannelID>
    <GUID>9ca57e0f-969f-43be-91d3-6c45659316bd</GUID>
    <ObjectType>cms.websitechannel</ObjectType>
    <Parent>
      <CodeName>devnet</CodeName>
      <GUID>4f636110-fd4a-4905-83e6-998752c2b2c2</GUID>
      <ObjectType>cms.channel</ObjectType>
    </Parent>
  </QAndAAnswerDataWebsiteChannelID>
</kenticocommunity.qandaanswerdata>