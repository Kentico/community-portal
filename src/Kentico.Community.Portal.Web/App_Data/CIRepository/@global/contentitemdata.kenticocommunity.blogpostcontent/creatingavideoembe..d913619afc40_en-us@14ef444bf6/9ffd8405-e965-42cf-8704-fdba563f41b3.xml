<?xml version="1.0" encoding="utf-8"?>
<contentitemdata.kenticocommunity.blogpostcontent>
  <BlogPostContentAuthor>
    <![CDATA[[{"Identifier":"058f60dc-c9ff-4416-b856-ddc6005ccb21"}]]]>
  </BlogPostContentAuthor>
  <BlogPostContentContentHTML>
<![CDATA[
<p dir="auto" id="isPasted">Since the October 2022 refresh, Xperience by Kentico has supported the use of multiple visibility conditions in the properties of page builder and form builder components. This means that the visibility of one property can be dependent on multiple other properties at the same time.</p><p dir="auto">Let's create a widget that demonstrates this functionality. A widget for embedding videos in the page could be a good opportunity for this-- Since certain features may vary depending on the video service provider, we can use visibility conditions to make use of the available features for each service, depending on the selection.</p><p dir="auto">For the purposes of this example, the widget will be added into the <strong>Dancing Goat</strong> sample site, and will use <em>DancingGoat</em> namespaces. It will also include code snippets both for older, backwards-compatible C# form components, and newer React-based form components.</p><h2 dir="auto">Setting the goal</h2><p dir="auto">The goal of our widget will be to display a video embed in a page. Most video content shared on the internet is hosted on video sharing platforms, so we should include some of these services as options, along with the ability to embed a publicly accessible video file via the HTML <strong><code>&lt;video&gt;</code></strong> tag.</p><p dir="auto">However, using multiple video sharing platforms introduces some complication-- not all platforms have the same features. For instance, Youtube and Vimeo allow for a video to be started midway, at a certain point in time, while Dailymotion does not. Conversely, Vimeo and Dailymotion can be sized dynamically (percentage-based widths in CSS), while Youtube did not play well with this in my testing.</p><p dir="auto">Based on these available features, we can use visibility conditions to show or hide different configuration options.</p><h2 dir="auto">Defining the properties</h2><h3 dir="auto"><strong>Basic properties</strong></h3><p dir="auto">In the Dancing Goat project, go to <strong>~/Components/Widgets</strong> and add a new folder called <strong>VideoEmbedWidget</strong>. Within this folder, define a properties class that inherits from <strong><code>IWidgetProperties</code></strong>.</p><pre class="language-csharp"><code>namespace DancingGoat.Widgets
{
    public class VideoEmbedWidgetProperties : IWidgetProperties
    {

    }
}
</code></pre><p dir="auto">Add the necessary <strong><code>using</code></strong> directives to the file.</p><div class="highlight highlight-source-cs notranslate position-relative overflow-auto" dir="auto"><pre><span class="pl-c">//For using old C# components</span>
<span class="pl-k">using</span> Kentico<span class="pl-kos">.</span>Forms<span class="pl-kos">.</span>Web<span class="pl-kos">.</span>Mvc<span class="pl-kos">;</span>
<span class="pl-k">using</span> Kentico<span class="pl-kos">.</span>PageBuilder<span class="pl-kos">.</span>Web<span class="pl-kos">.</span>Mvc<span class="pl-kos">;</span>
<span class="pl-k">using</span> DancingGoat<span class="pl-kos">.</span>FormComponents<span class="pl-kos">;</span></pre></div><div class="highlight highlight-source-cs notranslate position-relative overflow-auto" dir="auto"><pre><span class="pl-c">//For using React components</span>
<span class="pl-k">using</span> Kentico<span class="pl-kos">.</span>Forms<span class="pl-kos">.</span>Web<span class="pl-kos">.</span>Mvc<span class="pl-kos">;</span>
<span class="pl-k">using</span> Kentico<span class="pl-kos">.</span>PageBuilder<span class="pl-kos">.</span>Web<span class="pl-kos">.</span>Mvc<span class="pl-kos">;</span>
<span class="pl-k">using</span> Kentico<span class="pl-kos">.</span>Xperience<span class="pl-kos">.</span>Admin<span class="pl-kos">.</span>Base<span class="pl-kos">.</span>FormAnnotations<span class="pl-kos">;</span>
<span class="pl-k">using</span> DancingGoat<span class="pl-kos">.</span>FormComponents<span class="pl-kos">;</span></pre></div><p dir="auto">Next, define some constants within the class to hold the code names of the services we will use. Let's go with the examples cited above.</p><div class="highlight highlight-source-cs notranslate position-relative overflow-auto" dir="auto"><pre><span class="pl-k">public</span> <span class="pl-k">const</span> <span class="pl-smi">string</span> <span class="pl-s1">YOUTUBE</span> <span class="pl-c1">=</span> <span class="pl-s"><span class="pl-s">"</span>youtube<span class="pl-s">"</span></span><span class="pl-kos">;</span>
<span class="pl-k">public</span> <span class="pl-k">const</span> <span class="pl-smi">string</span> <span class="pl-s1">VIMEO</span> <span class="pl-c1">=</span> <span class="pl-s"><span class="pl-s">"</span>vimeo<span class="pl-s">"</span></span><span class="pl-kos">;</span>
<span class="pl-k">public</span> <span class="pl-k">const</span> <span class="pl-smi">string</span> <span class="pl-s1">DAILYMOTION</span> <span class="pl-c1">=</span> <span class="pl-s"><span class="pl-s">"</span>dailymotion<span class="pl-s">"</span></span><span class="pl-kos">;</span>
<span class="pl-k">public</span> <span class="pl-k">const</span> <span class="pl-smi">string</span> <span class="pl-s1">FILE</span> <span class="pl-c1">=</span> <span class="pl-s"><span class="pl-s">"</span>file<span class="pl-s">"</span></span><span class="pl-kos">;</span></pre></div><p dir="auto">Now let's consider what kinds of properties we'll need.</p><p dir="auto">Since the video can come from several places, and we'll need to react differently based on where, let's add property that signifies which service a video is from, and another to hold the url of the video itself.</p><div class="highlight highlight-source-cs notranslate position-relative overflow-auto" dir="auto"><pre><span class="pl-k">public</span> <span class="pl-smi">string</span> <span class="pl-s1">Service</span> <span class="pl-kos">{</span> get<span class="pl-kos">;</span> set<span class="pl-kos">;</span> <span class="pl-kos">}</span>

<span class="pl-k">public</span> <span class="pl-smi">string</span> <span class="pl-s1">Url</span> <span class="pl-kos">{</span> get<span class="pl-kos">;</span> set<span class="pl-kos">;</span> <span class="pl-kos">}</span></pre></div><p dir="auto">Next, we can signify whether the video should be sized dynamically, using a boolean property, and also add properties for the dimensions when its size is explicitly specified.</p><div class="highlight highlight-source-cs notranslate position-relative overflow-auto" dir="auto"><pre><span class="pl-k">public</span> <span class="pl-smi">bool</span> <span class="pl-s1">DynamicSize</span> <span class="pl-kos">{</span> get<span class="pl-kos">;</span> set<span class="pl-kos">;</span> <span class="pl-kos">}</span>

<span class="pl-k">public</span> <span class="pl-smi">int</span> <span class="pl-s1">Width</span> <span class="pl-kos">{</span> get<span class="pl-kos">;</span> set<span class="pl-kos">;</span> <span class="pl-kos">}</span>

<span class="pl-k">public</span> <span class="pl-smi">int</span> <span class="pl-s1">Height</span> <span class="pl-kos">{</span> get<span class="pl-kos">;</span> set<span class="pl-kos">;</span> <span class="pl-kos">}</span></pre></div><p dir="auto">Finally, let's add properties to specify whether the video should be played from the beginning, or from a timestamp, and what that timestamp should be.</p><div class="highlight highlight-source-cs notranslate position-relative overflow-auto" dir="auto"><pre><span class="pl-k">public</span> <span class="pl-smi">bool</span> <span class="pl-s1">PlayFromBeginning</span> <span class="pl-kos">{</span> get<span class="pl-kos">;</span> set<span class="pl-kos">;</span> <span class="pl-kos">}</span>

<span class="pl-k">public</span> <span class="pl-smi">int</span> <span class="pl-s1">StartingTime</span> <span class="pl-kos">{</span> get<span class="pl-kos">;</span> set<span class="pl-kos">;</span> <span class="pl-kos">}</span></pre></div><h3 dir="auto"><strong>Editing controls</strong></h3><p dir="auto">Now we can assign editing controls to our properties.</p><p dir="auto">Since the <strong><code>Service</code></strong> property should be picking from a finite list of options, let's make it use radio buttons, and have it default to the Youtube option, since this is the most popular video sharing service. We can assign a plain textbox to the Url property.</p><div class="highlight highlight-source-cs notranslate position-relative overflow-auto" dir="auto"><pre><span class="pl-c">//For using old C# components</span>

<span class="pl-kos">[</span><span class="pl-c1">EditingComponent<span class="pl-kos">(</span>RadioButtonsComponent<span class="pl-kos">.</span>IDENTIFIER<span class="pl-kos">,</span> Label <span class="pl-c1">=</span> <span class="pl-s"><span class="pl-s">"</span>Video service<span class="pl-s">"</span></span><span class="pl-kos">,</span> Order <span class="pl-c1">=</span> <span class="pl-c1">1</span><span class="pl-kos">)</span></span><span class="pl-kos">]</span>
<span class="pl-kos">[</span><span class="pl-c1">EditingComponentProperty<span class="pl-kos">(</span>nameof<span class="pl-kos">(</span>RadioButtonsComponent<span class="pl-kos">.</span>Properties<span class="pl-kos">.</span>DataSource<span class="pl-kos">)</span><span class="pl-kos">,</span> <span class="pl-s1">YOUTUBE</span> <span class="pl-c1">+</span> <span class="pl-s"><span class="pl-s">"</span>;YouTube<span class="pl-k">\r</span><span class="pl-k">\n</span><span class="pl-s">"</span></span> <span class="pl-c1">+</span> <span class="pl-s1">VIMEO</span> <span class="pl-c1">+</span> <span class="pl-s"><span class="pl-s">"</span>;Vimeo<span class="pl-k">\r</span><span class="pl-k">\n</span><span class="pl-s">"</span></span> <span class="pl-c1">+</span> <span class="pl-s1">DAILYMOTION</span> <span class="pl-c1">+</span> <span class="pl-s"><span class="pl-s">"</span>;Dailymotion<span class="pl-k">\r</span><span class="pl-k">\n</span><span class="pl-s">"</span></span> <span class="pl-c1">+</span> <span class="pl-s1">FILE</span> <span class="pl-c1">+</span> <span class="pl-s"><span class="pl-s">"</span>;File URL<span class="pl-k">\r</span><span class="pl-k">\n</span><span class="pl-s">"</span></span><span class="pl-kos">)</span></span><span class="pl-kos">]</span>
<span class="pl-k">public</span> <span class="pl-smi">string</span> Service <span class="pl-kos">{</span> <span class="pl-k">get</span><span class="pl-kos">;</span> <span class="pl-k">set</span><span class="pl-kos">;</span> <span class="pl-kos">}</span> <span class="pl-c1">=</span> YOUTUBE<span class="pl-kos">;</span>

<span class="pl-kos">[</span><span class="pl-c1">EditingComponent<span class="pl-kos">(</span>TextInputComponent<span class="pl-kos">.</span>IDENTIFIER<span class="pl-kos">,</span> Label <span class="pl-c1">=</span> <span class="pl-s"><span class="pl-s">"</span>Url<span class="pl-s">"</span></span><span class="pl-kos">,</span> Order <span class="pl-c1">=</span> <span class="pl-c1">2</span><span class="pl-kos">)</span></span><span class="pl-kos">]</span>
<span class="pl-k">public</span> <span class="pl-smi">string</span> Url <span class="pl-kos">{</span> <span class="pl-k">get</span><span class="pl-kos">;</span> <span class="pl-k">set</span><span class="pl-kos">;</span> <span class="pl-kos">}</span></pre></div><div class="highlight highlight-source-cs notranslate position-relative overflow-auto" dir="auto"><pre><span class="pl-c">//For using React components</span>

<span class="pl-kos">[</span><span class="pl-c1">RadioGroupComponent<span class="pl-kos">(</span>Label <span class="pl-c1">=</span> <span class="pl-s"><span class="pl-s">"</span>Video service<span class="pl-s">"</span></span><span class="pl-kos">,</span> Inline <span class="pl-c1">=</span> <span class="pl-c1">true</span><span class="pl-kos">,</span> Order <span class="pl-c1">=</span> <span class="pl-c1">1</span><span class="pl-kos">,</span> Options <span class="pl-c1">=</span> <span class="pl-s1">YOUTUBE</span> <span class="pl-c1">+</span> <span class="pl-s"><span class="pl-s">"</span>;YouTube<span class="pl-k">\r</span><span class="pl-k">\n</span><span class="pl-s">"</span></span> <span class="pl-c1">+</span> <span class="pl-s1">VIMEO</span> <span class="pl-c1">+</span> <span class="pl-s"><span class="pl-s">"</span>;Vimeo<span class="pl-k">\r</span><span class="pl-k">\n</span><span class="pl-s">"</span></span> <span class="pl-c1">+</span> <span class="pl-s1">DAILYMOTION</span> <span class="pl-c1">+</span> <span class="pl-s"><span class="pl-s">"</span>;Dailymotion<span class="pl-k">\r</span><span class="pl-k">\n</span><span class="pl-s">"</span></span> <span class="pl-c1">+</span> <span class="pl-s1">FILE</span> <span class="pl-c1">+</span> <span class="pl-s"><span class="pl-s">"</span>;File URL<span class="pl-k">\r</span><span class="pl-k">\n</span><span class="pl-s">"</span></span><span class="pl-kos">)</span></span><span class="pl-kos">]</span>
<span class="pl-k">public</span> <span class="pl-smi">string</span> Service <span class="pl-kos">{</span> <span class="pl-k">get</span><span class="pl-kos">;</span> <span class="pl-k">set</span><span class="pl-kos">;</span> <span class="pl-kos">}</span> <span class="pl-c1">=</span> YOUTUBE<span class="pl-kos">;</span>

<span class="pl-kos">[</span><span class="pl-c1">TextInputComponent<span class="pl-kos">(</span>Label <span class="pl-c1">=</span> <span class="pl-s"><span class="pl-s">"</span>Url<span class="pl-s">"</span></span><span class="pl-kos">,</span> Order <span class="pl-c1">=</span> <span class="pl-c1">2</span><span class="pl-kos">)</span></span><span class="pl-kos">]</span>
<span class="pl-k">public</span> <span class="pl-smi">string</span> Url <span class="pl-kos">{</span> <span class="pl-k">get</span><span class="pl-kos">;</span> <span class="pl-k">set</span><span class="pl-kos">;</span> <span class="pl-kos">}</span></pre></div><p dir="auto">We can use checkbox components for the boolean properties <strong><code>DynamicSize</code></strong> and <strong><code>PlayFromBeginning</code></strong>, and number or integer components for <strong><code>Width</code></strong>, <strong><code>Height</code></strong>, and <strong><code>StartingTime</code></strong>.</p><p dir="auto">Set the default starting time to 0, since we don't know how long the provided videos will be, and choose default dimensions that seem appropriate. Below are the default dimensions Youtube seems to use when generating embeds for videos with the standard aspect ratio.</p><div class="highlight highlight-source-cs notranslate position-relative overflow-auto" dir="auto"><pre><span class="pl-c">//For using old C# components</span>

<span class="pl-kos">[</span><span class="pl-c1">EditingComponent<span class="pl-kos">(</span>CheckBoxComponent<span class="pl-kos">.</span>IDENTIFIER<span class="pl-kos">,</span> Label <span class="pl-c1">=</span> <span class="pl-s"><span class="pl-s">"</span>Size dynamically<span class="pl-s">"</span></span><span class="pl-kos">,</span> Order <span class="pl-c1">=</span> <span class="pl-c1">3</span><span class="pl-kos">)</span></span><span class="pl-kos">]</span>
<span class="pl-k">public</span> <span class="pl-smi">bool</span> DynamicSize <span class="pl-kos">{</span> <span class="pl-k">get</span><span class="pl-kos">;</span> <span class="pl-k">set</span><span class="pl-kos">;</span> <span class="pl-kos">}</span> <span class="pl-c1">=</span> true<span class="pl-kos">;</span>

<span class="pl-kos">[</span><span class="pl-c1">EditingComponent<span class="pl-kos">(</span>IntInputComponent<span class="pl-kos">.</span>IDENTIFIER<span class="pl-kos">,</span> Label <span class="pl-c1">=</span> <span class="pl-s"><span class="pl-s">"</span>Width (px)<span class="pl-s">"</span></span><span class="pl-kos">,</span> Order <span class="pl-c1">=</span> <span class="pl-c1">4</span><span class="pl-kos">)</span></span><span class="pl-kos">]</span>
<span class="pl-k">public</span> <span class="pl-smi">int</span> Width <span class="pl-kos">{</span> <span class="pl-k">get</span><span class="pl-kos">;</span> <span class="pl-k">set</span><span class="pl-kos">;</span> <span class="pl-kos">}</span> <span class="pl-c1">=</span> <span class="pl-c1">560</span><span class="pl-kos">;</span>

<span class="pl-kos">[</span><span class="pl-c1">EditingComponent<span class="pl-kos">(</span>IntInputComponent<span class="pl-kos">.</span>IDENTIFIER<span class="pl-kos">,</span> Label <span class="pl-c1">=</span> <span class="pl-s"><span class="pl-s">"</span>Height (px)<span class="pl-s">"</span></span><span class="pl-kos">,</span> Order <span class="pl-c1">=</span> <span class="pl-c1">5</span><span class="pl-kos">)</span></span><span class="pl-kos">]</span>
<span class="pl-k">public</span> <span class="pl-smi">int</span> Height <span class="pl-kos">{</span> <span class="pl-k">get</span><span class="pl-kos">;</span> <span class="pl-k">set</span><span class="pl-kos">;</span> <span class="pl-kos">}</span> <span class="pl-c1">=</span> <span class="pl-c1">315</span><span class="pl-kos">;</span>

<span class="pl-kos">[</span><span class="pl-c1">EditingComponent<span class="pl-kos">(</span>CheckBoxComponent<span class="pl-kos">.</span>IDENTIFIER<span class="pl-kos">,</span> Label <span class="pl-c1">=</span> <span class="pl-s"><span class="pl-s">"</span>Play from beginning<span class="pl-s">"</span></span><span class="pl-kos">,</span> Order <span class="pl-c1">=</span> <span class="pl-c1">6</span><span class="pl-kos">)</span></span><span class="pl-kos">]</span>
<span class="pl-k">public</span> <span class="pl-smi">bool</span> PlayFromBeginning <span class="pl-kos">{</span> <span class="pl-k">get</span><span class="pl-kos">;</span> <span class="pl-k">set</span><span class="pl-kos">;</span> <span class="pl-kos">}</span> <span class="pl-c1">=</span> true<span class="pl-kos">;</span>

<span class="pl-kos">[</span><span class="pl-c1">EditingComponent<span class="pl-kos">(</span>IntInputComponent<span class="pl-kos">.</span>IDENTIFIER<span class="pl-kos">,</span> Label <span class="pl-c1">=</span> <span class="pl-s"><span class="pl-s">"</span>Starting time (seconds)<span class="pl-s">"</span></span><span class="pl-kos">,</span> Order <span class="pl-c1">=</span> <span class="pl-c1">7</span><span class="pl-kos">)</span></span><span class="pl-kos">]</span>
<span class="pl-k">public</span> <span class="pl-smi">int</span> StartingTime <span class="pl-kos">{</span> <span class="pl-k">get</span><span class="pl-kos">;</span> <span class="pl-k">set</span><span class="pl-kos">;</span> <span class="pl-kos">}</span> <span class="pl-c1">=</span> <span class="pl-c1">0</span><span class="pl-kos">;</span></pre></div><div class="highlight highlight-source-cs notranslate position-relative overflow-auto" dir="auto"><pre><span class="pl-c">//For using React components</span>

<span class="pl-kos">[</span><span class="pl-c1">CheckBoxComponent<span class="pl-kos">(</span>Label <span class="pl-c1">=</span> <span class="pl-s"><span class="pl-s">"</span>Size dynamically<span class="pl-s">"</span></span><span class="pl-kos">,</span> Order <span class="pl-c1">=</span> <span class="pl-c1">3</span><span class="pl-kos">)</span></span><span class="pl-kos">]</span>
<span class="pl-k">public</span> <span class="pl-smi">bool</span> DynamicSize <span class="pl-kos">{</span> <span class="pl-k">get</span><span class="pl-kos">;</span> <span class="pl-k">set</span><span class="pl-kos">;</span> <span class="pl-kos">}</span> <span class="pl-c1">=</span> true<span class="pl-kos">;</span>

<span class="pl-kos">[</span>NumberInputComponent<span class="pl-kos">(</span><span class="pl-s1">Label</span> <span class="pl-c1">=</span> <span class="pl-s"><span class="pl-s">"</span>Width (px)<span class="pl-s">"</span></span><span class="pl-kos">,</span> <span class="pl-s1">Order</span> <span class="pl-c1">=</span> <span class="pl-c1">4</span><span class="pl-kos">)</span><span class="pl-kos">]</span>
public <span class="pl-smi">int</span> Width <span class="pl-kos">{</span> get<span class="pl-kos">;</span> set<span class="pl-kos">;</span> <span class="pl-kos">}</span> <span class="pl-c1">=</span> <span class="pl-c1">560</span><span class="pl-kos">;</span>

<span class="pl-kos">[</span><span class="pl-c1">NumberInputComponent<span class="pl-kos">(</span>Label <span class="pl-c1">=</span> <span class="pl-s"><span class="pl-s">"</span>Height (px)<span class="pl-s">"</span></span><span class="pl-kos">,</span> Order <span class="pl-c1">=</span> <span class="pl-c1">5</span><span class="pl-kos">)</span></span><span class="pl-kos">]</span>
<span class="pl-k">public</span> <span class="pl-smi">int</span> Height <span class="pl-kos">{</span> <span class="pl-k">get</span><span class="pl-kos">;</span> <span class="pl-k">set</span><span class="pl-kos">;</span> <span class="pl-kos">}</span> <span class="pl-c1">=</span> <span class="pl-c1">315</span><span class="pl-kos">;</span>

<span class="pl-kos">[</span>CheckBoxComponent<span class="pl-kos">(</span><span class="pl-s1">Label</span> <span class="pl-c1">=</span> <span class="pl-s"><span class="pl-s">"</span>Play from beginning<span class="pl-s">"</span></span><span class="pl-kos">,</span> <span class="pl-s1">Order</span> <span class="pl-c1">=</span> <span class="pl-c1">6</span><span class="pl-kos">)</span><span class="pl-kos">]</span>
public <span class="pl-smi">bool</span> PlayFromBeginning <span class="pl-kos">{</span> get<span class="pl-kos">;</span> set<span class="pl-kos">;</span> <span class="pl-kos">}</span> <span class="pl-c1">=</span> <span class="pl-c1">true</span><span class="pl-kos">;</span>

<span class="pl-kos">[</span><span class="pl-c1">NumberInputComponent<span class="pl-kos">(</span>Label <span class="pl-c1">=</span> <span class="pl-s"><span class="pl-s">"</span>Starting time (seconds)<span class="pl-s">"</span></span><span class="pl-kos">,</span> Order <span class="pl-c1">=</span> <span class="pl-c1">7</span><span class="pl-kos">)</span></span><span class="pl-kos">]</span>
<span class="pl-k">public</span> <span class="pl-smi">int</span> StartingTime <span class="pl-kos">{</span> <span class="pl-k">get</span><span class="pl-kos">;</span> <span class="pl-k">set</span><span class="pl-kos">;</span> <span class="pl-kos">}</span> <span class="pl-c1">=</span> <span class="pl-c1">0</span><span class="pl-kos">;</span></pre></div><h3 dir="auto"><strong>Standard visibility conditions</strong></h3><p dir="auto">Now we can add visibility conditions to these properties.</p><p dir="auto">In my testing, Youtube embeds seem to get a bit wonky when trying to size them dynamically (via percentage-based CSS). There may be some way around this with CSS wizardry, but that's not my strong suit, so let's hide the <em>DynamicSize</em> property when Youtube is the selected service.</p><div class="highlight highlight-source-cs notranslate position-relative overflow-auto" dir="auto"><pre><span class="pl-c">//For using old C# components</span>

<span class="pl-kos">[</span><span class="pl-c1">EditingComponent<span class="pl-kos">(</span>CheckBoxComponent<span class="pl-kos">.</span>IDENTIFIER<span class="pl-kos">,</span> Label <span class="pl-c1">=</span> <span class="pl-s"><span class="pl-s">"</span>Size dynamically<span class="pl-s">"</span></span><span class="pl-kos">,</span> Order <span class="pl-c1">=</span> <span class="pl-c1">3</span><span class="pl-kos">)</span></span><span class="pl-kos">]</span>
<span class="pl-kos">[</span><span class="pl-c1">VisibilityCondition<span class="pl-kos">(</span>nameof<span class="pl-kos">(</span>Service<span class="pl-kos">)</span><span class="pl-kos">,</span> ComparisonTypeEnum<span class="pl-kos">.</span>IsNotEqualTo<span class="pl-kos">,</span> YOUTUBE<span class="pl-kos">)</span></span><span class="pl-kos">]</span>
<span class="pl-k">public</span> <span class="pl-smi">bool</span> DynamicSize <span class="pl-kos">{</span> <span class="pl-k">get</span><span class="pl-kos">;</span> <span class="pl-k">set</span><span class="pl-kos">;</span> <span class="pl-kos">}</span> <span class="pl-c1">=</span> true<span class="pl-kos">;</span></pre></div><div class="highlight highlight-source-cs notranslate position-relative overflow-auto" dir="auto"><pre><span class="pl-c">//For using React components</span>

<span class="pl-kos">[</span><span class="pl-c1">CheckBoxComponent<span class="pl-kos">(</span>Label <span class="pl-c1">=</span> <span class="pl-s"><span class="pl-s">"</span>Size dynamically<span class="pl-s">"</span></span><span class="pl-kos">,</span> Order <span class="pl-c1">=</span> <span class="pl-c1">3</span><span class="pl-kos">)</span></span><span class="pl-kos">]</span>
<span class="pl-kos">[</span><span class="pl-c1">VisibleIfNotEqualTo<span class="pl-kos">(</span>nameof<span class="pl-kos">(</span>Service<span class="pl-kos">)</span><span class="pl-kos">,</span> YOUTUBE<span class="pl-kos">)</span></span><span class="pl-kos">]</span>
<span class="pl-k">public</span> <span class="pl-smi">bool</span> DynamicSize <span class="pl-kos">{</span> <span class="pl-k">get</span><span class="pl-kos">;</span> <span class="pl-k">set</span><span class="pl-kos">;</span> <span class="pl-kos">}</span> <span class="pl-c1">=</span> true<span class="pl-kos">;</span></pre></div><p dir="auto">Similarly, Dailymotion does not allow embeds to start at a specific timestamp, so we can hide the <strong><code>PlayFromBeginning</code></strong> checkbox when it is the selected service.</p><div class="highlight highlight-source-cs notranslate position-relative overflow-auto" dir="auto"><pre><span class="pl-c">//For using old C# components</span>

<span class="pl-kos">[</span><span class="pl-c1">EditingComponent<span class="pl-kos">(</span>CheckBoxComponent<span class="pl-kos">.</span>IDENTIFIER<span class="pl-kos">,</span> Label <span class="pl-c1">=</span> <span class="pl-s"><span class="pl-s">"</span>Play from beginning<span class="pl-s">"</span></span><span class="pl-kos">,</span> Order <span class="pl-c1">=</span> <span class="pl-c1">6</span><span class="pl-kos">)</span></span><span class="pl-kos">]</span>
<span class="pl-kos">[</span><span class="pl-c1">VisibilityCondition<span class="pl-kos">(</span>nameof<span class="pl-kos">(</span>Service<span class="pl-kos">)</span><span class="pl-kos">,</span> ComparisonTypeEnum<span class="pl-kos">.</span>IsNotEqualTo<span class="pl-kos">,</span> DAILYMOTION<span class="pl-kos">)</span></span><span class="pl-kos">]</span>
<span class="pl-k">public</span> <span class="pl-smi">bool</span> PlayFromBeginning <span class="pl-kos">{</span> <span class="pl-k">get</span><span class="pl-kos">;</span> <span class="pl-k">set</span><span class="pl-kos">;</span> <span class="pl-kos">}</span> <span class="pl-c1">=</span> true<span class="pl-kos">;</span></pre></div><div class="highlight highlight-source-cs notranslate position-relative overflow-auto" dir="auto"><pre><span class="pl-c">//For using React components</span>

<span class="pl-kos">[</span><span class="pl-c1">CheckBoxComponent<span class="pl-kos">(</span>Label <span class="pl-c1">=</span> <span class="pl-s"><span class="pl-s">"</span>Play from beginning<span class="pl-s">"</span></span><span class="pl-kos">,</span> Order <span class="pl-c1">=</span> <span class="pl-c1">6</span><span class="pl-kos">)</span></span><span class="pl-kos">]</span>
<span class="pl-kos">[</span><span class="pl-c1">VisibleIfNotEqualTo<span class="pl-kos">(</span>nameof<span class="pl-kos">(</span>Service<span class="pl-kos">)</span><span class="pl-kos">,</span> DAILYMOTION<span class="pl-kos">)</span></span><span class="pl-kos">]</span>
<span class="pl-k">public</span> <span class="pl-smi">bool</span> PlayFromBeginning <span class="pl-kos">{</span> <span class="pl-k">get</span><span class="pl-kos">;</span> <span class="pl-k">set</span><span class="pl-kos">;</span> <span class="pl-kos">}</span> <span class="pl-c1">=</span> true<span class="pl-kos">;</span></pre></div><p dir="auto">Next, let's determine the visibility of the <strong><code>StartingTime</code></strong> numeric input. We want this to hidden when <strong><code>PlayFromBeginning</code></strong> is true, as well as when <em>Dailymotion</em> is selected, regardless of the value of <strong><code>PlayFromBeginning</code></strong>. Thankfully, these conditions can be applied by stacking multiple visibility conditions. The <strong><code>StartingTime</code></strong> property will only be visible when both conditions are met.</p><div class="highlight highlight-source-cs notranslate position-relative overflow-auto" dir="auto"><pre><span class="pl-c">//For using old C# components</span>

<span class="pl-kos">[</span><span class="pl-c1">EditingComponent<span class="pl-kos">(</span>IntInputComponent<span class="pl-kos">.</span>IDENTIFIER<span class="pl-kos">,</span> Label <span class="pl-c1">=</span> <span class="pl-s"><span class="pl-s">"</span>Starting time (seconds)<span class="pl-s">"</span></span><span class="pl-kos">,</span> Order <span class="pl-c1">=</span> <span class="pl-c1">7</span><span class="pl-kos">)</span></span><span class="pl-kos">]</span>
<span class="pl-kos">[</span><span class="pl-c1">VisibilityCondition<span class="pl-kos">(</span>nameof<span class="pl-kos">(</span>Service<span class="pl-kos">)</span><span class="pl-kos">,</span> ComparisonTypeEnum<span class="pl-kos">.</span>IsNotEqualTo<span class="pl-kos">,</span> DAILYMOTION<span class="pl-kos">)</span></span><span class="pl-kos">]</span>
<span class="pl-kos">[</span><span class="pl-c1">VisibilityCondition<span class="pl-kos">(</span>nameof<span class="pl-kos">(</span>PlayFromBeginning<span class="pl-kos">)</span><span class="pl-kos">,</span> ComparisonTypeEnum<span class="pl-kos">.</span>IsFalse<span class="pl-kos">)</span></span><span class="pl-kos">]</span>
<span class="pl-k">public</span> <span class="pl-smi">int</span> StartingTime <span class="pl-kos">{</span> <span class="pl-k">get</span><span class="pl-kos">;</span> <span class="pl-k">set</span><span class="pl-kos">;</span> <span class="pl-kos">}</span> <span class="pl-c1">=</span> <span class="pl-c1">0</span><span class="pl-kos">;</span></pre></div><div class="highlight highlight-source-cs notranslate position-relative overflow-auto" dir="auto"><pre><span class="pl-c">//For using React components</span>

<span class="pl-kos">[</span><span class="pl-c1">NumberInputComponent<span class="pl-kos">(</span>Label <span class="pl-c1">=</span> <span class="pl-s"><span class="pl-s">"</span>Starting time (seconds)<span class="pl-s">"</span></span><span class="pl-kos">,</span> Order <span class="pl-c1">=</span> <span class="pl-c1">7</span><span class="pl-kos">)</span></span><span class="pl-kos">]</span>
<span class="pl-kos">[</span><span class="pl-c1">VisibleIfFalse<span class="pl-kos">(</span>nameof<span class="pl-kos">(</span>PlayFromBeginning<span class="pl-kos">)</span><span class="pl-kos">)</span></span><span class="pl-kos">]</span>
<span class="pl-kos">[</span><span class="pl-c1">VisibleIfNotEqualTo<span class="pl-kos">(</span>nameof<span class="pl-kos">(</span>Service<span class="pl-kos">)</span><span class="pl-kos">,</span> DAILYMOTION<span class="pl-kos">)</span></span><span class="pl-kos">]</span>
<span class="pl-k">public</span> <span class="pl-smi">int</span> StartingTime <span class="pl-kos">{</span> <span class="pl-k">get</span><span class="pl-kos">;</span> <span class="pl-k">set</span><span class="pl-kos">;</span> <span class="pl-kos">}</span> <span class="pl-c1">=</span> <span class="pl-c1">0</span><span class="pl-kos">;</span></pre></div><h2 dir="auto">Setting up the widget display</h2><p dir="auto">Now let's add a viewmodel and view for our widget.</p><h3 dir="auto">Viewmodel</h3><p dir="auto">Create a class called <strong><code>VideoEmbedWidgetViewModel</code></strong> in the <strong><code>DancingGoat.Widgets</code></strong> namespace.</p><div class="highlight highlight-source-cs notranslate position-relative overflow-auto" dir="auto"><pre><span class="pl-k">namespace</span> DancingGoat<span class="pl-kos">.</span>Widgets
<span class="pl-kos">{</span>
    <span class="pl-k">public</span> <span class="pl-k">class</span> <span class="pl-smi">VideoEmbedWidgetViewModel</span>
    <span class="pl-kos">{</span>
        <span class="pl-c">//...</span>
    <span class="pl-kos">}</span>
<span class="pl-kos">}</span></pre></div><p dir="auto">Add a string property called <strong><code>Markup</code></strong>, which we can use to store the Html that will be rendered for the widget. Due to the variety of video platforms, and potential configuration within each one, a lot of conditional logic will go into assembling the markup for the embed, so we should evaluate this logic in the view component rather than the view.</p><div class="highlight highlight-source-cs notranslate position-relative overflow-auto" dir="auto"><pre><span class="pl-k">public</span> <span class="pl-smi">string</span> <span class="pl-s1">Markup</span> <span class="pl-kos">{</span> get<span class="pl-kos">;</span> set<span class="pl-kos">;</span> <span class="pl-kos">}</span></pre></div><p dir="auto">For the purposes of this example, we won't add any other properties. We could optionally pass a string as a model instead, but in order to be consistent with other Dancing Goat widgets and facilitate further customization.</p><h3 dir="auto">View</h3><p dir="auto">Now let's add the view. Create a new view file in the same folder called <strong>_VideoEmbedWidget.cshtml</strong>.</p><p dir="auto">This aligns with the conventions set by the other widgets in the Dancing Goat project, such as HeroImageWidget and ProductCardWidget, though other projects may have their own conventions. The system automatically checks the <strong>~/Views/Shared/Widgets</strong> for a view named <strong>_{your widget identifier}.cshtml</strong> when no view is specified in the widget registration or the view component's result.</p><p dir="auto">For the purposes of this example, we'll keep it simple, and simply render the markup passed in the viewmodel.</p><div class="snippet-clipboard-content notranslate position-relative overflow-auto"><pre class="notranslate"><code>@model DancingGoat.Widgets.VideoEmbedWidgetViewModel
@Html.Raw(Model.Markup)
</code></pre></div><h2 dir="auto">Creating the ViewComponent</h2><p dir="auto">Now we can create a ViewComponent class that holds most of the widget's logic. Add a new file to your <strong>VideoEmbedWidget</strong> folder called <strong>VideoEmbedWidgetViewComponent.cs</strong>.</p><p dir="auto">Give this class the following using directives.</p><div class="highlight highlight-source-cs notranslate position-relative overflow-auto" dir="auto"><pre><span class="pl-k">using</span> Kentico<span class="pl-kos">.</span>PageBuilder<span class="pl-kos">.</span>Web<span class="pl-kos">.</span>Mvc<span class="pl-kos">;</span>
<span class="pl-k">using</span> Microsoft<span class="pl-kos">.</span>AspNetCore<span class="pl-kos">.</span>Mvc<span class="pl-kos">;</span>
<span class="pl-k">using</span> System<span class="pl-kos">;</span>
<span class="pl-k">using</span> System<span class="pl-kos">.</span>Web<span class="pl-kos">;</span>
<span class="pl-k">using</span> DancingGoat<span class="pl-kos">.</span>Widgets<span class="pl-kos">;</span>
<span class="pl-k">using</span> Microsoft<span class="pl-kos">.</span>Extensions<span class="pl-kos">.</span>Localization<span class="pl-kos">;</span></pre></div><p dir="auto">Use the <strong><code>DancingGoat.Widgets</code></strong> namespace, and make the class inherit from <strong><code>ViewComponent</code></strong>.</p><div class="highlight highlight-source-cs notranslate position-relative overflow-auto" dir="auto"><pre><span class="pl-k">namespace</span> DancingGoat<span class="pl-kos">.</span>Widgets
<span class="pl-kos">{</span>
    <span class="pl-k">public</span> <span class="pl-k">class</span> <span class="pl-smi">VideoEmbedWidgetViewComponent</span> <span class="pl-c1">:</span> <span class="pl-smi">ViewComponent</span>
    <span class="pl-kos">{</span>
        <span class="pl-c">//...</span>
    <span class="pl-kos">}</span>
<span class="pl-kos">}</span></pre></div><p dir="auto">Add a constant for the widget's identifier. This is the value that is used to connect the widget configurations saved for each instance of your widget in the database with the code that is used to render it.</p><div class="highlight highlight-source-cs notranslate position-relative overflow-auto" dir="auto"><pre><span class="pl-k">public</span> <span class="pl-k">const</span> <span class="pl-smi">string</span> <span class="pl-s1">IDENTIFIER</span> <span class="pl-c1">=</span> <span class="pl-s"><span class="pl-s">"</span>DancingGoat.VideoEmbedWidget<span class="pl-s">"</span></span><span class="pl-kos">;</span></pre></div><p dir="auto">Then add the <strong><code>RegisterWidget</code></strong> assembly attribute to this class, passing each of the following parameters.</p><ol dir="auto"><li>The identifier constant.</li><li>The type of the widget's view component.</li><li>A localization macro for the display name of the widget, which is rendered in the page builder.</li><li>The type of the widget's properties.</li><li>A localization macro for the description of the widget, which is rendered in the page builder</li><li>The CSS class of the icon which should visually represent the widget in the listing in page builder. Let's use the right-facing triangle icon, which resembles a "play" button.</li></ol><div class="highlight highlight-source-cs notranslate position-relative overflow-auto" dir="auto"><pre><span class="pl-kos">[</span>assembly<span class="pl-c1">:</span> <span class="pl-c1">RegisterWidget<span class="pl-kos">(</span>VideoEmbedWidgetViewComponent<span class="pl-kos">.</span>IDENTIFIER<span class="pl-kos">,</span> <span class="pl-k">typeof</span><span class="pl-kos">(</span><span class="pl-smi">VideoEmbedWidgetViewComponent</span><span class="pl-kos">)</span><span class="pl-kos">,</span> <span class="pl-s"><span class="pl-s">"</span>Video embed<span class="pl-s">"</span></span><span class="pl-kos">,</span> <span class="pl-k">typeof</span><span class="pl-kos">(</span><span class="pl-smi">VideoEmbedWidgetProperties</span><span class="pl-kos">)</span><span class="pl-kos">,</span> Description <span class="pl-c1">=</span> <span class="pl-s"><span class="pl-s">"</span>Embeds a video in the page.<span class="pl-s">"</span></span><span class="pl-kos">,</span> IconClass <span class="pl-c1">=</span> <span class="pl-s"><span class="pl-s">"</span>icon-triangle-right<span class="pl-s">"</span></span><span class="pl-kos">)</span></span><span class="pl-kos">]</span></pre></div><p dir="auto">The path to the widget's view can also be included in the widget registration, but in keeping with this project's conventions, we will forgo this option and handle it elsewhere.</p><p dir="auto">Add a private property for an <strong><code>IStringLocalizer</code></strong>, utilizing the SharedResources type which is included in the Dancing Goat by default, and populate it through dependency injection in the constructor.</p><div class="highlight highlight-source-cs notranslate position-relative overflow-auto" dir="auto"><pre><span class="pl-k">private</span> <span class="pl-k">readonly</span> <span class="pl-smi">IStringLocalizer</span><span class="pl-c1">&lt;</span><span class="pl-smi">SharedResources</span><span class="pl-c1">&gt;</span> <span class="pl-s1">localizer</span><span class="pl-kos">;</span>

<span class="pl-k">public</span> <span class="pl-smi">VideoEmbedWidgetViewComponent</span><span class="pl-kos">(</span>IStringLocalizer<span class="pl-c1">&lt;</span>SharedResources<span class="pl-c1">&gt;</span> localizer<span class="pl-kos">)</span>
<span class="pl-kos">{</span>
    <span class="pl-k">this</span><span class="pl-kos">.</span>localizer <span class="pl-c1">=</span> <span class="pl-s1">localizer</span><span class="pl-kos">;</span>
<span class="pl-kos">}</span></pre></div><p dir="auto">This will open up the widget to the possibility of localization for its error messages in the future.</p><p dir="auto">With this setup taken care of, we can look into the meat of the component.</p><p dir="auto">The primary method of a view component is <strong><code>Invoke</code></strong>, of the type <strong><code>IViewComponentResult</code></strong>. For a parameter, it takes a <strong><code>ComponentViewModel</code></strong> with a generic type parameter to hold the type of its properties. This can be set to the <strong><code>IWidgetProperties</code></strong> implementation defined earlier, <strong><code>VideoEmbedWidgetProperties</code></strong>.</p><div class="highlight highlight-source-cs notranslate position-relative overflow-auto" dir="auto"><pre><span class="pl-k">public</span> IViewComponentResult Invoke<span class="pl-kos">(</span><span class="pl-smi">ComponentViewModel</span><span class="pl-c1">&lt;</span><span class="pl-smi">VideoEmbedWidgetProperties</span><span class="pl-c1">&gt;</span> <span class="pl-s1">widgetProperties</span><span class="pl-kos">)</span>
<span class="pl-kos">{</span>
    <span class="pl-c">//...</span>
<span class="pl-kos">}</span></pre></div><p dir="auto">In keeping with the conventions of the other Dancing Goat widgets, this method should return a view, the path to which is passed directly to the <strong><code>View()</code></strong> method rather than through the widget registration attribute.</p><p dir="auto">We'll pass an instance of the <strong><code>VideoEmbedWidgetViewModel</code></strong> class that we created earlier as the model for this view. This view model has a <strong><code>string</code></strong> property called <strong><code>Markup</code></strong>, which holds the HTML markup of the video embed. We should add a method to supply this markup, which uses the supplied <strong><code>VideoEmbedWidgetProperties</code></strong> to generate the proper markup.</p><p dir="auto">Let's call it <strong><code>GetEmbedMarkup</code></strong>, and add a call in the Invoke method.</p><div class="highlight highlight-source-cs notranslate position-relative overflow-auto" dir="auto"><pre><span class="pl-k">public</span> IViewComponentResult Invoke<span class="pl-kos">(</span><span class="pl-smi">ComponentViewModel</span><span class="pl-c1">&lt;</span><span class="pl-smi">VideoEmbedWidgetProperties</span><span class="pl-c1">&gt;</span> <span class="pl-s1">widgetProperties</span><span class="pl-kos">)</span>
<span class="pl-kos">{</span>
    <span class="pl-smi">string</span> <span class="pl-s1">markup</span> <span class="pl-c1">=</span> GetEmbedMarkup<span class="pl-kos">(</span>widgetProperties<span class="pl-kos">.</span>Properties<span class="pl-kos">)</span><span class="pl-kos">;</span>
    <span class="pl-k">return</span> View<span class="pl-kos">(</span><span class="pl-s"><span class="pl-s">"</span>~/Components/Widgets/VideoEmbedWidget/_VideoEmbedWidget.cshtml<span class="pl-s">"</span></span><span class="pl-kos">,</span> <span class="pl-k">new</span> VideoEmbedWidgetViewModel <span class="pl-kos">{</span> <span class="pl-s1">Markup</span> <span class="pl-c1">=</span> <span class="pl-s1">markup</span> <span class="pl-kos">}</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
<span class="pl-kos">}</span></pre></div><p dir="auto">Now, with this example of how it should work, let's implement this method. It needs to take a <strong><code>VideoEmbedWidgetProperties</code></strong> object as a parameter.</p><div class="highlight highlight-source-cs notranslate position-relative overflow-auto" dir="auto"><pre><span class="pl-k">private</span> <span class="pl-smi">string</span> GetEmbedMarkup<span class="pl-kos">(</span><span class="pl-smi">VideoEmbedWidgetProperties</span> <span class="pl-s1">widgetProperties</span><span class="pl-kos">)</span>
<span class="pl-kos">{</span>
    <span class="pl-c">//...             </span>
<span class="pl-kos">}</span></pre></div><p dir="auto">Since all of this functionality hinges on embedding a video, let's first make sure the video is not null, and return a message if it is missing. Since this text will be returned as markup, it will be rendered to the page builder interface, where the editor can read it and react accordingly.</p><div class="highlight highlight-source-cs notranslate position-relative overflow-auto" dir="auto"><pre><span class="pl-k">if</span><span class="pl-kos">(</span><span class="pl-s1">widgetProperties</span> <span class="pl-c1">!=</span> <span class="pl-c1">null</span> <span class="pl-c1">&amp;&amp;</span> <span class="pl-c1">!</span><span class="pl-smi">string</span><span class="pl-kos">.</span>IsNullOrEmpty<span class="pl-kos">(</span>widgetProperties<span class="pl-kos">.</span>Url<span class="pl-kos">)</span><span class="pl-kos">)</span>
<span class="pl-kos">{</span>
    <span class="pl-c">//...</span>
<span class="pl-kos">}</span>
<span class="pl-k">return</span> localizer<span class="pl-kos">[</span><span class="pl-s"><span class="pl-s">"</span>Please make sure the URL property is filled in.<span class="pl-s">"</span></span><span class="pl-kos">]</span><span class="pl-kos">;</span>   </pre></div><p dir="auto">Now we can check which video service is selected, and create HTML markup accordingly. Let's use a <strong>switch expression</strong> to return a different method for each video service. We can use calls to methods that don't exist yet, and then go through an implement them one-at-a-time.</p><p dir="auto">Check the value of <strong><code>widgetProperties.Service</code></strong> against the various constants defined in the properties, and return a message if there are no matches.</p><div class="highlight highlight-source-cs notranslate position-relative overflow-auto" dir="auto"><pre><span class="pl-k">return</span> widgetProperties<span class="pl-kos">.</span>Service <span class="pl-k">switch</span>
<span class="pl-kos">{</span>
    VideoEmbedWidgetProperties<span class="pl-kos">.</span>YOUTUBE <span class="pl-c1">=&gt;</span> GetYoutubeMarkup<span class="pl-kos">(</span>widgetProperties<span class="pl-kos">)</span><span class="pl-kos">,</span>
    VideoEmbedWidgetProperties<span class="pl-kos">.</span>VIMEO <span class="pl-c1">=&gt;</span> GetVimeoMarkup<span class="pl-kos">(</span>widgetProperties<span class="pl-kos">)</span><span class="pl-kos">,</span>
    VideoEmbedWidgetProperties<span class="pl-kos">.</span>DAILYMOTION <span class="pl-c1">=&gt;</span> GetDailyMotionMarkup<span class="pl-kos">(</span>widgetProperties<span class="pl-kos">)</span><span class="pl-kos">,</span>
    VideoEmbedWidgetProperties<span class="pl-kos">.</span>FILE <span class="pl-c1">=&gt;</span> GetFileMarkup<span class="pl-kos">(</span>widgetProperties<span class="pl-kos">)</span><span class="pl-kos">,</span>
    _ <span class="pl-c1">=&gt;</span> localizer<span class="pl-kos">[</span><span class="pl-s"><span class="pl-s">"</span>Specified video service not found.<span class="pl-s">"</span></span><span class="pl-kos">]</span><span class="pl-kos">,</span>
<span class="pl-kos">}</span><span class="pl-kos">;</span></pre></div><p dir="auto">The resulting GetEmbedMarkup file should look like this.</p><div class="highlight highlight-source-cs notranslate position-relative overflow-auto" dir="auto"><pre><span class="pl-k">private</span> <span class="pl-smi">string</span> GetEmbedMarkup<span class="pl-kos">(</span><span class="pl-smi">VideoEmbedWidgetProperties</span> <span class="pl-s1">widgetProperties</span><span class="pl-kos">)</span>
<span class="pl-kos">{</span>
    <span class="pl-k">if</span><span class="pl-kos">(</span><span class="pl-s1">widgetProperties</span> <span class="pl-c1">!=</span> <span class="pl-c1">null</span> <span class="pl-c1">&amp;&amp;</span> <span class="pl-c1">!</span><span class="pl-smi">string</span><span class="pl-kos">.</span>IsNullOrEmpty<span class="pl-kos">(</span>widgetProperties<span class="pl-kos">.</span>Url<span class="pl-kos">)</span><span class="pl-kos">)</span>
    <span class="pl-kos">{</span>
        <span class="pl-k">return</span> widgetProperties<span class="pl-kos">.</span>Service <span class="pl-k">switch</span>
        <span class="pl-kos">{</span>
            VideoEmbedWidgetProperties<span class="pl-kos">.</span>YOUTUBE <span class="pl-c1">=&gt;</span> GetYoutubeMarkup<span class="pl-kos">(</span>widgetProperties<span class="pl-kos">)</span><span class="pl-kos">,</span>
            VideoEmbedWidgetProperties<span class="pl-kos">.</span>VIMEO <span class="pl-c1">=&gt;</span> GetVimeoMarkup<span class="pl-kos">(</span>widgetProperties<span class="pl-kos">)</span><span class="pl-kos">,</span>
            VideoEmbedWidgetProperties<span class="pl-kos">.</span>DAILYMOTION <span class="pl-c1">=&gt;</span> GetDailyMotionMarkup<span class="pl-kos">(</span>widgetProperties<span class="pl-kos">)</span><span class="pl-kos">,</span>
            VideoEmbedWidgetProperties<span class="pl-kos">.</span>FILE <span class="pl-c1">=&gt;</span> GetFileMarkup<span class="pl-kos">(</span>widgetProperties<span class="pl-kos">)</span><span class="pl-kos">,</span>
            _ <span class="pl-c1">=&gt;</span> localizer<span class="pl-kos">[</span><span class="pl-s"><span class="pl-s">"</span>Specified video service not found.<span class="pl-s">"</span></span><span class="pl-kos">]</span><span class="pl-kos">,</span>
        <span class="pl-kos">}</span><span class="pl-kos">;</span>
    <span class="pl-kos">}</span>
    <span class="pl-k">return</span> localizer<span class="pl-kos">[</span><span class="pl-s"><span class="pl-s">"</span>Please make sure the URL property is filled in.<span class="pl-s">"</span></span><span class="pl-kos">]</span><span class="pl-kos">;</span>                
<span class="pl-kos">}</span></pre></div><p dir="auto">Let's start out with the Youtube-specific method first. Create a <strong><code>string</code></strong> method called <strong><code>GetYoutubeMarkup</code></strong>, which takes a <strong><code>VideoEmbedWidgetProperties</code></strong> object as a parameter.</p><div class="highlight highlight-source-cs notranslate position-relative overflow-auto" dir="auto"><pre><span class="pl-k">private</span> <span class="pl-smi">string</span> GetYoutubeMarkup<span class="pl-kos">(</span><span class="pl-smi">VideoEmbedWidgetProperties</span> <span class="pl-s1">widgetProperties</span><span class="pl-kos">)</span>
<span class="pl-kos">{</span>
    <span class="pl-c">//...</span>
<span class="pl-kos">}</span></pre></div><p dir="auto">Start out by validating the parameters, like in the GetEmbedMarkup method. The code should not reach this point if the properties or URL is null, but it's a good practice to validate nullable parameters anyway, in case there are future changes to how the method is called.</p><div class="highlight highlight-source-cs notranslate position-relative overflow-auto" dir="auto"><pre><span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-s1">widgetProperties</span> <span class="pl-c1">!=</span> <span class="pl-c1">null</span> <span class="pl-c1">&amp;&amp;</span> <span class="pl-c1">!</span><span class="pl-smi">string</span><span class="pl-kos">.</span>IsNullOrEmpty<span class="pl-kos">(</span>widgetProperties<span class="pl-kos">.</span>Url<span class="pl-kos">)</span><span class="pl-kos">)</span>
<span class="pl-kos">{</span>
    <span class="pl-c">//...</span>
<span class="pl-kos">}</span>
<span class="pl-k">return</span> localizer<span class="pl-kos">[</span><span class="pl-s"><span class="pl-s">"</span>Please make sure the URL property is filled in.<span class="pl-s">"</span></span><span class="pl-kos">]</span><span class="pl-kos">;</span></pre></div><p dir="auto">let's add a call to a method that extracts the Youtube ID of the video from the URL, which we will implement next.</p><div class="highlight highlight-source-cs notranslate position-relative overflow-auto" dir="auto"><pre><span class="pl-smi">string</span> <span class="pl-s1">videoId</span> <span class="pl-c1">=</span> GetYoutubeId<span class="pl-kos">(</span>widgetProperties<span class="pl-kos">.</span>Url<span class="pl-kos">)</span><span class="pl-kos">;</span></pre></div><p dir="auto">Then, validate this video ID and assemble the markup if it is not empty.</p><p dir="auto">Based on whether or not the video is set to play from the beginning, we can make a query string using the <strong><code>start</code></strong> parameter.</p><p dir="auto">Then, we can drop all of our pieces into an <strong><code>iframe</code></strong>, which is configured to mirror the markup provided by the embed sharing option on Youtube itself.</p><div class="highlight highlight-source-cs notranslate position-relative overflow-auto" dir="auto"><pre><span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-c1">!</span><span class="pl-smi">string</span><span class="pl-kos">.</span>IsNullOrEmpty<span class="pl-kos">(</span>videoId<span class="pl-kos">)</span><span class="pl-kos">)</span>
<span class="pl-kos">{</span>
    <span class="pl-smi">string</span> <span class="pl-s1">query</span> <span class="pl-c1">=</span> widgetProperties<span class="pl-kos">.</span>PlayFromBeginning <span class="pl-c1">?</span> <span class="pl-smi">string</span><span class="pl-kos">.</span>Empty <span class="pl-c1">:</span> <span class="pl-s">$"</span><span class="pl-s">?start=</span><span class="pl-kos">{</span>widgetProperties<span class="pl-kos">.</span>StartingTime<span class="pl-kos">}</span><span class="pl-s">"</span><span class="pl-kos">;</span>
    <span class="pl-k">return</span> <span class="pl-s">$"</span><span class="pl-s">&lt;iframe width=</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-kos">{</span>widgetProperties<span class="pl-kos">.</span>Width<span class="pl-kos">}</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s"> height=</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-kos">{</span>widgetProperties<span class="pl-kos">.</span>Height<span class="pl-kos">}</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s"> src=</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s">https://www.youtube.com/embed/</span><span class="pl-kos">{</span>videoId<span class="pl-kos">}</span><span class="pl-kos">{</span>query<span class="pl-kos">}</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s"> title=</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s">YouTube video player</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s"> frameborder=</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s">0</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s"> allow=</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s">accelerometer;autoplay;clipboard-write;encrypted-media;gyroscope;picture-in-picture;web-share</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s"> allowfullscreen&gt;&lt;/iframe&gt;</span><span class="pl-s">"</span><span class="pl-kos">;</span>
<span class="pl-kos">}</span>
<span class="pl-k">return</span> localizer<span class="pl-kos">[</span><span class="pl-s"><span class="pl-s">"</span>Unable to parse Youtube video ID from the provided Url.<span class="pl-s">"</span></span><span class="pl-kos">]</span><span class="pl-kos">;</span></pre></div><p dir="auto">The ending result will look like this:</p><div class="highlight highlight-source-cs notranslate position-relative overflow-auto" dir="auto"><pre><span class="pl-k">private</span> <span class="pl-smi">string</span> GetYoutubeMarkup<span class="pl-kos">(</span><span class="pl-smi">VideoEmbedWidgetProperties</span> <span class="pl-s1">widgetProperties</span><span class="pl-kos">)</span>
<span class="pl-kos">{</span>
    <span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-s1">widgetProperties</span> <span class="pl-c1">!=</span> <span class="pl-c1">null</span> <span class="pl-c1">&amp;&amp;</span> <span class="pl-c1">!</span><span class="pl-smi">string</span><span class="pl-kos">.</span>IsNullOrEmpty<span class="pl-kos">(</span>widgetProperties<span class="pl-kos">.</span>Url<span class="pl-kos">)</span><span class="pl-kos">)</span>
    <span class="pl-kos">{</span>
        <span class="pl-smi">string</span> <span class="pl-s1">videoId</span> <span class="pl-c1">=</span> GetYoutubeId<span class="pl-kos">(</span>widgetProperties<span class="pl-kos">.</span>Url<span class="pl-kos">)</span><span class="pl-kos">;</span>
        <span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-c1">!</span><span class="pl-smi">string</span><span class="pl-kos">.</span>IsNullOrEmpty<span class="pl-kos">(</span>videoId<span class="pl-kos">)</span><span class="pl-kos">)</span>
        <span class="pl-kos">{</span>
            <span class="pl-smi">string</span> <span class="pl-s1">query</span> <span class="pl-c1">=</span> widgetProperties<span class="pl-kos">.</span>PlayFromBeginning <span class="pl-c1">?</span> <span class="pl-smi">string</span><span class="pl-kos">.</span>Empty <span class="pl-c1">:</span> <span class="pl-s">$"</span><span class="pl-s">?start=</span><span class="pl-kos">{</span>widgetProperties<span class="pl-kos">.</span>StartingTime<span class="pl-kos">}</span><span class="pl-s">"</span><span class="pl-kos">;</span>
            <span class="pl-k">return</span> <span class="pl-s">$"</span><span class="pl-s">&lt;iframe width=</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-kos">{</span>widgetProperties<span class="pl-kos">.</span>Width<span class="pl-kos">}</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s"> height=</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-kos">{</span>widgetProperties<span class="pl-kos">.</span>Height<span class="pl-kos">}</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s"> src=</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s">https://www.youtube.com/embed/</span><span class="pl-kos">{</span>videoId<span class="pl-kos">}</span><span class="pl-kos">{</span>query<span class="pl-kos">}</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s"> title=</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s">YouTube video player</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s"> frameborder=</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s">0</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s"> allow=</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s">accelerometer;autoplay;clipboard-write;encrypted-media;gyroscope;picture-in-picture;web-share</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s"> allowfullscreen&gt;&lt;/iframe&gt;</span><span class="pl-s">"</span><span class="pl-kos">;</span>
        <span class="pl-kos">}</span>
        <span class="pl-k">return</span> localizer<span class="pl-kos">[</span><span class="pl-s"><span class="pl-s">"</span>Unable to parse Youtube video ID from the provided Url.<span class="pl-s">"</span></span><span class="pl-kos">]</span><span class="pl-kos">;</span>
    <span class="pl-kos">}</span>
    <span class="pl-k">return</span> localizer<span class="pl-kos">[</span><span class="pl-s"><span class="pl-s">"</span>Please make sure the URL property is filled in.<span class="pl-s">"</span></span><span class="pl-kos">]</span><span class="pl-kos">;</span>
<span class="pl-kos">}</span></pre></div><p dir="auto">Moving on to the <strong><code>GetYoutubeId</code></strong> method mentioned above, it should be of the type <strong><code>string</code></strong>, and take a <strong><code>string</code></strong> parameter for the URL.</p><div class="highlight highlight-source-cs notranslate position-relative overflow-auto" dir="auto"><pre><span class="pl-k">private</span> <span class="pl-smi">string</span> GetYoutubeId<span class="pl-kos">(</span><span class="pl-smi">string</span> <span class="pl-s1">url</span><span class="pl-kos">)</span>
<span class="pl-kos">{</span>
    <span class="pl-c">//...</span>
<span class="pl-kos">}</span></pre></div><p dir="auto">Here, we have to find the video ID based on the provided Youtube URL. However, we may encounter multiple formats of Youtube URL, as we don't know where the editor using the widget is going to be copy/pasting from. For example, all of the following URLs have the same video ID, <strong><code>dQw4w9WgXcQ</code></strong>.</p><ul dir="auto"><li><a href="https://www.youtube.com/watch?v=dQw4w9WgXcQ" rel="nofollow">https://www.youtube.com/watch?v=dQw4w9WgXcQ</a></li><li><a href="http://www.youtube.com/watch?feature=player_embedded&amp;v=dQw4w9WgXcQ" rel="nofollow">http://www.youtube.com/watch?feature=player_embedded&amp;v=dQw4w9WgXcQ</a></li><li><a href="https://youtu.be/dQw4w9WgXcQ" rel="nofollow">https://youtu.be/dQw4w9WgXcQ</a></li><li><a href="http://m.youtube.com/v/dQw4w9WgXcQ" rel="nofollow">http://m.youtube.com/v/dQw4w9WgXcQ</a></li><li><a href="https://youtube.com/v/dQw4w9WgXcQ?feature=youtube_gdata_player" rel="nofollow">https://youtube.com/v/dQw4w9WgXcQ?feature=youtube_gdata_player</a></li></ul><p dir="auto">It seems that if the video URL is passed through the query string, it will reliably be sent as the <strong><code>v</code></strong> parameter. Otherwise, it will be the final part of the path, prior to a possible query string.</p><p dir="auto">To account for this, let's make two more methods-- one to pull the video ID from the query parameter, and another to get it from the end of the path. We can call the first, then if it returns no result, call the second.</p><div class="highlight highlight-source-cs notranslate position-relative overflow-auto" dir="auto"><pre><span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-c1">!</span><span class="pl-smi">string</span><span class="pl-kos">.</span>IsNullOrEmpty<span class="pl-kos">(</span>url<span class="pl-kos">)</span><span class="pl-kos">)</span>
<span class="pl-kos">{</span>
    <span class="pl-smi">string</span> <span class="pl-s1">queryId</span> <span class="pl-c1">=</span> GetIdFromQuery<span class="pl-kos">(</span>url<span class="pl-kos">,</span> <span class="pl-s"><span class="pl-s">"</span>v<span class="pl-s">"</span></span><span class="pl-kos">)</span><span class="pl-kos">;</span>
    <span class="pl-k">return</span> <span class="pl-smi">string</span><span class="pl-kos">.</span>IsNullOrEmpty<span class="pl-kos">(</span>queryId<span class="pl-kos">)</span> <span class="pl-c1">?</span> GetFinalPathComponent<span class="pl-kos">(</span>url<span class="pl-kos">)</span> <span class="pl-c1">:</span> <span class="pl-s1">queryId</span><span class="pl-kos">;</span>
<span class="pl-kos">}</span>
<span class="pl-k">return</span> <span class="pl-smi">string</span><span class="pl-kos">.</span>Empty<span class="pl-kos">;</span></pre></div><p dir="auto"><strong><code>GetIdFromQuery</code></strong> should take two <strong><code>string</code></strong> parameters-- one for the Url, and one for the name of the query parameter.</p><div class="highlight highlight-source-cs notranslate position-relative overflow-auto" dir="auto"><pre><span class="pl-k">private</span> <span class="pl-smi">string</span> GetIdFromQuery<span class="pl-kos">(</span><span class="pl-smi">string</span> <span class="pl-s1">url</span><span class="pl-kos">,</span> <span class="pl-smi">string</span> <span class="pl-s1">paramName</span><span class="pl-kos">)</span>
<span class="pl-kos">{</span>
    <span class="pl-c">//...</span>
<span class="pl-kos">}</span></pre></div><p dir="auto">Validate the parameters, and construct a <strong><code>Uri</code></strong> from the URL if they are not empty. This object has a property called <strong><code>Query</code></strong>, which can be parsed by the <strong><code>HttpUtility</code></strong> class if it is not null.</p><div class="highlight highlight-source-cs notranslate position-relative overflow-auto" dir="auto"><pre><span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-c1">!</span><span class="pl-smi">string</span><span class="pl-kos">.</span>IsNullOrEmpty<span class="pl-kos">(</span>url<span class="pl-kos">)</span> <span class="pl-c1">&amp;&amp;</span> <span class="pl-c1">!</span><span class="pl-smi">string</span><span class="pl-kos">.</span>IsNullOrEmpty<span class="pl-kos">(</span>paramName<span class="pl-kos">)</span><span class="pl-kos">)</span>
<span class="pl-kos">{</span>
    <span class="pl-smi">Uri</span> <span class="pl-s1">uri</span> <span class="pl-c1">=</span> <span class="pl-k">new</span> Uri<span class="pl-kos">(</span>url<span class="pl-kos">)</span><span class="pl-kos">;</span>
    <span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-c1">!</span><span class="pl-smi">string</span><span class="pl-kos">.</span>IsNullOrEmpty<span class="pl-kos">(</span>uri<span class="pl-kos">.</span>Query<span class="pl-kos">)</span><span class="pl-kos">)</span>
    <span class="pl-kos">{</span>
        <span class="pl-smi">var</span> <span class="pl-s1">query</span> <span class="pl-c1">=</span> HttpUtility<span class="pl-kos">.</span>ParseQueryString<span class="pl-kos">(</span>uri<span class="pl-kos">.</span>Query<span class="pl-kos">)</span><span class="pl-kos">;</span>
        <span class="pl-c">//...</span>
    <span class="pl-kos">}</span>
<span class="pl-kos">}</span>
<span class="pl-k">return</span> <span class="pl-smi">string</span><span class="pl-kos">.</span>Empty<span class="pl-kos">;</span></pre></div><p dir="auto">Finally, we can validate this parsed collection of values and extract the necessary parameter.</p><div class="highlight highlight-source-cs notranslate position-relative overflow-auto" dir="auto"><pre><span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-s1">query</span> <span class="pl-c1">!=</span> <span class="pl-c1">null</span><span class="pl-kos">)</span>
<span class="pl-kos">{</span>
    <span class="pl-k">return</span> query<span class="pl-kos">.</span>Get<span class="pl-kos">(</span>paramName<span class="pl-kos">)</span><span class="pl-kos">;</span>
<span class="pl-kos">}</span></pre></div><p dir="auto">Altogether, the method should look like this.</p><div class="highlight highlight-source-cs notranslate position-relative overflow-auto" dir="auto"><pre><span class="pl-k">private</span> <span class="pl-smi">string</span> GetIdFromQuery<span class="pl-kos">(</span><span class="pl-smi">string</span> <span class="pl-s1">url</span><span class="pl-kos">,</span> <span class="pl-smi">string</span> <span class="pl-s1">paramName</span><span class="pl-kos">)</span>
<span class="pl-kos">{</span>
    <span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-c1">!</span><span class="pl-smi">string</span><span class="pl-kos">.</span>IsNullOrEmpty<span class="pl-kos">(</span>url<span class="pl-kos">)</span> <span class="pl-c1">&amp;&amp;</span> <span class="pl-c1">!</span><span class="pl-smi">string</span><span class="pl-kos">.</span>IsNullOrEmpty<span class="pl-kos">(</span>paramName<span class="pl-kos">)</span><span class="pl-kos">)</span>
    <span class="pl-kos">{</span>
        <span class="pl-smi">Uri</span> <span class="pl-s1">uri</span> <span class="pl-c1">=</span> <span class="pl-k">new</span> Uri<span class="pl-kos">(</span>url<span class="pl-kos">)</span><span class="pl-kos">;</span>
        <span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-c1">!</span><span class="pl-smi">string</span><span class="pl-kos">.</span>IsNullOrEmpty<span class="pl-kos">(</span>uri<span class="pl-kos">.</span>Query<span class="pl-kos">)</span><span class="pl-kos">)</span>
        <span class="pl-kos">{</span>
            <span class="pl-smi">var</span> <span class="pl-s1">query</span> <span class="pl-c1">=</span> HttpUtility<span class="pl-kos">.</span>ParseQueryString<span class="pl-kos">(</span>uri<span class="pl-kos">.</span>Query<span class="pl-kos">)</span><span class="pl-kos">;</span>
            <span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-s1">query</span> <span class="pl-c1">!=</span> <span class="pl-c1">null</span><span class="pl-kos">)</span>
            <span class="pl-kos">{</span>
                <span class="pl-k">return</span> query<span class="pl-kos">.</span>Get<span class="pl-kos">(</span>paramName<span class="pl-kos">)</span><span class="pl-kos">;</span>
            <span class="pl-kos">}</span>
        <span class="pl-kos">}</span>
    <span class="pl-kos">}</span>
    <span class="pl-k">return</span> <span class="pl-smi">string</span><span class="pl-kos">.</span>Empty<span class="pl-kos">;</span>
<span class="pl-kos">}</span></pre></div><p dir="auto">The other method for finding the ID from the path only needs one parameter, the URL.</p><div class="highlight highlight-source-cs notranslate position-relative overflow-auto" dir="auto"><pre><span class="pl-k">private</span> <span class="pl-smi">string</span> GetFinalPathComponent<span class="pl-kos">(</span><span class="pl-smi">string</span> <span class="pl-s1">url</span><span class="pl-kos">)</span>
<span class="pl-kos">{</span>
    <span class="pl-c">//...</span>
<span class="pl-kos">}</span></pre></div><p dir="auto">After validating the URL, use the <strong><code>string.Split()</code></strong> method to isolate everything that comes before the query string, if there is one.</p><div class="highlight highlight-source-cs notranslate position-relative overflow-auto" dir="auto"><pre><span class="pl-k">if</span><span class="pl-kos">(</span><span class="pl-c1">!</span><span class="pl-smi">string</span><span class="pl-kos">.</span>IsNullOrEmpty<span class="pl-kos">(</span>url<span class="pl-kos">)</span><span class="pl-kos">)</span>
<span class="pl-kos">{</span>
    <span class="pl-smi">string</span> <span class="pl-s1">baseUrl</span> <span class="pl-c1">=</span> url<span class="pl-kos">.</span>Split<span class="pl-kos">(</span><span class="pl-s">'?'</span><span class="pl-kos">)</span><span class="pl-kos">[</span><span class="pl-c1">0</span><span class="pl-kos">]</span><span class="pl-kos">;</span>
    <span class="pl-c">//...</span>
<span class="pl-kos">}</span>
<span class="pl-k">return</span> <span class="pl-smi">string</span><span class="pl-kos">.</span>Empty<span class="pl-kos">;</span></pre></div><p dir="auto">Then, you can split the string again, this time on the <strong><code>'/'</code></strong> character. If the resulting array has more than 3 elements, it means that the URL contains more than just the protocol and domain, so you can return the final element of this array.</p><div class="highlight highlight-source-cs notranslate position-relative overflow-auto" dir="auto"><pre><span class="pl-smi">var</span> <span class="pl-s1">urlComponents</span> <span class="pl-c1">=</span> baseUrl<span class="pl-kos">.</span>Split<span class="pl-kos">(</span><span class="pl-s">'/'</span><span class="pl-kos">)</span><span class="pl-kos">;</span>

<span class="pl-k">if</span><span class="pl-kos">(</span>urlComponents<span class="pl-kos">.</span>Length <span class="pl-c1">&gt;</span> <span class="pl-c1">3</span><span class="pl-kos">)</span>
<span class="pl-kos">{</span>
    <span class="pl-k">return</span> urlComponents<span class="pl-kos">[</span>urlComponents<span class="pl-kos">.</span>Length <span class="pl-c1">-</span> <span class="pl-c1">1</span><span class="pl-kos">]</span><span class="pl-kos">;</span>
<span class="pl-kos">}</span></pre></div><p dir="auto">The resulting method should look like this, once all is finished.</p><div class="highlight highlight-source-cs notranslate position-relative overflow-auto" dir="auto"><pre><span class="pl-k">private</span> <span class="pl-smi">string</span> GetFinalPathComponent<span class="pl-kos">(</span><span class="pl-smi">string</span> <span class="pl-s1">url</span><span class="pl-kos">)</span>
<span class="pl-kos">{</span>
    <span class="pl-k">if</span><span class="pl-kos">(</span><span class="pl-c1">!</span><span class="pl-smi">string</span><span class="pl-kos">.</span>IsNullOrEmpty<span class="pl-kos">(</span>url<span class="pl-kos">)</span><span class="pl-kos">)</span>
    <span class="pl-kos">{</span>
        <span class="pl-smi">string</span> <span class="pl-s1">baseUrl</span> <span class="pl-c1">=</span> url<span class="pl-kos">.</span>Split<span class="pl-kos">(</span><span class="pl-s">'?'</span><span class="pl-kos">)</span><span class="pl-kos">[</span><span class="pl-c1">0</span><span class="pl-kos">]</span><span class="pl-kos">;</span>
        <span class="pl-smi">var</span> <span class="pl-s1">urlComponents</span> <span class="pl-c1">=</span> baseUrl<span class="pl-kos">.</span>Split<span class="pl-kos">(</span><span class="pl-s">'/'</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
        
        <span class="pl-k">if</span><span class="pl-kos">(</span>urlComponents<span class="pl-kos">.</span>Length <span class="pl-c1">&gt;</span> <span class="pl-c1">3</span><span class="pl-kos">)</span>
        <span class="pl-kos">{</span>
            <span class="pl-k">return</span> urlComponents<span class="pl-kos">[</span>urlComponents<span class="pl-kos">.</span>Length <span class="pl-c1">-</span> <span class="pl-c1">1</span><span class="pl-kos">]</span><span class="pl-kos">;</span>
        <span class="pl-kos">}</span>
    <span class="pl-kos">}</span>
    <span class="pl-k">return</span> <span class="pl-smi">string</span><span class="pl-kos">.</span>Empty<span class="pl-kos">;</span>
<span class="pl-kos">}</span></pre></div><p dir="auto">That should wrap up the Youtube method, so now we can move on to the next.</p><p dir="auto"><strong><code>GetVimeoMarkup</code></strong> will be similar overall, but with the addition of dynamic sizing, and no need to look for the video ID in the query string.</p><p dir="auto">Start out by validating the properties and the URL, before using the <strong><code>GetFinalPathComponent</code></strong> method to retrieve the Vimeo ID. Validate the retrieved ID as well.</p><div class="highlight highlight-source-cs notranslate position-relative overflow-auto" dir="auto"><pre><span class="pl-k">private</span> <span class="pl-smi">string</span> GetVimeoMarkup<span class="pl-kos">(</span><span class="pl-smi">VideoEmbedWidgetProperties</span> <span class="pl-s1">widgetProperties</span><span class="pl-kos">)</span>
<span class="pl-kos">{</span>
   <span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-s1">widgetProperties</span> <span class="pl-c1">!=</span> <span class="pl-c1">null</span> <span class="pl-c1">&amp;&amp;</span> <span class="pl-c1">!</span><span class="pl-smi">string</span><span class="pl-kos">.</span>IsNullOrEmpty<span class="pl-kos">(</span>widgetProperties<span class="pl-kos">.</span>Url<span class="pl-kos">)</span><span class="pl-kos">)</span>
   <span class="pl-kos">{</span>
       <span class="pl-smi">var</span> <span class="pl-s1">videoId</span> <span class="pl-c1">=</span> GetFinalPathComponent<span class="pl-kos">(</span>widgetProperties<span class="pl-kos">.</span>Url<span class="pl-kos">)</span><span class="pl-kos">;</span>
       <span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-c1">!</span><span class="pl-smi">string</span><span class="pl-kos">.</span>IsNullOrEmpty<span class="pl-kos">(</span>videoId<span class="pl-kos">)</span><span class="pl-kos">)</span>
       <span class="pl-kos">{</span>
           <span class="pl-c">//...</span>
       <span class="pl-kos">}</span>
       <span class="pl-k">return</span> localizer<span class="pl-kos">[</span><span class="pl-s"><span class="pl-s">"</span>Unable to parse Vimeo video ID from the provided Url.<span class="pl-s">"</span></span><span class="pl-kos">]</span><span class="pl-kos">;</span>
   <span class="pl-kos">}</span>
   <span class="pl-k">return</span> localizer<span class="pl-kos">[</span><span class="pl-s"><span class="pl-s">"</span>Please make sure the URL property is filled in.<span class="pl-s">"</span></span><span class="pl-kos">]</span><span class="pl-kos">;</span>
<span class="pl-kos">}</span></pre></div><p dir="auto">Vimeo's embeds use an anchor rather than a query string parameter to specify what time the video should start at, but the process of getting the anchor should be nearly identical to that of the query string in the Youtube example.</p><div class="highlight highlight-source-cs notranslate position-relative overflow-auto" dir="auto"><pre><span class="pl-smi">string</span> <span class="pl-s1">anchor</span> <span class="pl-c1">=</span> widgetProperties<span class="pl-kos">.</span>PlayFromBeginning <span class="pl-c1">?</span> <span class="pl-smi">string</span><span class="pl-kos">.</span>Empty <span class="pl-c1">:</span> <span class="pl-s">$"</span><span class="pl-s">#t=</span><span class="pl-kos">{</span>widgetProperties<span class="pl-kos">.</span>StartingTime<span class="pl-kos">}</span><span class="pl-s">s</span><span class="pl-s">"</span><span class="pl-kos">;</span></pre></div><p dir="auto">Next, we want to render different markup depending on whether the video should be sized dynamically, or with explicit width and height.</p><p dir="auto">The share embed functionality on Vimeo nests the <strong><code>iframe</code></strong> within a <strong><code>div</code></strong> with certain styles, and provides a script for adapting to the size responsively. The markup for the static sized version looks somewhat similar to Youtube.</p><div class="highlight highlight-source-cs notranslate position-relative overflow-auto" dir="auto"><pre><span class="pl-k">if</span><span class="pl-kos">(</span>widgetProperties<span class="pl-kos">.</span>DynamicSize<span class="pl-kos">)</span>
<span class="pl-kos">{</span>
    
    <span class="pl-k">return</span> <span class="pl-s">$"</span><span class="pl-s">&lt;div style=</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s">padding: 56.25% 0 0 0;position:relative;</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s">&gt;&lt;iframe src=</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s">https://player.vimeo.com/video/</span><span class="pl-kos">{</span>videoId<span class="pl-kos">}</span><span class="pl-kos">{</span>anchor<span class="pl-kos">}</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s"> style=</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s">position:absolute;top:0;left:0;width:100%;height:100%;</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s"> frameborder=</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s">0</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s"> allow=</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s">autoplay; fullscreen; picture-in-picture</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s"> allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;script src=</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s">https://player.vimeo.com/api/player.js</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s">&gt;&lt;/script&gt;</span><span class="pl-s">"</span><span class="pl-kos">;</span>
<span class="pl-kos">}</span>
<span class="pl-k">else</span>
<span class="pl-kos">{</span>
    <span class="pl-k">return</span> <span class="pl-s">$"</span><span class="pl-s">&lt;iframe src=</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s">https://player.vimeo.com/video/</span><span class="pl-kos">{</span>videoId<span class="pl-kos">}</span><span class="pl-kos">{</span>anchor<span class="pl-kos">}</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s"> width=</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-kos">{</span>widgetProperties<span class="pl-kos">.</span>Width<span class="pl-kos">}</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s"> height=</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-kos">{</span>widgetProperties<span class="pl-kos">.</span>Height<span class="pl-kos">}</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s"> frameborder=</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s">0</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s"> allow=</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s">autoplay; fullscreen; picture-in-picture</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s"> allowfullscreen &gt;&lt;/iframe &gt;</span><span class="pl-s">"</span><span class="pl-kos">;</span>
<span class="pl-kos">}</span></pre></div><p dir="auto">The completed <strong><code>GetVimeoMarkup</code></strong> method should look like this.</p><div class="highlight highlight-source-cs notranslate position-relative overflow-auto" dir="auto"><pre><span class="pl-k">private</span> <span class="pl-smi">string</span> GetVimeoMarkup<span class="pl-kos">(</span><span class="pl-smi">VideoEmbedWidgetProperties</span> <span class="pl-s1">widgetProperties</span><span class="pl-kos">)</span>
<span class="pl-kos">{</span>
    <span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-s1">widgetProperties</span> <span class="pl-c1">!=</span> <span class="pl-c1">null</span> <span class="pl-c1">&amp;&amp;</span> <span class="pl-c1">!</span><span class="pl-smi">string</span><span class="pl-kos">.</span>IsNullOrEmpty<span class="pl-kos">(</span>widgetProperties<span class="pl-kos">.</span>Url<span class="pl-kos">)</span><span class="pl-kos">)</span>
    <span class="pl-kos">{</span>
        <span class="pl-smi">var</span> <span class="pl-s1">videoId</span> <span class="pl-c1">=</span> GetFinalPathComponent<span class="pl-kos">(</span>widgetProperties<span class="pl-kos">.</span>Url<span class="pl-kos">)</span><span class="pl-kos">;</span>
        <span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-c1">!</span><span class="pl-smi">string</span><span class="pl-kos">.</span>IsNullOrEmpty<span class="pl-kos">(</span>videoId<span class="pl-kos">)</span><span class="pl-kos">)</span>
        <span class="pl-kos">{</span>
            <span class="pl-smi">string</span> <span class="pl-s1">anchor</span> <span class="pl-c1">=</span> widgetProperties<span class="pl-kos">.</span>PlayFromBeginning <span class="pl-c1">?</span> <span class="pl-smi">string</span><span class="pl-kos">.</span>Empty <span class="pl-c1">:</span> <span class="pl-s">$"</span><span class="pl-s">#t=</span><span class="pl-kos">{</span>widgetProperties<span class="pl-kos">.</span>StartingTime<span class="pl-kos">}</span><span class="pl-s">s</span><span class="pl-s">"</span><span class="pl-kos">;</span>
            <span class="pl-k">if</span><span class="pl-kos">(</span>widgetProperties<span class="pl-kos">.</span>DynamicSize<span class="pl-kos">)</span>
            <span class="pl-kos">{</span>
                
                <span class="pl-k">return</span> <span class="pl-s">$"</span><span class="pl-s">&lt;div style=</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s">padding: 56.25% 0 0 0;position:relative;</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s">&gt;&lt;iframe src=</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s">https://player.vimeo.com/video/</span><span class="pl-kos">{</span>videoId<span class="pl-kos">}</span><span class="pl-kos">{</span>anchor<span class="pl-kos">}</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s"> style=</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s">position:absolute;top:0;left:0;width:100%;height:100%;</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s"> frameborder=</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s">0</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s"> allow=</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s">autoplay; fullscreen; picture-in-picture</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s"> allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;script src=</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s">https://player.vimeo.com/api/player.js</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s">&gt;&lt;/script&gt;</span><span class="pl-s">"</span><span class="pl-kos">;</span>
            <span class="pl-kos">}</span>
            <span class="pl-k">else</span>
            <span class="pl-kos">{</span>
                <span class="pl-k">return</span> <span class="pl-s">$"</span><span class="pl-s">&lt;iframe src=</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s">https://player.vimeo.com/video/</span><span class="pl-kos">{</span>videoId<span class="pl-kos">}</span><span class="pl-kos">{</span>anchor<span class="pl-kos">}</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s"> width=</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-kos">{</span>widgetProperties<span class="pl-kos">.</span>Width<span class="pl-kos">}</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s"> height=</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-kos">{</span>widgetProperties<span class="pl-kos">.</span>Height<span class="pl-kos">}</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s"> frameborder=</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s">0</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s"> allow=</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s">autoplay; fullscreen; picture-in-picture</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s"> allowfullscreen &gt;&lt;/iframe &gt;</span><span class="pl-s">"</span><span class="pl-kos">;</span>
            <span class="pl-kos">}</span>
        <span class="pl-kos">}</span>
        <span class="pl-k">return</span> localizer<span class="pl-kos">[</span><span class="pl-s"><span class="pl-s">"</span>Unable to parse Vimeo video ID from the provided Url.<span class="pl-s">"</span></span><span class="pl-kos">]</span><span class="pl-kos">;</span>
    <span class="pl-kos">}</span>
    <span class="pl-k">return</span> localizer<span class="pl-kos">[</span><span class="pl-s"><span class="pl-s">"</span>Please make sure the URL property is filled in.<span class="pl-s">"</span></span><span class="pl-kos">]</span><span class="pl-kos">;</span>
<span class="pl-kos">}</span></pre></div><p dir="auto">Continuing down the switch statement in <strong><code>GetEmbedMarkup</code></strong>, we have GetDailyMotionMarkup next, which is nearly identical to the Vimeo method, except that it has no functionality for starting the video partway through or special script. At this point, I think you should be able to make sense of it all.</p><div class="highlight highlight-source-cs notranslate position-relative overflow-auto" dir="auto"><pre>        <span class="pl-k">private</span> <span class="pl-smi">string</span> GetDailyMotionMarkup<span class="pl-kos">(</span><span class="pl-smi">VideoEmbedWidgetProperties</span> <span class="pl-s1">widgetProperties</span><span class="pl-kos">)</span>
        <span class="pl-kos">{</span>
            <span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-s1">widgetProperties</span> <span class="pl-c1">!=</span> <span class="pl-c1">null</span> <span class="pl-c1">&amp;&amp;</span> <span class="pl-c1">!</span><span class="pl-smi">string</span><span class="pl-kos">.</span>IsNullOrEmpty<span class="pl-kos">(</span>widgetProperties<span class="pl-kos">.</span>Url<span class="pl-kos">)</span><span class="pl-kos">)</span>
            <span class="pl-kos">{</span>
                <span class="pl-smi">var</span> <span class="pl-s1">videoId</span> <span class="pl-c1">=</span> GetFinalPathComponent<span class="pl-kos">(</span>widgetProperties<span class="pl-kos">.</span>Url<span class="pl-kos">)</span><span class="pl-kos">;</span>
                <span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-c1">!</span><span class="pl-smi">string</span><span class="pl-kos">.</span>IsNullOrEmpty<span class="pl-kos">(</span>videoId<span class="pl-kos">)</span><span class="pl-kos">)</span>
                <span class="pl-kos">{</span>
                    <span class="pl-k">if</span> <span class="pl-kos">(</span>widgetProperties<span class="pl-kos">.</span>DynamicSize<span class="pl-kos">)</span>
                    <span class="pl-kos">{</span>
                        <span class="pl-k">return</span> <span class="pl-s">$"</span><span class="pl-s">&lt;div style=</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s">position:relative;padding-bottom:56.25%;height:0;overflow:hidden;</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s">&gt; &lt;iframe style=</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s">width:100%;height:100%;position:absolute;left:0px;top:0px;overflow:hidden</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s"> frameborder=</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s">0</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s"> type=</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s">text/html</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s"> src=</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s">https://www.dailymotion.com/embed/video/</span><span class="pl-kos">{</span>videoId<span class="pl-kos">}</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s"> width=</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s">100%</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s"> height=</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s">100%</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s"> allowfullscreen title=</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s">Dailymotion Video Player</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s"> allow=</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s">autoplay</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s">&gt;&lt;/iframe&gt;&lt;/div&gt;</span><span class="pl-s">"</span><span class="pl-kos">;</span>
                    <span class="pl-kos">}</span>
                    <span class="pl-k">else</span>
                    <span class="pl-kos">{</span>
                        <span class="pl-k">return</span> <span class="pl-s">$"</span><span class="pl-s">&lt;iframe src=</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s">https://www.dailymotion.com/embed/video/</span><span class="pl-kos">{</span>videoId<span class="pl-kos">}</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s"> width=</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-kos">{</span>widgetProperties<span class="pl-kos">.</span>Width<span class="pl-kos">}</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s"> height=</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-kos">{</span>widgetProperties<span class="pl-kos">.</span>Height<span class="pl-kos">}</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s"> frameborder=</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s">0</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s"> type=</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s">text/html</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s"> allowfullscreen title=</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s">Dailymotion Video Player</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s">&gt;&lt;/iframe&gt;</span><span class="pl-s">"</span><span class="pl-kos">;</span>
                    <span class="pl-kos">}</span>
                <span class="pl-kos">}</span>
                <span class="pl-k">return</span> localizer<span class="pl-kos">[</span><span class="pl-s"><span class="pl-s">"</span>Unable to parse Dailymotion video ID from the provided Url.<span class="pl-s">"</span></span><span class="pl-kos">]</span><span class="pl-kos">;</span>
            <span class="pl-kos">}</span>
            <span class="pl-k">return</span> localizer<span class="pl-kos">[</span><span class="pl-s"><span class="pl-s">"</span>Please make sure the URL property is filled in.<span class="pl-s">"</span></span><span class="pl-kos">]</span><span class="pl-kos">;</span>
        <span class="pl-kos">}</span></pre></div><p dir="auto">The last of the Markup methods is <strong><code>GetFileMarkup</code></strong>. It will start out similarly to the others.</p><div class="highlight highlight-source-cs notranslate position-relative overflow-auto" dir="auto"><pre><span class="pl-k">private</span> <span class="pl-smi">string</span> GetFileMarkup<span class="pl-kos">(</span><span class="pl-smi">VideoEmbedWidgetProperties</span> <span class="pl-s1">widgetProperties</span><span class="pl-kos">)</span>
<span class="pl-kos">{</span>
    <span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-s1">widgetProperties</span> <span class="pl-c1">!=</span> <span class="pl-c1">null</span> <span class="pl-c1">&amp;&amp;</span> <span class="pl-c1">!</span><span class="pl-smi">string</span><span class="pl-kos">.</span>IsNullOrEmpty<span class="pl-kos">(</span>widgetProperties<span class="pl-kos">.</span>Url<span class="pl-kos">)</span><span class="pl-kos">)</span>
    <span class="pl-kos">{</span>
        <span class="pl-c">//...</span>
    <span class="pl-kos">}</span>
    <span class="pl-k">return</span> localizer<span class="pl-kos">[</span><span class="pl-s"><span class="pl-s">"</span>Please make sure the URL property is filled in.<span class="pl-s">"</span></span><span class="pl-kos">]</span><span class="pl-kos">;</span>
<span class="pl-kos">}</span></pre></div><p dir="auto">However, this final method introduces a new requirement- The <strong><code>&lt;video&gt;</code></strong> tag in Html utilizes an attribute called <strong><code>type</code></strong> which is typically set to values such as <strong><code>"video/mp4"</code></strong> or <strong><code>"video/ogg"</code></strong>. In order to populate this attribute, we'll need to find the file extension of the provided video.</p><p dir="auto">Let's add a call to a new method, <strong><code>GetFileExtension</code></strong>, and validate its result.</p><div class="highlight highlight-source-cs notranslate position-relative overflow-auto" dir="auto"><pre><span class="pl-smi">string</span> <span class="pl-s1">extension</span> <span class="pl-c1">=</span> GetFileExtension<span class="pl-kos">(</span>widgetProperties<span class="pl-kos">.</span>Url<span class="pl-kos">)</span><span class="pl-kos">;</span>
<span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-c1">!</span><span class="pl-smi">string</span><span class="pl-kos">.</span>IsNullOrEmpty<span class="pl-kos">(</span>extension<span class="pl-kos">)</span><span class="pl-kos">)</span>
<span class="pl-kos">{</span>
    <span class="pl-c">//...</span>
<span class="pl-kos">}</span>
<span class="pl-k">return</span> localizer<span class="pl-kos">[</span><span class="pl-s"><span class="pl-s">"</span>Unable to parse file extension from the provided Url.<span class="pl-s">"</span></span><span class="pl-kos">]</span><span class="pl-kos">;</span></pre></div><p dir="auto">The video tag supports starting times set through an anchor tag on the URL, similar to Vimeo.</p><div class="highlight highlight-source-cs notranslate position-relative overflow-auto" dir="auto"><pre><span class="pl-smi">string</span> <span class="pl-s1">anchor</span> <span class="pl-c1">=</span> widgetProperties<span class="pl-kos">.</span>PlayFromBeginning <span class="pl-c1">?</span> <span class="pl-smi">string</span><span class="pl-kos">.</span>Empty <span class="pl-c1">:</span> <span class="pl-s">$"</span><span class="pl-s">#t=</span><span class="pl-kos">{</span>widgetProperties<span class="pl-kos">.</span>StartingTime<span class="pl-kos">}</span><span class="pl-s">"</span><span class="pl-kos">;</span></pre></div><p dir="auto">Lastly, we can return a different video tag that uses either the <strong><code>style</code></strong> or <strong><code>width</code></strong>/<strong><code>height</code></strong> attributes to set its size, depending on whether the properties indicate that it should be sized dynamically.</p><div class="highlight highlight-source-cs notranslate position-relative overflow-auto" dir="auto"><pre><span class="pl-k">if</span> <span class="pl-kos">(</span>widgetProperties<span class="pl-kos">.</span>DynamicSize<span class="pl-kos">)</span>
<span class="pl-kos">{</span>
    <span class="pl-k">return</span> <span class="pl-s">$"</span><span class="pl-s">&lt;video style=</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s">width:100%;</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s"> controls&gt;&lt;source src=</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-kos">{</span>widgetProperties<span class="pl-kos">.</span>Url<span class="pl-kos">}</span><span class="pl-kos">{</span>anchor<span class="pl-kos">}</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s"> type=</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s">video/</span><span class="pl-kos">{</span>extension<span class="pl-kos">}</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s">&gt;&lt;/video&gt;</span><span class="pl-s">"</span><span class="pl-kos">;</span>
<span class="pl-kos">}</span>
<span class="pl-k">else</span>
<span class="pl-kos">{</span>
    <span class="pl-k">return</span> <span class="pl-s">$"</span><span class="pl-s">&lt;video width=</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-kos">{</span>widgetProperties<span class="pl-kos">.</span>Width<span class="pl-kos">}</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s"> height=</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-kos">{</span>widgetProperties<span class="pl-kos">.</span>Height<span class="pl-kos">}</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s"> controls&gt;&lt;source src=</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-kos">{</span>widgetProperties<span class="pl-kos">.</span>Url<span class="pl-kos">}</span><span class="pl-kos">{</span>anchor<span class="pl-kos">}</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s"> type=</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s">video/</span><span class="pl-kos">{</span>extension<span class="pl-kos">}</span><span class="pl-s"><span class="pl-k">\"</span></span><span class="pl-s">&gt;&lt;/video&gt;</span><span class="pl-s">"</span><span class="pl-kos">;</span>
<span class="pl-kos">}</span></pre></div><p dir="auto">Now all that's left is to implement the GetFileExtension method. This method should take a URL like <code>https://www.mywebsite.com/files/videofile.mp4</code> and isolate the <strong><code>.mp4</code></strong> at the end.</p><p dir="auto">Take the URL as a parameter, and set the return type to <strong><code>string</code></strong>.</p><div class="highlight highlight-source-cs notranslate position-relative overflow-auto" dir="auto"><pre><span class="pl-k">private</span> <span class="pl-smi">string</span> GetFileExtension<span class="pl-kos">(</span><span class="pl-smi">string</span> <span class="pl-s1">url</span><span class="pl-kos">)</span>
<span class="pl-kos">{</span>
    <span class="pl-c">//...</span>
<span class="pl-kos">}</span></pre></div><p dir="auto">After validating the URL, use the <strong><code>GetFinalPathComponent</code></strong> method from earlier to get what comes after the last slash in the path.</p><div class="highlight highlight-source-cs notranslate position-relative overflow-auto" dir="auto"><pre><span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-c1">!</span><span class="pl-smi">string</span><span class="pl-kos">.</span>IsNullOrEmpty<span class="pl-kos">(</span>url<span class="pl-kos">)</span><span class="pl-kos">)</span>
<span class="pl-kos">{</span>
    <span class="pl-smi">string</span> <span class="pl-s1">finalComponent</span> <span class="pl-c1">=</span> GetFinalPathComponent<span class="pl-kos">(</span>url<span class="pl-kos">)</span><span class="pl-kos">;</span>
    <span class="pl-c">//...</span>
<span class="pl-kos">}</span>
<span class="pl-k">return</span> <span class="pl-smi">string</span><span class="pl-kos">.</span>Empty<span class="pl-kos">;</span></pre></div><p dir="auto">Split this string on the <strong><code>'.'</code></strong> character, and if the resulting array has more than one element, return the final one as the file extension.</p><div class="highlight highlight-source-cs notranslate position-relative overflow-auto" dir="auto"><pre><span class="pl-smi">string</span><span class="pl-kos">[</span><span class="pl-kos">]</span> <span class="pl-s1">parts</span> <span class="pl-c1">=</span> finalComponent<span class="pl-kos">.</span>Split<span class="pl-kos">(</span><span class="pl-s">'.'</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
<span class="pl-k">if</span> <span class="pl-kos">(</span>parts<span class="pl-kos">.</span>Length <span class="pl-c1">&gt;</span> <span class="pl-c1">1</span><span class="pl-kos">)</span>
<span class="pl-kos">{</span>
    <span class="pl-k">return</span> parts<span class="pl-kos">[</span>parts<span class="pl-kos">.</span>Length <span class="pl-c1">-</span> <span class="pl-c1">1</span><span class="pl-kos">]</span><span class="pl-kos">;</span>
<span class="pl-kos">}</span></pre></div><p dir="auto">The resulting method should look like this.</p><div class="highlight highlight-source-cs notranslate position-relative overflow-auto" dir="auto"><pre><span class="pl-k">private</span> <span class="pl-smi">string</span> GetFileExtension<span class="pl-kos">(</span><span class="pl-smi">string</span> <span class="pl-s1">url</span><span class="pl-kos">)</span>
<span class="pl-kos">{</span>
    <span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-c1">!</span><span class="pl-smi">string</span><span class="pl-kos">.</span>IsNullOrEmpty<span class="pl-kos">(</span>url<span class="pl-kos">)</span><span class="pl-kos">)</span>
    <span class="pl-kos">{</span>
        <span class="pl-smi">string</span> <span class="pl-s1">finalComponent</span> <span class="pl-c1">=</span> GetFinalPathComponent<span class="pl-kos">(</span>url<span class="pl-kos">)</span><span class="pl-kos">;</span>
        <span class="pl-smi">string</span><span class="pl-kos">[</span><span class="pl-kos">]</span> <span class="pl-s1">parts</span> <span class="pl-c1">=</span> finalComponent<span class="pl-kos">.</span>Split<span class="pl-kos">(</span><span class="pl-s">'.'</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
        <span class="pl-k">if</span> <span class="pl-kos">(</span>parts<span class="pl-kos">.</span>Length <span class="pl-c1">&gt;</span> <span class="pl-c1">1</span><span class="pl-kos">)</span>
        <span class="pl-kos">{</span>
            <span class="pl-k">return</span> parts<span class="pl-kos">[</span>parts<span class="pl-kos">.</span>Length <span class="pl-c1">-</span> <span class="pl-c1">1</span><span class="pl-kos">]</span><span class="pl-kos">;</span>
        <span class="pl-kos">}</span>
    <span class="pl-kos">}</span>
    <span class="pl-k">return</span> <span class="pl-smi">string</span><span class="pl-kos">.</span>Empty<span class="pl-kos">;</span>
<span class="pl-kos">}</span></pre></div><h2 dir="auto">More advanced visibility scenarios</h2><p dir="auto">You may have noticed that the properties that specify explicit dimensions for the video are still always visible. This is because the logic that should determine whether they are displayed is a bit more complicated.</p><p dir="auto">They should always be displayed when the selected service is Youtube, but only when the checkbox for dynamic size is not enabled for any other service. Logically, it should look something like this:</p><p dir="auto"><code>(Service is Youtube) OR (DynamicSize is disabled)</code></p><p dir="auto">or alternatively,</p><p dir="auto"><code>NOT((Service is not youtube) AND (Dynamic size is enabled))</code></p><p dir="auto">With stacked visibility conditions, the field will only display when both of them are true. And since there's no way to negate the entire combination, we have to find an alternate way to evaluate a more complex boolean condition.</p><p dir="auto">A <a href="https://docs.xperience.io/xp/developers-and-admins/customization/extend-the-administration-interface/ui-form-components/ui-form-component-visibility-conditions#UIformcomponentvisibilityconditions-Visibilityconditionswithfielddependencies" rel="nofollow">custom visibility condition</a> also does not quite cut it for this scenario. While they allow for more complex logic, they can only access the value of the property to which they are applied, and a single other property.</p><p dir="auto">A complicating factor to adding this logic is that visibility conditions must depend on properties that are rendered in the properties form. We can't rely on the value of a <strong><code>get</code></strong> accessor for a property that does not have an editing component, or which is currently hidden.</p><p dir="auto">However, if we can get a field that technically renders without actually displaying anything, we can use it's <strong><code>get</code></strong> accessor however we please, without worrying about its value becoming inaccessible due to a visibility condition change.</p><p dir="auto">So in order to accomplish this end, let's create an invisible form component.</p><h3 dir="auto"><strong>Invisible component in C#</strong></h3><p dir="auto">If you're using C# components in your widget, follow along with this section. If not, move on to <a href="https://github.com/kentico-matthews/Custom.XperienceByKentico.VideoEmbedWidget/blob/master/ArticleMarkdown.md#invisible-component-in-react">Invisible component in React</a></p><p dir="auto">Under the <strong>~/Components</strong> folder in the solution, add a folder called <strong>FormComponents</strong>, then a folder called <strong>InvisibleComponent</strong> within it. This will be the directory for our invisible component.</p><p dir="auto">Create a new class called <strong><code>InvisibleProperties</code></strong> in the <strong><code>DancingGoat.FormComponents</code></strong> namespace, extending <strong><code>FormComponentProperties&lt;bool&gt;</code></strong>. You'll need using directives for <strong><code>CMS.DataEngine</code></strong> and <strong><code>Kentico.Forms.Web.Mvc</code></strong>.</p><div class="highlight highlight-source-cs notranslate position-relative overflow-auto" dir="auto"><pre><span class="pl-k">using</span> CMS<span class="pl-kos">.</span>DataEngine<span class="pl-kos">;</span>
<span class="pl-k">using</span> Kentico<span class="pl-kos">.</span>Forms<span class="pl-kos">.</span>Web<span class="pl-kos">.</span>Mvc<span class="pl-kos">;</span>

<span class="pl-k">namespace</span> DancingGoat<span class="pl-kos">.</span>FormComponents
<span class="pl-kos">{</span>
    <span class="pl-k">public</span> <span class="pl-k">class</span> <span class="pl-smi">InvisibleProperties</span> <span class="pl-c1">:</span> <span class="pl-smi">FormComponentProperties</span><span class="pl-c1">&lt;</span><span class="pl-smi">bool</span><span class="pl-c1">&gt;</span>
    <span class="pl-kos">{</span>
        <span class="pl-c">//...</span>
    <span class="pl-kos">}</span>
<span class="pl-kos">}</span></pre></div><p dir="auto">Passing a <strong><code>bool</code></strong> to the generic type of <strong><code>FormComponentProperties</code></strong> allows this editing component to apply to be used on boolean properties.</p><p dir="auto">Next, call the constructor of the base class, specifying the Boolean data type for the field.</p><div class="highlight highlight-source-cs notranslate position-relative overflow-auto" dir="auto"><pre><span class="pl-k">public</span> InvisibleProperties<span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-c1">:</span> <span class="pl-k">base</span><span class="pl-kos">(</span>FieldDataType<span class="pl-kos">.</span>Boolean<span class="pl-kos">)</span>
<span class="pl-kos">{</span>
<span class="pl-kos">}</span></pre></div><p dir="auto">Override the <strong><code>DefaultValue</code></strong> and <strong><code>Label</code></strong> properties, adjusting the latter so that its <strong><code>get</code></strong> accessor always returns an empty string.</p><div class="highlight highlight-source-cs notranslate position-relative overflow-auto" dir="auto"><pre><span class="pl-k">public</span> <span class="pl-k">override</span> <span class="pl-smi">bool</span> <span class="pl-s1">DefaultValue</span> <span class="pl-kos">{</span> get<span class="pl-kos">;</span> set<span class="pl-kos">;</span> <span class="pl-kos">}</span>

<span class="pl-k">public</span> <span class="pl-k">override</span> <span class="pl-smi">string</span> <span class="pl-s1">Label</span> <span class="pl-kos">{</span> <span class="pl-s1">get <span class="pl-c1">=&gt;</span> <span class="pl-smi">string</span><span class="pl-kos">.</span>Empty</span><span class="pl-kos">;</span> <span class="pl-s1">set <span class="pl-c1">=&gt;</span> <span class="pl-k">base</span><span class="pl-kos">.</span>Label <span class="pl-c1">=</span> <span class="pl-s1">value</span></span><span class="pl-kos">;</span> <span class="pl-kos">}</span></pre></div><p dir="auto">The finished properties class should look like this.</p><div class="highlight highlight-source-cs notranslate position-relative overflow-auto" dir="auto"><pre><span class="pl-k">using</span> CMS<span class="pl-kos">.</span>DataEngine<span class="pl-kos">;</span>
<span class="pl-k">using</span> Kentico<span class="pl-kos">.</span>Forms<span class="pl-kos">.</span>Web<span class="pl-kos">.</span>Mvc<span class="pl-kos">;</span>

<span class="pl-k">namespace</span> DancingGoat<span class="pl-kos">.</span>FormComponents
<span class="pl-kos">{</span>
    <span class="pl-k">public</span> <span class="pl-k">class</span> <span class="pl-smi">InvisibleProperties</span> <span class="pl-c1">:</span> <span class="pl-smi">FormComponentProperties</span><span class="pl-c1">&lt;</span><span class="pl-smi">bool</span><span class="pl-c1">&gt;</span>
    <span class="pl-kos">{</span>
        <span class="pl-k">public</span> <span class="pl-v">InvisibleProperties</span><span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-c1">:</span> <span class="pl-k">base</span><span class="pl-kos">(</span>FieldDataType<span class="pl-kos">.</span>Boolean<span class="pl-kos">)</span>
        <span class="pl-kos">{</span>
        <span class="pl-kos">}</span>


        <span class="pl-k">public</span> <span class="pl-k">override</span> <span class="pl-smi">bool</span> <span class="pl-s1">DefaultValue</span> <span class="pl-kos">{</span> <span class="pl-k">get</span><span class="pl-kos">;</span> <span class="pl-k">set</span><span class="pl-kos">;</span> <span class="pl-kos">}</span>


        <span class="pl-k">public</span> <span class="pl-k">override</span> <span class="pl-smi">string</span> <span class="pl-s1">Label</span> <span class="pl-kos">{</span> <span class="pl-k">get</span> <span class="pl-c1">=&gt;</span> <span class="pl-smi">string</span><span class="pl-kos">.</span>Empty<span class="pl-kos">;</span> <span class="pl-k">set</span> <span class="pl-c1">=&gt;</span> <span class="pl-k">base</span><span class="pl-kos">.</span>Label <span class="pl-c1">=</span> <span class="pl-s1">value</span><span class="pl-kos">;</span> <span class="pl-kos">}</span>
    <span class="pl-kos">}</span>
<span class="pl-kos">}</span></pre></div><p dir="auto">Next, add a completely blank file called <strong><code>_Invisible.cshtml</code></strong> to the same folder.</p><p dir="auto">Lastly, add a final file called <strong>InvisibleFormComponent.cs</strong>. Give it the following <strong><code>using</code></strong> directives.</p><div class="snippet-clipboard-content notranslate position-relative overflow-auto"><pre class="notranslate"><code>using Kentico.Forms.Web.Mvc;
using DancingGoat.FormComponents;
</code></pre></div><p dir="auto">Use the <strong><code>namespace DancingGoat.FormComponents</code></strong> and have the class inherit from <strong><code>FormComponent&lt;InvisibleProperties,bool&gt;</code></strong>. This ensures that the component is applicable to a boolean property, and utilizes the previously defined properties.</p><div class="highlight highlight-source-cs notranslate position-relative overflow-auto" dir="auto"><pre><span class="pl-k">namespace</span> DancingGoat<span class="pl-kos">.</span>FormComponents
<span class="pl-kos">{</span>
    <span class="pl-k">public</span> <span class="pl-k">class</span> <span class="pl-smi">InvisibleFormComponent</span> <span class="pl-c1">:</span> <span class="pl-smi">FormComponent</span><span class="pl-c1">&lt;</span><span class="pl-smi">InvisibleProperties</span><span class="pl-kos">,</span><span class="pl-smi">bool</span><span class="pl-c1">&gt;</span>
    <span class="pl-kos">{</span>
        <span class="pl-c">//...</span>
    <span class="pl-kos">}</span>
<span class="pl-kos">}</span></pre></div><p dir="auto">Add constants for the identifier and name of the component.</p><div class="highlight highlight-source-cs notranslate position-relative overflow-auto" dir="auto"><pre><span class="pl-k">public</span> <span class="pl-k">const</span> <span class="pl-smi">string</span> <span class="pl-s1">IDENTIFIER</span> <span class="pl-c1">=</span> <span class="pl-s"><span class="pl-s">"</span>Custom.InvisibleComponent<span class="pl-s">"</span></span><span class="pl-kos">;</span>
<span class="pl-k">public</span> <span class="pl-k">const</span> <span class="pl-smi">string</span> <span class="pl-s1">NAME</span> <span class="pl-c1">=</span> <span class="pl-s"><span class="pl-s">"</span>InvisibleComponent<span class="pl-s">"</span></span><span class="pl-kos">;</span></pre></div><p dir="auto">Using these new constants we can add the <strong><code>RegisterFormComponent</code></strong> assembly attribute to register the editing component. Place the attribute above the namespace declaration.</p><div class="highlight highlight-source-cs notranslate position-relative overflow-auto" dir="auto"><pre><span class="pl-kos">[</span>assembly<span class="pl-c1">:</span> <span class="pl-c1">RegisterFormComponent<span class="pl-kos">(</span>InvisibleFormComponent<span class="pl-kos">.</span>IDENTIFIER<span class="pl-kos">,</span> <span class="pl-k">typeof</span><span class="pl-kos">(</span><span class="pl-smi">InvisibleFormComponent</span><span class="pl-kos">)</span><span class="pl-kos">,</span> InvisibleFormComponent<span class="pl-kos">.</span>NAME<span class="pl-kos">,</span> ViewName <span class="pl-c1">=</span> <span class="pl-s"><span class="pl-s">"</span>~/Components/FormComponents/InvisibleComponent/_Invisible.cshtml<span class="pl-s">"</span></span><span class="pl-kos">,</span> IsAvailableInFormBuilderEditor <span class="pl-c1">=</span> <span class="pl-c1">false</span><span class="pl-kos">)</span></span><span class="pl-kos">]</span></pre></div><p dir="auto">Getting back to the class, we can add a property to hold the value, and use it to override the required abstract methods <strong><code>GetValue</code></strong> and <strong><code>SetValue</code></strong>. This allows the component to react to changes in the value of its property, enabling the visibility conditions to work properly.</p><div class="highlight highlight-source-cs notranslate position-relative overflow-auto" dir="auto"><pre><span class="pl-k">public</span> <span class="pl-smi">bool</span> <span class="pl-s1">Value</span> <span class="pl-kos">{</span> get<span class="pl-kos">;</span> set<span class="pl-kos">;</span> <span class="pl-kos">}</span>


<span class="pl-k">public</span> <span class="pl-k">override</span> <span class="pl-smi">bool</span> GetValue<span class="pl-kos">(</span><span class="pl-kos">)</span>
<span class="pl-kos">{</span>
    <span class="pl-k">return</span> <span class="pl-s1">Value</span><span class="pl-kos">;</span>
<span class="pl-kos">}</span>


<span class="pl-k">public</span> <span class="pl-k">override</span> <span class="pl-smi">void</span> SetValue<span class="pl-kos">(</span><span class="pl-smi">bool</span> <span class="pl-s1">value</span><span class="pl-kos">)</span>
<span class="pl-kos">{</span>
    <span class="pl-s1">Value</span> <span class="pl-c1">=</span> <span class="pl-s1">value</span><span class="pl-kos">;</span>
<span class="pl-kos">}</span></pre></div><p dir="auto">The finished component class should look like this.</p><div class="highlight highlight-source-cs notranslate position-relative overflow-auto" dir="auto"><pre><span class="pl-k">using</span> Kentico<span class="pl-kos">.</span>Forms<span class="pl-kos">.</span>Web<span class="pl-kos">.</span>Mvc<span class="pl-kos">;</span>
<span class="pl-k">using</span> DancingGoat<span class="pl-kos">.</span>FormComponents<span class="pl-kos">;</span>

<span class="pl-kos">[</span>assembly<span class="pl-c1">:</span> <span class="pl-c1">RegisterFormComponent<span class="pl-kos">(</span>InvisibleFormComponent<span class="pl-kos">.</span>IDENTIFIER<span class="pl-kos">,</span> <span class="pl-k">typeof</span><span class="pl-kos">(</span><span class="pl-smi">InvisibleFormComponent</span><span class="pl-kos">)</span><span class="pl-kos">,</span> InvisibleFormComponent<span class="pl-kos">.</span>NAME<span class="pl-kos">,</span> ViewName <span class="pl-c1">=</span> <span class="pl-s"><span class="pl-s">"</span>~/Components/FormComponents/InvisibleComponent/_Invisible.cshtml<span class="pl-s">"</span></span><span class="pl-kos">,</span> IsAvailableInFormBuilderEditor <span class="pl-c1">=</span> <span class="pl-c1">false</span><span class="pl-kos">)</span></span><span class="pl-kos">]</span>
<span class="pl-k">namespace</span> DancingGoat<span class="pl-kos">.</span>FormComponents
<span class="pl-kos">{</span>
    <span class="pl-k">public</span> <span class="pl-k">class</span> <span class="pl-smi">InvisibleFormComponent</span> <span class="pl-c1">:</span> <span class="pl-smi">FormComponent</span><span class="pl-c1">&lt;</span><span class="pl-smi">InvisibleProperties</span><span class="pl-kos">,</span><span class="pl-smi">bool</span><span class="pl-c1">&gt;</span>
    <span class="pl-kos">{</span>
        <span class="pl-k">public</span> <span class="pl-k">const</span> <span class="pl-smi">string</span> <span class="pl-s1">IDENTIFIER</span> <span class="pl-c1">=</span> <span class="pl-s"><span class="pl-s">"</span>Custom.InvisibleComponent<span class="pl-s">"</span></span><span class="pl-kos">;</span>
        <span class="pl-k">public</span> <span class="pl-k">const</span> <span class="pl-smi">string</span> <span class="pl-s1">NAME</span> <span class="pl-c1">=</span> <span class="pl-s"><span class="pl-s">"</span>InvisibleComponent<span class="pl-s">"</span></span><span class="pl-kos">;</span>


        <span class="pl-k">public</span> <span class="pl-smi">bool</span> <span class="pl-s1">Value</span> <span class="pl-kos">{</span> <span class="pl-k">get</span><span class="pl-kos">;</span> <span class="pl-k">set</span><span class="pl-kos">;</span> <span class="pl-kos">}</span>


        <span class="pl-k">public</span> <span class="pl-k">override</span> <span class="pl-smi">bool</span> <span class="pl-en">GetValue</span><span class="pl-kos">(</span><span class="pl-kos">)</span>
        <span class="pl-kos">{</span>
            <span class="pl-k">return</span> <span class="pl-s1">Value</span><span class="pl-kos">;</span>
        <span class="pl-kos">}</span>


        <span class="pl-k">public</span> <span class="pl-k">override</span> <span class="pl-smi">void</span> <span class="pl-en">SetValue</span><span class="pl-kos">(</span><span class="pl-smi">bool</span> <span class="pl-s1">value</span><span class="pl-kos">)</span>
        <span class="pl-kos">{</span>
            <span class="pl-s1">Value</span> <span class="pl-c1">=</span> <span class="pl-s1">value</span><span class="pl-kos">;</span>
        <span class="pl-kos">}</span>
    <span class="pl-kos">}</span>
<span class="pl-kos">}</span></pre></div><h3 dir="auto"><strong>Invisible component in React</strong></h3><p dir="auto">If you're using react components in your widget, follow along with this section.</p><h4 dir="auto"><strong>Installing and setting up the boilerplate</strong></h4><p dir="auto">To start out in React, download the admin customization boilerplate as described in the <a href="https://docs.xperience.io/xp/developers-and-admins/customization/extend-the-administration-interface/prepare-your-environment-for-admin-development#Prepareyourenvironmentforadmindevelopment-Clientdevelopmentboilerplate" rel="nofollow">documentation</a> with the name <em>DancingGoat.WebAdmin</em>.</p><p dir="auto">Don't forget to add a reference from your Dancing Goat solution to this new admin project.</p><div class="snippet-clipboard-content notranslate position-relative overflow-auto"><pre class="notranslate"><code>dotnet add reference &lt;the relative path from your main project's root to your custom admin csproj&gt;
</code></pre></div><p dir="auto">Then, set the <strong><code>CMSAdminClientModuleSettings</code></strong> mode for the boilerplate in the Dancing Goat site's <strong><code>appsettings.json</code></strong> file.</p><div class="highlight highlight-source-cs notranslate position-relative overflow-auto" dir="auto"><pre><span class="pl-s"><span class="pl-s">"</span>CMSAdminClientModuleSettings<span class="pl-s">"</span></span><span class="pl-c1">:</span> <span class="pl-kos">{</span>
    <span class="pl-s"><span class="pl-s">"</span>dancinggoat-web-admin<span class="pl-s">"</span></span><span class="pl-c1">:</span> <span class="pl-kos">{</span>
        <span class="pl-s"><span class="pl-s">"</span>Mode<span class="pl-s">"</span></span><span class="pl-c1">:</span> ""
    <span class="pl-kos">}</span>
<span class="pl-kos">}</span></pre></div><p dir="auto">Optionally, open the boilerplate project, and delete the <strong>~/UIPages</strong> folder, as well as the <strong>~/Client/src/custom-layout/CustomLayoutTemplate.tsx</strong> file. Then, open <strong>~/Client/src/entry.tsx</strong> and delete the following line:</p><div class="highlight highlight-source-tsx notranslate position-relative overflow-auto" dir="auto"><pre><span class="pl-k">export</span> <span class="pl-c1">*</span> <span class="pl-k">from</span> <span class="pl-s">'./custom-layout/CustomLayoutTemplate'</span><span class="pl-kos">;</span></pre></div><p dir="auto">This will get rid of sample customizations for the UI which are not relevant to this article.</p><p dir="auto">To complete the setup, follow the steps outlined <a href="https://docs.xperience.io/xp/developers-and-admins/customization/extend-the-administration-interface/prepare-your-environment-for-admin-development#Prepareyourenvironmentforadmindevelopment-Renametheboilerplateproject" rel="nofollow">in the documentation</a> to rename the organization from <strong>acme</strong> to <strong>dancinggoat</strong>.</p><h4 dir="auto"><strong>Creating the form component</strong></h4><p dir="auto">Next, create a folder called <strong>invisible-form-component</strong> in the <strong>~/Client</strong> directory, and add a file called <strong>InvisibleFormComponent.tsx</strong></p><p dir="auto">This will be our front-end file for the invisible form component, used by the administration UI. Because the whole point of our form component is to display nothing, it will be even simpler than the <a href="https://docs.xperience.io/xp/developers-and-admins/customization/extend-the-administration-interface/ui-form-components#UIformcomponents-Formcomponentfrontend" rel="nofollow">example</a> provided by the documentation.</p><p dir="auto">Unlike the documentation's example, we don't need to import react or the default form component properties. We aren't actually using the properties, or any react functionality. Simply export <strong><code>InvisibleFormComponent</code></strong> to return nothing.</p><div class="highlight highlight-source-tsx notranslate position-relative overflow-auto" dir="auto"><pre><span class="pl-k">export</span> <span class="pl-k">const</span> <span class="pl-smi">InvisibleFormComponent</span> <span class="pl-c1">=</span> <span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-c1">=&gt;</span> <span class="pl-kos">{</span>
    <span class="pl-k">return</span><span class="pl-kos">;</span>
<span class="pl-kos">}</span><span class="pl-kos">;</span></pre></div><p dir="auto">Now, switch back to the <strong>entry.tsx</strong> file and export everything from this file.</p><div class="highlight highlight-source-tsx notranslate position-relative overflow-auto" dir="auto"><pre><span class="pl-k">export</span> <span class="pl-c1">*</span> <span class="pl-k">from</span> <span class="pl-s">'./invisible-form-component/InvisibleFormComponent'</span><span class="pl-kos">;</span></pre></div><p dir="auto">Next, we can create the C# files that this control needs.</p><p dir="auto">Add a folder called <strong>FormComponents</strong> to the root of the project, and a folder called <strong>InvisibleComponent</strong> inside of it.</p><p dir="auto">Add a new C# file called <strong>InvisibleClientProperties.cs</strong>. This class represents the properties passed to the administration application when it renders the react component.</p><p dir="auto">Add a <strong><code>using</code></strong> directive for <strong><code>Kentico.Xperience.Admin.Base.Forms;</code></strong> and set the namespace to <strong><code>DancingGoat.FormComponents</code></strong></p><div class="highlight highlight-source-cs notranslate position-relative overflow-auto" dir="auto"><pre><span class="pl-k">using</span> Kentico<span class="pl-kos">.</span>Xperience<span class="pl-kos">.</span>Admin<span class="pl-kos">.</span>Base<span class="pl-kos">.</span>Forms<span class="pl-kos">;</span>

<span class="pl-k">namespace</span> DancingGoat<span class="pl-kos">.</span>FormComponents</pre></div><p dir="auto">Make the class inherit from <strong><code>FormComponentClientProperties&lt;bool&gt;</code></strong>. This uses the <strong><code>bool</code></strong> type so that we can assign the component to a boolean property, which will work most easily with visibility conditions.</p><p dir="auto">Since the component doesn't display anything, we can leave the class empty, with a final result like this.</p><div class="highlight highlight-source-cs notranslate position-relative overflow-auto" dir="auto"><pre><span class="pl-k">using</span> Kentico<span class="pl-kos">.</span>Xperience<span class="pl-kos">.</span>Admin<span class="pl-kos">.</span>Base<span class="pl-kos">.</span>Forms<span class="pl-kos">;</span>

<span class="pl-k">namespace</span> DancingGoat<span class="pl-kos">.</span>FormComponents
<span class="pl-kos">{</span>
    <span class="pl-k">public</span> <span class="pl-k">class</span> <span class="pl-smi">InvisibleClientProperties</span> <span class="pl-c1">:</span> <span class="pl-smi">FormComponentClientProperties</span><span class="pl-c1">&lt;</span><span class="pl-smi">bool</span><span class="pl-c1">&gt;</span>
    <span class="pl-kos">{</span>
    <span class="pl-kos">}</span>
<span class="pl-kos">}</span></pre></div><p dir="auto">Next, add a similar class called <strong>InvisibleProperties.cs</strong>, which represents the configuration of the component. Again, since this component renders nothing, the class can be empty.</p><div class="highlight highlight-source-cs notranslate position-relative overflow-auto" dir="auto"><pre><span class="pl-k">using</span> Kentico<span class="pl-kos">.</span>Xperience<span class="pl-kos">.</span>Admin<span class="pl-kos">.</span>Base<span class="pl-kos">.</span>Forms<span class="pl-kos">;</span>

<span class="pl-k">namespace</span> DancingGoat<span class="pl-kos">.</span>FormComponents
<span class="pl-kos">{</span>
    <span class="pl-k">public</span> <span class="pl-k">class</span> <span class="pl-smi">InvisibleProperties</span> <span class="pl-c1">:</span> <span class="pl-smi">FormComponentProperties</span>
    <span class="pl-kos">{</span>
    <span class="pl-kos">}</span>
<span class="pl-kos">}</span></pre></div><p dir="auto">Next, let's add an attribute class, which will allow us to use an attribute to assign the component to our widget property. This class doesn't need to contain anything-- it will only be used to map any widget properties that use it to the proper form component class.</p><p dir="auto">Use the same namespace as the previous two files, and have it inherit from the <strong><code>FormComponentAttribute</code></strong> class.</p><div class="highlight highlight-source-cs notranslate position-relative overflow-auto" dir="auto"><pre><span class="pl-k">using</span> Kentico<span class="pl-kos">.</span>Xperience<span class="pl-kos">.</span>Admin<span class="pl-kos">.</span>Base<span class="pl-kos">.</span>FormAnnotations<span class="pl-kos">;</span>
<span class="pl-k">namespace</span> DancingGoat<span class="pl-kos">.</span>FormComponents
<span class="pl-kos">{</span>
    <span class="pl-k">public</span> <span class="pl-k">class</span> <span class="pl-smi">InvisibleComponentAttribute</span> <span class="pl-c1">:</span> <span class="pl-smi">FormComponentAttribute</span>
    <span class="pl-kos">{</span>
    <span class="pl-kos">}</span>
<span class="pl-kos">}</span></pre></div><p dir="auto">Finally, we can tie all of these together with the component class. Create a new file, <strong>InvisibleFormComponent.cs</strong>.</p><p dir="auto">Add <strong><code>using</code></strong> directives for <strong><code>DancingGoat.FormComponents</code></strong> and <strong><code>Kentico.Xperience.Admin.Base.Forms</code></strong>, and place the class in the <strong><code>DancingGoat.FormComponents</code></strong> namespace.</p><div class="highlight highlight-source-cs notranslate position-relative overflow-auto" dir="auto"><pre><span class="pl-k">using</span> DancingGoat<span class="pl-kos">.</span>FormComponents<span class="pl-kos">;</span>
<span class="pl-k">using</span> Kentico<span class="pl-kos">.</span>Xperience<span class="pl-kos">.</span>Admin<span class="pl-kos">.</span>Base<span class="pl-kos">.</span>Forms<span class="pl-kos">;</span>

<span class="pl-k">namespace</span> DancingGoat<span class="pl-kos">.</span>FormComponents
<span class="pl-kos">{</span>
    <span class="pl-c">//...</span>
<span class="pl-kos">}</span></pre></div><p dir="auto">Make the <strong><code>InvisibleFormComponent</code></strong> class inherit from <strong><code>FormComponent&lt;InvisibleProperties,InvisibleClientProperties,bool&gt;</code></strong>. This connects the class with the properties and client properties, and specifies that it should be used on a boolean property.</p><p dir="auto">Define <strong><code>IDENTIFIER</code></strong> and <strong><code>NAME</code></strong> constants for the class, and point the <strong><code>ClientComponentName</code></strong> property to the front-end we defined previously. (Note that the app will automatically add "FormComponent" to the end of the name passed here.)</p><div class="highlight highlight-source-cs notranslate position-relative overflow-auto" dir="auto"><pre><span class="pl-k">public</span> <span class="pl-k">const</span> <span class="pl-smi">string</span> <span class="pl-s1">IDENTIFIER</span> <span class="pl-c1">=</span> <span class="pl-s"><span class="pl-s">"</span>Custom.InvisibleComponent<span class="pl-s">"</span></span><span class="pl-kos">;</span>
<span class="pl-k">public</span> <span class="pl-k">const</span> <span class="pl-smi">string</span> <span class="pl-s1">NAME</span> <span class="pl-c1">=</span> <span class="pl-s"><span class="pl-s">"</span>InvisibleComponent<span class="pl-s">"</span></span><span class="pl-kos">;</span>

<span class="pl-k">public</span> <span class="pl-k">override</span> <span class="pl-smi">string</span> <span class="pl-s1">ClientComponentName</span> <span class="pl-c1">=&gt;</span> <span class="pl-s"><span class="pl-s">"</span>@dancinggoat/web-admin/Invisible<span class="pl-s">"</span></span><span class="pl-kos">;</span></pre></div><p dir="auto">Next, use the <strong><code>ComponentAttributeAttribute</code></strong> to map <strong><code>InvisibleComponentAttribute</code></strong> to this class.</p><div class="highlight highlight-source-cs notranslate position-relative overflow-auto" dir="auto"><pre><span class="pl-kos">[</span>ComponentAttribute<span class="pl-kos">(</span><span class="pl-k">typeof</span><span class="pl-kos">(</span><span class="pl-smi">InvisibleComponentAttribute</span><span class="pl-kos">)</span><span class="pl-kos">)</span><span class="pl-kos">]</span></pre></div><p dir="auto">Finally, use the RegisterFormComponent assembly attribute to register the form component.</p><div class="highlight highlight-source-cs notranslate position-relative overflow-auto" dir="auto"><pre><span class="pl-kos">[</span>assembly<span class="pl-c1">:</span> <span class="pl-c1">RegisterFormComponent<span class="pl-kos">(</span>InvisibleFormComponent<span class="pl-kos">.</span>IDENTIFIER<span class="pl-kos">,</span><span class="pl-k">typeof</span><span class="pl-kos">(</span><span class="pl-smi">InvisibleFormComponent</span><span class="pl-kos">)</span><span class="pl-kos">,</span> InvisibleFormComponent<span class="pl-kos">.</span>NAME<span class="pl-kos">)</span></span><span class="pl-kos">]</span></pre></div><p dir="auto">Altogether, the class should look like this</p><div class="highlight highlight-source-cs notranslate position-relative overflow-auto" dir="auto"><pre><span class="pl-k">using</span> DancingGoat<span class="pl-kos">.</span>FormComponents<span class="pl-kos">;</span>
<span class="pl-k">using</span> Kentico<span class="pl-kos">.</span>Xperience<span class="pl-kos">.</span>Admin<span class="pl-kos">.</span>Base<span class="pl-kos">.</span>Forms<span class="pl-kos">;</span>

<span class="pl-kos">[</span>assembly<span class="pl-c1">:</span> <span class="pl-c1">RegisterFormComponent<span class="pl-kos">(</span>InvisibleFormComponent<span class="pl-kos">.</span>IDENTIFIER<span class="pl-kos">,</span><span class="pl-k">typeof</span><span class="pl-kos">(</span><span class="pl-smi">InvisibleFormComponent</span><span class="pl-kos">)</span><span class="pl-kos">,</span> InvisibleFormComponent<span class="pl-kos">.</span>NAME<span class="pl-kos">)</span></span><span class="pl-kos">]</span>

<span class="pl-k">namespace</span> DancingGoat<span class="pl-kos">.</span>FormComponents
<span class="pl-kos">{</span>
    <span class="pl-kos">[</span><span class="pl-c1">ComponentAttribute<span class="pl-kos">(</span><span class="pl-k">typeof</span><span class="pl-kos">(</span><span class="pl-smi">InvisibleComponentAttribute</span><span class="pl-kos">)</span><span class="pl-kos">)</span></span><span class="pl-kos">]</span>
    <span class="pl-k">public</span> <span class="pl-k">class</span> <span class="pl-smi">InvisibleFormComponent</span> <span class="pl-c1">:</span> <span class="pl-smi">FormComponent</span><span class="pl-c1">&lt;</span><span class="pl-smi">InvisibleProperties</span><span class="pl-kos">,</span><span class="pl-smi">InvisibleClientProperties</span><span class="pl-kos">,</span><span class="pl-smi">bool</span><span class="pl-c1">&gt;</span>
    <span class="pl-kos">{</span>
        <span class="pl-k">public</span> <span class="pl-k">const</span> <span class="pl-smi">string</span> <span class="pl-s1">IDENTIFIER</span> <span class="pl-c1">=</span> <span class="pl-s"><span class="pl-s">"</span>Custom.InvisibleComponent<span class="pl-s">"</span></span><span class="pl-kos">;</span>
        <span class="pl-k">public</span> <span class="pl-k">const</span> <span class="pl-smi">string</span> <span class="pl-s1">NAME</span> <span class="pl-c1">=</span> <span class="pl-s"><span class="pl-s">"</span>InvisibleComponent<span class="pl-s">"</span></span><span class="pl-kos">;</span>

        <span class="pl-k">public</span> <span class="pl-k">override</span> <span class="pl-smi">string</span> <span class="pl-s1">ClientComponentName</span> <span class="pl-c1">=&gt;</span> <span class="pl-s"><span class="pl-s">"</span>@dancinggoat/web-admin/Invisible<span class="pl-s">"</span></span><span class="pl-kos">;</span>
    <span class="pl-kos">}</span>
<span class="pl-kos">}</span></pre></div><h4 dir="auto"><strong>Building the project</strong></h4><p dir="auto">Now build the C# portion of the project through visual studio, and build the <strong>~/Client</strong> app through the command line with the command <strong><code>npm run build</code></strong>. Thanks to the boilerplate's use of <a href="https://babeljs.io/docs/" rel="nofollow">Babel</a>, this will automatically transpile our typescript files to work in browsers.</p><p dir="auto">Depending on whether your future changes involve client files, C# files, or both, you will need to determine which of these build options to use.</p><p dir="auto">Then, go back to the Dancing Goat Xperience project and <strong>clean</strong> and <strong>build</strong> the solution.</p><h3 dir="auto"><strong>Using the editing component on properties</strong></h3><p dir="auto">With this form component in place, we can use it in the properties of our widget. Return to the <strong><code>VideoEmbedWidgetProperties.cs</code></strong> file.</p><p dir="auto">Let's create a new public <strong><code>bool</code></strong> property called <strong><code>ShowDimensions</code></strong>. Since we're going to be putting custom functionality in the accessors, it will need an associated private variable. Create a private <strong><code>bool</code></strong> variable called <strong><code>_showDimensions</code></strong>.</p><div class="highlight highlight-source-cs notranslate position-relative overflow-auto" dir="auto"><pre><span class="pl-k">private</span> <span class="pl-smi">bool</span> <span class="pl-s1">_showDimensions</span><span class="pl-kos">;</span>

<span class="pl-k">public</span> <span class="pl-smi">bool</span> <span class="pl-s1">ShowDimensions</span>
<span class="pl-kos">{</span>
    get<span class="pl-kos">;</span>
    set<span class="pl-kos">;</span>
<span class="pl-kos">}</span></pre></div><p dir="auto">Now we can update the <strong>get</strong> accessor to return true when the dimensions should be displayed.</p><p dir="auto">As discussed earlier, the dimensions should display when the service is youtube, or when DynamicSize is disabled, so the the following boolean expression <strong><code>Service == YOUTUBE || !DynamicSize;</code></strong> should be sufficient for this case, though the logic here can be as complex as necessary.</p><p dir="auto">Add the boolean expression to the getter through an expression body definition.</p><div class="highlight highlight-source-cs notranslate position-relative overflow-auto" dir="auto"><pre><span class="pl-s1">get <span class="pl-c1">=&gt;</span> <span class="pl-s1">Service</span> <span class="pl-c1">==</span> <span class="pl-s1">YOUTUBE</span> <span class="pl-c1">||</span> <span class="pl-c1">!</span><span class="pl-s1">DynamicSize</span></span><span class="pl-kos">;</span></pre></div><p dir="auto">Now that we've set the <strong><code>get</code></strong> accessor in this way, the compiler will expect the same to be done for the <strong><code>set</code></strong> accessor. We can simply set the private variable to the provided value, even though this value will never be used.</p><div class="highlight highlight-source-cs notranslate position-relative overflow-auto" dir="auto"><pre><span class="pl-s1">set <span class="pl-c1">=&gt;</span> <span class="pl-s1">_showDimensions</span> <span class="pl-c1">=</span> <span class="pl-s1">value</span></span><span class="pl-kos">;</span></pre></div><p dir="auto">Now we can assign our invisible component to the property. If you made the React component, use the <strong><code>InvisibleComponentAttribute</code></strong> that we created earlier. If you made the C# component instead, use the typical <strong><code>EditingComponentAttribute</code></strong>.</p><p dir="auto">In either case, Set the order to 0 so that it comes before the fields that depend on it.</p><div class="highlight highlight-source-cs notranslate position-relative overflow-auto" dir="auto"><pre><span class="pl-c">//For using old C# components</span>

<span class="pl-kos">[</span>EditingComponent<span class="pl-kos">(</span>InvisibleFormComponent<span class="pl-kos">.</span>IDENTIFIER<span class="pl-kos">,</span> <span class="pl-s1">Order</span> <span class="pl-c1">=</span> <span class="pl-c1">0</span><span class="pl-kos">)</span><span class="pl-kos">]</span></pre></div><div class="highlight highlight-source-cs notranslate position-relative overflow-auto" dir="auto"><pre><span class="pl-c">//For using React components</span>

<span class="pl-kos">[</span>InvisibleComponent<span class="pl-kos">(</span><span class="pl-s1">Order</span> <span class="pl-c1">=</span> <span class="pl-c1">0</span><span class="pl-kos">)</span><span class="pl-kos">]</span></pre></div><p dir="auto">Now that this special property is in place, we can add visibility conditions depending on it to the <strong><code>Width</code></strong> and <strong><code>Height</code></strong> properties.</p><div class="highlight highlight-source-cs notranslate position-relative overflow-auto" dir="auto"><pre><span class="pl-c">//For using old C# components</span>

<span class="pl-kos">[</span><span class="pl-c1">EditingComponent<span class="pl-kos">(</span>IntInputComponent<span class="pl-kos">.</span>IDENTIFIER<span class="pl-kos">,</span> Label <span class="pl-c1">=</span> <span class="pl-s"><span class="pl-s">"</span>Width (px)<span class="pl-s">"</span></span><span class="pl-kos">,</span> Order <span class="pl-c1">=</span> <span class="pl-c1">4</span><span class="pl-kos">)</span></span><span class="pl-kos">]</span>
<span class="pl-kos">[</span><span class="pl-c1">VisibilityCondition<span class="pl-kos">(</span>nameof<span class="pl-kos">(</span>ShowDimensions<span class="pl-kos">)</span><span class="pl-kos">,</span> ComparisonTypeEnum<span class="pl-kos">.</span>IsTrue<span class="pl-kos">)</span></span><span class="pl-kos">]</span>
<span class="pl-k">public</span> <span class="pl-smi">int</span> Width <span class="pl-kos">{</span> <span class="pl-k">get</span><span class="pl-kos">;</span> <span class="pl-k">set</span><span class="pl-kos">;</span> <span class="pl-kos">}</span> <span class="pl-c1">=</span> <span class="pl-c1">560</span><span class="pl-kos">;</span>

<span class="pl-kos">[</span><span class="pl-c1">EditingComponent<span class="pl-kos">(</span>IntInputComponent<span class="pl-kos">.</span>IDENTIFIER<span class="pl-kos">,</span> Label <span class="pl-c1">=</span> <span class="pl-s"><span class="pl-s">"</span>Height (px)<span class="pl-s">"</span></span><span class="pl-kos">,</span> Order <span class="pl-c1">=</span> <span class="pl-c1">5</span><span class="pl-kos">)</span></span><span class="pl-kos">]</span>
<span class="pl-kos">[</span><span class="pl-c1">VisibilityCondition<span class="pl-kos">(</span>nameof<span class="pl-kos">(</span>ShowDimensions<span class="pl-kos">)</span><span class="pl-kos">,</span> ComparisonTypeEnum<span class="pl-kos">.</span>IsTrue<span class="pl-kos">)</span></span><span class="pl-kos">]</span>
<span class="pl-k">public</span> <span class="pl-smi">int</span> Height <span class="pl-kos">{</span> <span class="pl-k">get</span><span class="pl-kos">;</span> <span class="pl-k">set</span><span class="pl-kos">;</span> <span class="pl-kos">}</span> <span class="pl-c1">=</span> <span class="pl-c1">315</span><span class="pl-kos">;</span></pre></div><div class="highlight highlight-source-cs notranslate position-relative overflow-auto" dir="auto"><pre><span class="pl-c">//For using React components</span>

<span class="pl-kos">[</span><span class="pl-c1">NumberInputComponent<span class="pl-kos">(</span>Label <span class="pl-c1">=</span> <span class="pl-s"><span class="pl-s">"</span>Width (px)<span class="pl-s">"</span></span><span class="pl-kos">,</span> Order <span class="pl-c1">=</span> <span class="pl-c1">4</span><span class="pl-kos">)</span></span><span class="pl-kos">]</span>
<span class="pl-kos">[</span><span class="pl-c1">VisibleIfTrue<span class="pl-kos">(</span>nameof<span class="pl-kos">(</span>ShowDimensions<span class="pl-kos">)</span><span class="pl-kos">)</span></span><span class="pl-kos">]</span>
<span class="pl-k">public</span> <span class="pl-smi">int</span> Width <span class="pl-kos">{</span> <span class="pl-k">get</span><span class="pl-kos">;</span> <span class="pl-k">set</span><span class="pl-kos">;</span> <span class="pl-kos">}</span> <span class="pl-c1">=</span> <span class="pl-c1">560</span><span class="pl-kos">;</span>

<span class="pl-kos">[</span><span class="pl-c1">NumberInputComponent<span class="pl-kos">(</span>Label <span class="pl-c1">=</span> <span class="pl-s"><span class="pl-s">"</span>Height (px)<span class="pl-s">"</span></span><span class="pl-kos">,</span> Order <span class="pl-c1">=</span> <span class="pl-c1">5</span><span class="pl-kos">)</span></span><span class="pl-kos">]</span>
<span class="pl-kos">[</span><span class="pl-c1">VisibleIfTrue<span class="pl-kos">(</span>nameof<span class="pl-kos">(</span>ShowDimensions<span class="pl-kos">)</span><span class="pl-kos">)</span></span><span class="pl-kos">]</span>
<span class="pl-k">public</span> <span class="pl-smi">int</span> Height <span class="pl-kos">{</span> <span class="pl-k">get</span><span class="pl-kos">;</span> <span class="pl-k">set</span><span class="pl-kos">;</span> <span class="pl-kos">}</span> <span class="pl-c1">=</span> <span class="pl-c1">315</span><span class="pl-kos">;</span></pre></div><p dir="auto">If you run the site now, you may notice a problem-- toggling the checkbox for the <strong><code>DynamicSize</code></strong> property in the UI does not seem to make a difference. Currently, the dialog is not listening to changes to this control, because no other properties reference DynamicSize through a normal visibility condition.</p><p dir="auto">Let's use the invisible form component on another property, and make it depend on the <strong><code>DynamicSize</code></strong> property, to ensure that the value of <strong><code>ShowDimensions</code></strong> is re-evaluated when it changes.</p><p dir="auto">We can call it DummyProperty, and set its order to a very high number so that it logically comes after any properties it depends on.</p><div class="highlight highlight-source-cs notranslate position-relative overflow-auto" dir="auto"><pre><span class="pl-c">//For using old C# components</span>

<span class="pl-kos">[</span><span class="pl-c1">EditingComponent<span class="pl-kos">(</span>InvisibleFormComponent<span class="pl-kos">.</span>IDENTIFIER<span class="pl-kos">,</span> Order <span class="pl-c1">=</span> <span class="pl-c1">999</span><span class="pl-kos">)</span></span><span class="pl-kos">]</span>
<span class="pl-kos">[</span><span class="pl-c1">VisibilityCondition<span class="pl-kos">(</span>nameof<span class="pl-kos">(</span>DynamicSize<span class="pl-kos">)</span><span class="pl-kos">,</span> ComparisonTypeEnum<span class="pl-kos">.</span>IsTrue<span class="pl-kos">)</span></span><span class="pl-kos">]</span>
<span class="pl-k">public</span> <span class="pl-smi">bool</span> DummyProperty <span class="pl-kos">{</span> <span class="pl-k">get</span><span class="pl-kos">;</span> <span class="pl-k">set</span><span class="pl-kos">;</span> <span class="pl-kos">}</span></pre></div><div class="highlight highlight-source-cs notranslate position-relative overflow-auto" dir="auto"><pre><span class="pl-c">//For using React components</span>

<span class="pl-kos">[</span><span class="pl-c1">InvisibleComponent<span class="pl-kos">(</span>Order <span class="pl-c1">=</span> <span class="pl-c1">999</span><span class="pl-kos">)</span></span><span class="pl-kos">]</span>
<span class="pl-kos">[</span><span class="pl-c1">VisibleIfFalse<span class="pl-kos">(</span>nameof<span class="pl-kos">(</span>DynamicSize<span class="pl-kos">)</span><span class="pl-kos">)</span></span><span class="pl-kos">]</span>
<span class="pl-k">public</span> <span class="pl-smi">bool</span> DummyProperty <span class="pl-kos">{</span> <span class="pl-k">get</span><span class="pl-kos">;</span> <span class="pl-k">set</span><span class="pl-kos">;</span> <span class="pl-kos">}</span></pre></div><p dir="auto">Now, <strong><code>ShowDimensions</code></strong> should be evaluated, and thus show and hide the <strong><code>Width</code></strong> and <strong><code>Height</code></strong> properties, whenever the <strong><code>DynamicSize</code></strong> checkbox value changes.</p><p dir="auto">In the end, with added summary comments, the properties class should look like this.</p><div class="highlight highlight-source-cs notranslate position-relative overflow-auto" dir="auto"><pre><span class="pl-c">//For using old C# components</span>

<span class="pl-k">using</span> Kentico<span class="pl-kos">.</span>Forms<span class="pl-kos">.</span>Web<span class="pl-kos">.</span>Mvc<span class="pl-kos">;</span>
<span class="pl-k">using</span> Kentico<span class="pl-kos">.</span>PageBuilder<span class="pl-kos">.</span>Web<span class="pl-kos">.</span>Mvc<span class="pl-kos">;</span>
<span class="pl-k">using</span> DancingGoat<span class="pl-kos">.</span>FormComponents<span class="pl-kos">;</span>

<span class="pl-k">namespace</span> DancingGoat<span class="pl-kos">.</span>Widgets
<span class="pl-kos">{</span>
    <span class="pl-k">public</span> <span class="pl-k">class</span> <span class="pl-smi">VideoEmbedWidgetProperties</span> <span class="pl-c1">:</span> <span class="pl-smi">IWidgetProperties</span>
    <span class="pl-kos">{</span>
        <span class="pl-k">public</span> <span class="pl-k">const</span> <span class="pl-smi">string</span> <span class="pl-s1">YOUTUBE</span> <span class="pl-c1">=</span> <span class="pl-s"><span class="pl-s">"</span>youtube<span class="pl-s">"</span></span><span class="pl-kos">;</span>
        <span class="pl-k">public</span> <span class="pl-k">const</span> <span class="pl-smi">string</span> <span class="pl-s1">VIMEO</span> <span class="pl-c1">=</span> <span class="pl-s"><span class="pl-s">"</span>vimeo<span class="pl-s">"</span></span><span class="pl-kos">;</span>
        <span class="pl-k">public</span> <span class="pl-k">const</span> <span class="pl-smi">string</span> <span class="pl-s1">DAILYMOTION</span> <span class="pl-c1">=</span> <span class="pl-s"><span class="pl-s">"</span>dailymotion<span class="pl-s">"</span></span><span class="pl-kos">;</span>
        <span class="pl-k">public</span> <span class="pl-k">const</span> <span class="pl-smi">string</span> <span class="pl-s1">FILE</span> <span class="pl-c1">=</span> <span class="pl-s"><span class="pl-s">"</span>file<span class="pl-s">"</span></span><span class="pl-kos">;</span>

        <span class="pl-k">private</span> <span class="pl-smi">bool</span> <span class="pl-s1">_showDimensions</span><span class="pl-kos">;</span>


        <span class="pl-c">/// &lt;summary&gt;</span>
        <span class="pl-c">/// Determines whether the dimensions controls should be shown</span>
        <span class="pl-c">/// &lt;/summary&gt;</span>
        <span class="pl-kos">[</span><span class="pl-c1">EditingComponent<span class="pl-kos">(</span>InvisibleFormComponent<span class="pl-kos">.</span>IDENTIFIER<span class="pl-kos">,</span> Order <span class="pl-c1">=</span> <span class="pl-c1">0</span><span class="pl-kos">)</span></span><span class="pl-kos">]</span>
        <span class="pl-k">public</span> <span class="pl-smi">bool</span> <span class="pl-s1">ShowDimensions</span>
        <span class="pl-kos">{</span>
            <span class="pl-k">get</span> <span class="pl-c1">=&gt;</span> <span class="pl-s1">Service</span> <span class="pl-c1">==</span> <span class="pl-s1">YOUTUBE</span> <span class="pl-c1">||</span> <span class="pl-c1">!</span><span class="pl-s1">DynamicSize</span><span class="pl-kos">;</span>
            <span class="pl-k">set</span> <span class="pl-c1">=&gt;</span> <span class="pl-s1">_showDimensions</span> <span class="pl-c1">=</span> <span class="pl-s1">value</span><span class="pl-kos">;</span>
        <span class="pl-kos">}</span>


        <span class="pl-c">/// &lt;summary&gt;</span>
        <span class="pl-c">/// Defines the video platform from which the embedded video originates.</span>
        <span class="pl-c">/// &lt;/summary&gt;</span>
        <span class="pl-kos">[</span><span class="pl-c1">EditingComponent<span class="pl-kos">(</span>RadioButtonsComponent<span class="pl-kos">.</span>IDENTIFIER<span class="pl-kos">,</span> Label <span class="pl-c1">=</span> <span class="pl-s"><span class="pl-s">"</span>Video service<span class="pl-s">"</span></span><span class="pl-kos">,</span> Order <span class="pl-c1">=</span> <span class="pl-c1">1</span><span class="pl-kos">)</span></span><span class="pl-kos">]</span>
        <span class="pl-kos">[</span><span class="pl-c1">EditingComponentProperty<span class="pl-kos">(</span>nameof<span class="pl-kos">(</span>RadioButtonsComponent<span class="pl-kos">.</span>Properties<span class="pl-kos">.</span>DataSource<span class="pl-kos">)</span><span class="pl-kos">,</span> <span class="pl-s1">YOUTUBE</span> <span class="pl-c1">+</span> <span class="pl-s"><span class="pl-s">"</span>;YouTube<span class="pl-k">\r</span><span class="pl-k">\n</span><span class="pl-s">"</span></span> <span class="pl-c1">+</span> <span class="pl-s1">VIMEO</span> <span class="pl-c1">+</span> <span class="pl-s"><span class="pl-s">"</span>;Vimeo<span class="pl-k">\r</span><span class="pl-k">\n</span><span class="pl-s">"</span></span> <span class="pl-c1">+</span> <span class="pl-s1">DAILYMOTION</span> <span class="pl-c1">+</span> <span class="pl-s"><span class="pl-s">"</span>;Dailymotion<span class="pl-k">\r</span><span class="pl-k">\n</span><span class="pl-s">"</span></span> <span class="pl-c1">+</span> <span class="pl-s1">FILE</span> <span class="pl-c1">+</span> <span class="pl-s"><span class="pl-s">"</span>;File URL<span class="pl-k">\r</span><span class="pl-k">\n</span><span class="pl-s">"</span></span><span class="pl-kos">)</span></span><span class="pl-kos">]</span>
        <span class="pl-k">public</span> <span class="pl-smi">string</span> <span class="pl-s1">Service</span> <span class="pl-kos">{</span> <span class="pl-k">get</span><span class="pl-kos">;</span> <span class="pl-k">set</span><span class="pl-kos">;</span> <span class="pl-kos">}</span> <span class="pl-c1">=</span> YOUTUBE<span class="pl-kos">;</span>


        <span class="pl-c">/// &lt;summary&gt;</span>
        <span class="pl-c">/// Defines the URL of the embedded video.</span>
        <span class="pl-c">/// &lt;/summary&gt;</span>
        <span class="pl-kos">[</span><span class="pl-c1">EditingComponent<span class="pl-kos">(</span>TextInputComponent<span class="pl-kos">.</span>IDENTIFIER<span class="pl-kos">,</span> Label <span class="pl-c1">=</span> <span class="pl-s"><span class="pl-s">"</span>Url<span class="pl-s">"</span></span><span class="pl-kos">,</span> Order <span class="pl-c1">=</span> <span class="pl-c1">2</span><span class="pl-kos">)</span></span><span class="pl-kos">]</span>
        <span class="pl-k">public</span> <span class="pl-smi">string</span> <span class="pl-s1">Url</span> <span class="pl-kos">{</span> <span class="pl-k">get</span><span class="pl-kos">;</span> <span class="pl-k">set</span><span class="pl-kos">;</span> <span class="pl-kos">}</span>


        <span class="pl-c">/// &lt;summary&gt;</span>
        <span class="pl-c">/// </span>
        <span class="pl-c">/// &lt;/summary&gt;</span>
        <span class="pl-kos">[</span><span class="pl-c1">EditingComponent<span class="pl-kos">(</span>CheckBoxComponent<span class="pl-kos">.</span>IDENTIFIER<span class="pl-kos">,</span> Label <span class="pl-c1">=</span> <span class="pl-s"><span class="pl-s">"</span>Size dynamically<span class="pl-s">"</span></span><span class="pl-kos">,</span> Order <span class="pl-c1">=</span> <span class="pl-c1">3</span><span class="pl-kos">)</span></span><span class="pl-kos">]</span>
        <span class="pl-kos">[</span><span class="pl-c1">VisibilityCondition<span class="pl-kos">(</span>nameof<span class="pl-kos">(</span>Service<span class="pl-kos">)</span><span class="pl-kos">,</span> ComparisonTypeEnum<span class="pl-kos">.</span>IsNotEqualTo<span class="pl-kos">,</span> YOUTUBE<span class="pl-kos">)</span></span><span class="pl-kos">]</span>
        <span class="pl-k">public</span> <span class="pl-smi">bool</span> <span class="pl-s1">DynamicSize</span> <span class="pl-kos">{</span> <span class="pl-k">get</span><span class="pl-kos">;</span> <span class="pl-k">set</span><span class="pl-kos">;</span> <span class="pl-kos">}</span> <span class="pl-c1">=</span> <span class="pl-c1">true</span><span class="pl-kos">;</span>


        <span class="pl-c">/// &lt;summary&gt;</span>
        <span class="pl-c">/// Determines the width of the embed.</span>
        <span class="pl-c">/// &lt;/summary&gt;</span>
        <span class="pl-kos">[</span><span class="pl-c1">EditingComponent<span class="pl-kos">(</span>IntInputComponent<span class="pl-kos">.</span>IDENTIFIER<span class="pl-kos">,</span> Label <span class="pl-c1">=</span> <span class="pl-s"><span class="pl-s">"</span>Width (px)<span class="pl-s">"</span></span><span class="pl-kos">,</span> Order <span class="pl-c1">=</span> <span class="pl-c1">4</span><span class="pl-kos">)</span></span><span class="pl-kos">]</span>
        <span class="pl-kos">[</span><span class="pl-c1">VisibilityCondition<span class="pl-kos">(</span>nameof<span class="pl-kos">(</span>ShowDimensions<span class="pl-kos">)</span><span class="pl-kos">,</span> ComparisonTypeEnum<span class="pl-kos">.</span>IsTrue<span class="pl-kos">)</span></span><span class="pl-kos">]</span>
        <span class="pl-k">public</span> <span class="pl-smi">int</span> <span class="pl-s1">Width</span> <span class="pl-kos">{</span> <span class="pl-k">get</span><span class="pl-kos">;</span> <span class="pl-k">set</span><span class="pl-kos">;</span> <span class="pl-kos">}</span> <span class="pl-c1">=</span> <span class="pl-c1">560</span><span class="pl-kos">;</span>


        <span class="pl-c">/// &lt;summary&gt;</span>
        <span class="pl-c">/// Determines the height of the embed.</span>
        <span class="pl-c">/// &lt;/summary&gt;</span>
        <span class="pl-kos">[</span><span class="pl-c1">EditingComponent<span class="pl-kos">(</span>IntInputComponent<span class="pl-kos">.</span>IDENTIFIER<span class="pl-kos">,</span> Label <span class="pl-c1">=</span> <span class="pl-s"><span class="pl-s">"</span>Height (px)<span class="pl-s">"</span></span><span class="pl-kos">,</span> Order <span class="pl-c1">=</span> <span class="pl-c1">5</span><span class="pl-kos">)</span></span><span class="pl-kos">]</span>
        <span class="pl-kos">[</span><span class="pl-c1">VisibilityCondition<span class="pl-kos">(</span>nameof<span class="pl-kos">(</span>ShowDimensions<span class="pl-kos">)</span><span class="pl-kos">,</span> ComparisonTypeEnum<span class="pl-kos">.</span>IsTrue<span class="pl-kos">)</span></span><span class="pl-kos">]</span>
        <span class="pl-k">public</span> <span class="pl-smi">int</span> <span class="pl-s1">Height</span> <span class="pl-kos">{</span> <span class="pl-k">get</span><span class="pl-kos">;</span> <span class="pl-k">set</span><span class="pl-kos">;</span> <span class="pl-kos">}</span> <span class="pl-c1">=</span> <span class="pl-c1">315</span><span class="pl-kos">;</span>


        <span class="pl-c">/// &lt;summary&gt;</span>
        <span class="pl-c">/// Defines the time to start the player at.</span>
        <span class="pl-c">/// &lt;/summary&gt;</span>
        <span class="pl-kos">[</span><span class="pl-c1">EditingComponent<span class="pl-kos">(</span>CheckBoxComponent<span class="pl-kos">.</span>IDENTIFIER<span class="pl-kos">,</span> Label <span class="pl-c1">=</span> <span class="pl-s"><span class="pl-s">"</span>Play from beginning<span class="pl-s">"</span></span><span class="pl-kos">,</span> Order <span class="pl-c1">=</span> <span class="pl-c1">6</span><span class="pl-kos">)</span></span><span class="pl-kos">]</span>
        <span class="pl-kos">[</span><span class="pl-c1">VisibilityCondition<span class="pl-kos">(</span>nameof<span class="pl-kos">(</span>Service<span class="pl-kos">)</span><span class="pl-kos">,</span> ComparisonTypeEnum<span class="pl-kos">.</span>IsNotEqualTo<span class="pl-kos">,</span> DAILYMOTION<span class="pl-kos">)</span></span><span class="pl-kos">]</span>
        <span class="pl-k">public</span> <span class="pl-smi">bool</span> <span class="pl-s1">PlayFromBeginning</span> <span class="pl-kos">{</span> <span class="pl-k">get</span><span class="pl-kos">;</span> <span class="pl-k">set</span><span class="pl-kos">;</span> <span class="pl-kos">}</span> <span class="pl-c1">=</span> <span class="pl-c1">true</span><span class="pl-kos">;</span>


        <span class="pl-c">/// &lt;summary&gt;</span>
        <span class="pl-c">/// Determines whether the video will start at the beginning, or at a specified timestamp.</span>
        <span class="pl-c">/// &lt;/summary&gt;</span>
        <span class="pl-kos">[</span><span class="pl-c1">EditingComponent<span class="pl-kos">(</span>IntInputComponent<span class="pl-kos">.</span>IDENTIFIER<span class="pl-kos">,</span> Label <span class="pl-c1">=</span> <span class="pl-s"><span class="pl-s">"</span>Starting time (seconds)<span class="pl-s">"</span></span><span class="pl-kos">,</span> Order <span class="pl-c1">=</span> <span class="pl-c1">7</span><span class="pl-kos">)</span></span><span class="pl-kos">]</span>
        <span class="pl-kos">[</span><span class="pl-c1">VisibilityCondition<span class="pl-kos">(</span>nameof<span class="pl-kos">(</span>Service<span class="pl-kos">)</span><span class="pl-kos">,</span> ComparisonTypeEnum<span class="pl-kos">.</span>IsNotEqualTo<span class="pl-kos">,</span> DAILYMOTION<span class="pl-kos">)</span></span><span class="pl-kos">]</span>
        <span class="pl-kos">[</span><span class="pl-c1">VisibilityCondition<span class="pl-kos">(</span>nameof<span class="pl-kos">(</span>PlayFromBeginning<span class="pl-kos">)</span><span class="pl-kos">,</span> ComparisonTypeEnum<span class="pl-kos">.</span>IsFalse<span class="pl-kos">)</span></span><span class="pl-kos">]</span>
        <span class="pl-k">public</span> <span class="pl-smi">int</span> <span class="pl-s1">StartingTime</span> <span class="pl-kos">{</span> <span class="pl-k">get</span><span class="pl-kos">;</span> <span class="pl-k">set</span><span class="pl-kos">;</span> <span class="pl-kos">}</span> <span class="pl-c1">=</span> <span class="pl-c1">0</span><span class="pl-kos">;</span>


        <span class="pl-c">/// &lt;summary&gt;</span>
        <span class="pl-c">/// Makes sure the controls of other properties referenced by visibility conditions are listened to for changes</span>
        <span class="pl-c">/// &lt;/summary&gt;</span>
        <span class="pl-kos">[</span><span class="pl-c1">EditingComponent<span class="pl-kos">(</span>InvisibleFormComponent<span class="pl-kos">.</span>IDENTIFIER<span class="pl-kos">,</span> Order <span class="pl-c1">=</span> <span class="pl-c1">999</span><span class="pl-kos">)</span></span><span class="pl-kos">]</span>
        <span class="pl-kos">[</span><span class="pl-c1">VisibilityCondition<span class="pl-kos">(</span>nameof<span class="pl-kos">(</span>DynamicSize<span class="pl-kos">)</span><span class="pl-kos">,</span> ComparisonTypeEnum<span class="pl-kos">.</span>IsTrue<span class="pl-kos">)</span></span><span class="pl-kos">]</span>
        <span class="pl-k">public</span> <span class="pl-smi">bool</span> <span class="pl-s1">DummyProperty</span> <span class="pl-kos">{</span> <span class="pl-k">get</span><span class="pl-kos">;</span> <span class="pl-k">set</span><span class="pl-kos">;</span> <span class="pl-kos">}</span>
    <span class="pl-kos">}</span>
<span class="pl-kos">}</span></pre></div><div class="highlight highlight-source-cs notranslate position-relative overflow-auto" dir="auto"><pre><span class="pl-c">//For using React components</span>

<span class="pl-k">using</span> Kentico<span class="pl-kos">.</span>Forms<span class="pl-kos">.</span>Web<span class="pl-kos">.</span>Mvc<span class="pl-kos">;</span>
<span class="pl-k">using</span> Kentico<span class="pl-kos">.</span>PageBuilder<span class="pl-kos">.</span>Web<span class="pl-kos">.</span>Mvc<span class="pl-kos">;</span>
<span class="pl-k">using</span> Kentico<span class="pl-kos">.</span>Xperience<span class="pl-kos">.</span>Admin<span class="pl-kos">.</span>Base<span class="pl-kos">.</span>FormAnnotations<span class="pl-kos">;</span>
<span class="pl-k">using</span> DancingGoat<span class="pl-kos">.</span>FormComponents<span class="pl-kos">;</span>

<span class="pl-k">namespace</span> DancingGoat<span class="pl-kos">.</span>Widgets
<span class="pl-kos">{</span>
    <span class="pl-k">public</span> <span class="pl-k">class</span> <span class="pl-smi">VideoEmbedWidgetProperties</span> <span class="pl-c1">:</span><span class="pl-smi">IWidgetProperties</span>
    <span class="pl-kos">{</span>
        <span class="pl-k">public</span> <span class="pl-k">const</span> <span class="pl-smi">string</span> <span class="pl-s1">YOUTUBE</span> <span class="pl-c1">=</span> <span class="pl-s"><span class="pl-s">"</span>youtube<span class="pl-s">"</span></span><span class="pl-kos">;</span>
        <span class="pl-k">public</span> <span class="pl-k">const</span> <span class="pl-smi">string</span> <span class="pl-s1">VIMEO</span> <span class="pl-c1">=</span> <span class="pl-s"><span class="pl-s">"</span>vimeo<span class="pl-s">"</span></span><span class="pl-kos">;</span>
        <span class="pl-k">public</span> <span class="pl-k">const</span> <span class="pl-smi">string</span> <span class="pl-s1">DAILYMOTION</span> <span class="pl-c1">=</span> <span class="pl-s"><span class="pl-s">"</span>dailymotion<span class="pl-s">"</span></span><span class="pl-kos">;</span>
        <span class="pl-k">public</span> <span class="pl-k">const</span> <span class="pl-smi">string</span> <span class="pl-s1">FILE</span> <span class="pl-c1">=</span> <span class="pl-s"><span class="pl-s">"</span>file<span class="pl-s">"</span></span><span class="pl-kos">;</span>

        <span class="pl-k">private</span> <span class="pl-smi">bool</span> <span class="pl-s1">_showDimensions</span><span class="pl-kos">;</span>

        <span class="pl-c">/// &lt;summary&gt;</span>
        <span class="pl-c">/// Holds a complex boolean expression used in determining other fields' visibility.</span>
        <span class="pl-c">/// &lt;/summary&gt;</span>
        <span class="pl-kos">[</span><span class="pl-c1">InvisibleComponent<span class="pl-kos">(</span>Order <span class="pl-c1">=</span> <span class="pl-c1">0</span><span class="pl-kos">)</span></span><span class="pl-kos">]</span>
        <span class="pl-k">public</span> <span class="pl-smi">bool</span> <span class="pl-s1">ShowDimensions</span>
        <span class="pl-kos">{</span>
            <span class="pl-k">get</span> <span class="pl-c1">=&gt;</span> <span class="pl-s1">Service</span> <span class="pl-c1">==</span> <span class="pl-s1">YOUTUBE</span> <span class="pl-c1">||</span> <span class="pl-c1">!</span><span class="pl-s1">DynamicSize</span><span class="pl-kos">;</span>
            <span class="pl-k">set</span> <span class="pl-c1">=&gt;</span> <span class="pl-s1">_showDimensions</span> <span class="pl-c1">=</span> <span class="pl-s1">value</span><span class="pl-kos">;</span>
        <span class="pl-kos">}</span>


        <span class="pl-c">/// &lt;summary&gt;</span>
        <span class="pl-c">/// Defines the video platform from which the embedded video originates.</span>
        <span class="pl-c">/// &lt;/summary&gt;</span>
        <span class="pl-kos">[</span><span class="pl-c1">RadioGroupComponent<span class="pl-kos">(</span>Label <span class="pl-c1">=</span> <span class="pl-s"><span class="pl-s">"</span>Video service<span class="pl-s">"</span></span><span class="pl-kos">,</span> Inline <span class="pl-c1">=</span> <span class="pl-c1">true</span><span class="pl-kos">,</span> Order <span class="pl-c1">=</span> <span class="pl-c1">1</span><span class="pl-kos">,</span> Options <span class="pl-c1">=</span> <span class="pl-s1">YOUTUBE</span> <span class="pl-c1">+</span> <span class="pl-s"><span class="pl-s">"</span>;YouTube<span class="pl-k">\r</span><span class="pl-k">\n</span><span class="pl-s">"</span></span> <span class="pl-c1">+</span> <span class="pl-s1">VIMEO</span> <span class="pl-c1">+</span> <span class="pl-s"><span class="pl-s">"</span>;Vimeo<span class="pl-k">\r</span><span class="pl-k">\n</span><span class="pl-s">"</span></span> <span class="pl-c1">+</span> <span class="pl-s1">DAILYMOTION</span> <span class="pl-c1">+</span> <span class="pl-s"><span class="pl-s">"</span>;Dailymotion<span class="pl-k">\r</span><span class="pl-k">\n</span><span class="pl-s">"</span></span> <span class="pl-c1">+</span> <span class="pl-s1">FILE</span> <span class="pl-c1">+</span> <span class="pl-s"><span class="pl-s">"</span>;File URL<span class="pl-k">\r</span><span class="pl-k">\n</span><span class="pl-s">"</span></span><span class="pl-kos">)</span></span><span class="pl-kos">]</span>
        <span class="pl-k">public</span> <span class="pl-smi">string</span> <span class="pl-s1">Service</span> <span class="pl-kos">{</span> <span class="pl-k">get</span><span class="pl-kos">;</span> <span class="pl-k">set</span><span class="pl-kos">;</span> <span class="pl-kos">}</span> <span class="pl-c1">=</span> YOUTUBE<span class="pl-kos">;</span>
        
        
        <span class="pl-c">/// &lt;summary&gt;</span>
        <span class="pl-c">/// Defines the URL of the embedded video.</span>
        <span class="pl-c">/// &lt;/summary&gt;</span>
        <span class="pl-kos">[</span><span class="pl-c1">TextInputComponent<span class="pl-kos">(</span>Label <span class="pl-c1">=</span> <span class="pl-s"><span class="pl-s">"</span>Url<span class="pl-s">"</span></span><span class="pl-kos">,</span> Order <span class="pl-c1">=</span> <span class="pl-c1">2</span><span class="pl-kos">)</span></span><span class="pl-kos">]</span>
        <span class="pl-k">public</span> <span class="pl-smi">string</span> <span class="pl-s1">Url</span> <span class="pl-kos">{</span> <span class="pl-k">get</span><span class="pl-kos">;</span> <span class="pl-k">set</span><span class="pl-kos">;</span> <span class="pl-kos">}</span>


        <span class="pl-c">/// &lt;summary&gt;</span>
        <span class="pl-c">/// Determines whether the video should be sized dynamically or with explicit dimensions.</span>
        <span class="pl-c">/// &lt;/summary&gt;</span>
        <span class="pl-kos">[</span><span class="pl-c1">CheckBoxComponent<span class="pl-kos">(</span>Label <span class="pl-c1">=</span> <span class="pl-s"><span class="pl-s">"</span>Size dynamically<span class="pl-s">"</span></span><span class="pl-kos">,</span> Order <span class="pl-c1">=</span> <span class="pl-c1">3</span><span class="pl-kos">)</span></span><span class="pl-kos">]</span>
        <span class="pl-kos">[</span><span class="pl-c1">VisibleIfNotEqualTo<span class="pl-kos">(</span>nameof<span class="pl-kos">(</span>Service<span class="pl-kos">)</span><span class="pl-kos">,</span> YOUTUBE<span class="pl-kos">)</span></span><span class="pl-kos">]</span>
        <span class="pl-k">public</span> <span class="pl-smi">bool</span> <span class="pl-s1">DynamicSize</span> <span class="pl-kos">{</span> <span class="pl-k">get</span><span class="pl-kos">;</span> <span class="pl-k">set</span><span class="pl-kos">;</span> <span class="pl-kos">}</span> <span class="pl-c1">=</span> <span class="pl-c1">true</span><span class="pl-kos">;</span>


        <span class="pl-c">/// &lt;summary&gt;</span>
        <span class="pl-c">/// Determines the width of the embed.</span>
        <span class="pl-c">/// &lt;/summary&gt;</span>
        <span class="pl-kos">[</span><span class="pl-c1">NumberInputComponent<span class="pl-kos">(</span>Label <span class="pl-c1">=</span> <span class="pl-s"><span class="pl-s">"</span>Width (px)<span class="pl-s">"</span></span><span class="pl-kos">,</span> Order <span class="pl-c1">=</span> <span class="pl-c1">4</span><span class="pl-kos">)</span></span><span class="pl-kos">]</span>
        <span class="pl-kos">[</span><span class="pl-c1">VisibleIfTrue<span class="pl-kos">(</span>nameof<span class="pl-kos">(</span>ShowDimensions<span class="pl-kos">)</span><span class="pl-kos">)</span></span><span class="pl-kos">]</span>
        <span class="pl-k">public</span> <span class="pl-smi">int</span> <span class="pl-s1">Width</span> <span class="pl-kos">{</span> <span class="pl-k">get</span><span class="pl-kos">;</span> <span class="pl-k">set</span><span class="pl-kos">;</span> <span class="pl-kos">}</span> <span class="pl-c1">=</span> <span class="pl-c1">560</span><span class="pl-kos">;</span>


        <span class="pl-c">/// &lt;summary&gt;</span>
        <span class="pl-c">/// Determines the height of the embed.</span>
        <span class="pl-c">/// &lt;/summary&gt;</span>
        <span class="pl-kos">[</span><span class="pl-c1">NumberInputComponent<span class="pl-kos">(</span>Label <span class="pl-c1">=</span> <span class="pl-s"><span class="pl-s">"</span>Height (px)<span class="pl-s">"</span></span><span class="pl-kos">,</span> Order <span class="pl-c1">=</span> <span class="pl-c1">5</span><span class="pl-kos">)</span></span><span class="pl-kos">]</span>
        <span class="pl-kos">[</span><span class="pl-c1">VisibleIfTrue<span class="pl-kos">(</span>nameof<span class="pl-kos">(</span>ShowDimensions<span class="pl-kos">)</span><span class="pl-kos">)</span></span><span class="pl-kos">]</span>
        <span class="pl-k">public</span> <span class="pl-smi">int</span> <span class="pl-s1">Height</span> <span class="pl-kos">{</span> <span class="pl-k">get</span><span class="pl-kos">;</span> <span class="pl-k">set</span><span class="pl-kos">;</span> <span class="pl-kos">}</span> <span class="pl-c1">=</span> <span class="pl-c1">315</span><span class="pl-kos">;</span>


        <span class="pl-c">/// &lt;summary&gt;</span>
        <span class="pl-c">/// Defines the time to start the player at.</span>
        <span class="pl-c">/// &lt;/summary&gt;        </span>
        <span class="pl-kos">[</span><span class="pl-c1">CheckBoxComponent<span class="pl-kos">(</span>Label <span class="pl-c1">=</span> <span class="pl-s"><span class="pl-s">"</span>Play from beginning<span class="pl-s">"</span></span><span class="pl-kos">,</span> Order <span class="pl-c1">=</span> <span class="pl-c1">6</span><span class="pl-kos">)</span></span><span class="pl-kos">]</span>
        <span class="pl-kos">[</span><span class="pl-c1">VisibleIfNotEqualTo<span class="pl-kos">(</span>nameof<span class="pl-kos">(</span>Service<span class="pl-kos">)</span><span class="pl-kos">,</span> DAILYMOTION<span class="pl-kos">)</span></span><span class="pl-kos">]</span>
        <span class="pl-k">public</span> <span class="pl-smi">bool</span> <span class="pl-s1">PlayFromBeginning</span> <span class="pl-kos">{</span> <span class="pl-k">get</span><span class="pl-kos">;</span> <span class="pl-k">set</span><span class="pl-kos">;</span> <span class="pl-kos">}</span> <span class="pl-c1">=</span> <span class="pl-c1">true</span><span class="pl-kos">;</span>


        <span class="pl-c">/// &lt;summary&gt;</span>
        <span class="pl-c">/// Determines whether the video will start at the beginning, or at a specified timestamp.</span>
        <span class="pl-c">/// &lt;/summary&gt;</span>
        <span class="pl-kos">[</span><span class="pl-c1">NumberInputComponent<span class="pl-kos">(</span>Label <span class="pl-c1">=</span> <span class="pl-s"><span class="pl-s">"</span>Starting time (seconds)<span class="pl-s">"</span></span><span class="pl-kos">,</span> Order <span class="pl-c1">=</span> <span class="pl-c1">7</span><span class="pl-kos">)</span></span><span class="pl-kos">]</span>
        <span class="pl-kos">[</span><span class="pl-c1">VisibleIfFalse<span class="pl-kos">(</span>nameof<span class="pl-kos">(</span>PlayFromBeginning<span class="pl-kos">)</span><span class="pl-kos">)</span></span><span class="pl-kos">]</span>
        <span class="pl-kos">[</span><span class="pl-c1">VisibleIfNotEqualTo<span class="pl-kos">(</span>nameof<span class="pl-kos">(</span>Service<span class="pl-kos">)</span><span class="pl-kos">,</span> DAILYMOTION<span class="pl-kos">)</span></span><span class="pl-kos">]</span>
        <span class="pl-k">public</span> <span class="pl-smi">int</span> <span class="pl-s1">StartingTime</span> <span class="pl-kos">{</span> <span class="pl-k">get</span><span class="pl-kos">;</span> <span class="pl-k">set</span><span class="pl-kos">;</span> <span class="pl-kos">}</span> <span class="pl-c1">=</span> <span class="pl-c1">0</span><span class="pl-kos">;</span>


        <span class="pl-c">/// &lt;summary&gt;</span>
        <span class="pl-c">/// Makes sure all necessary properties used in ShowDimensions are listened to.</span>
        <span class="pl-c">/// &lt;/summary&gt;</span>
        <span class="pl-kos">[</span><span class="pl-c1">InvisibleComponent<span class="pl-kos">(</span>Order <span class="pl-c1">=</span> <span class="pl-c1">999</span><span class="pl-kos">)</span></span><span class="pl-kos">]</span>
        <span class="pl-kos">[</span><span class="pl-c1">VisibleIfFalse<span class="pl-kos">(</span>nameof<span class="pl-kos">(</span>DynamicSize<span class="pl-kos">)</span><span class="pl-kos">)</span></span><span class="pl-kos">]</span>
        <span class="pl-k">public</span> <span class="pl-smi">bool</span> <span class="pl-s1">DummyProperty</span> <span class="pl-kos">{</span> <span class="pl-k">get</span><span class="pl-kos">;</span> <span class="pl-k">set</span><span class="pl-kos">;</span> <span class="pl-kos">}</span>
    <span class="pl-kos">}</span>
<span class="pl-kos">}</span></pre></div><h2 dir="auto">Conclusion</h2><p dir="auto">Now you should have a functioning video embed widget. Feel free to modify the code and add more styles and features. You can find a repository with the code of the widget and component <a href="https://github.com/kentico-matthews/Custom.XperienceByKentico.VideoEmbedWidget">here</a>. The <strong><code>main</code></strong> branch uses react components for the widget properties, while the <strong><code>CSharpComponents</code></strong> branch uses C# components.</p>
]]>
  </BlogPostContentContentHTML>
  <BlogPostContentPublishedDate>2023-05-09 21:00:00Z</BlogPostContentPublishedDate>
  <BlogPostContentShortDescription>
    <![CDATA[A walkthrough for adding a video embed widget to the Dancing Goat sample site, which demonstrates the use of multiple visibility conditions.]]>
  </BlogPostContentShortDescription>
  <BlogPostContentSourceType>markdown</BlogPostContentSourceType>
  <BlogPostContentTaxonomy>Guide</BlogPostContentTaxonomy>
  <BlogPostContentTeaserMediaFileImage>
    <![CDATA[[{"Identifier":"f4d84de2-7a2a-4c05-b4f0-0dcc5680c7da","Name":"VideoEmbed-Thumbnail.jpg","Size":453704,"Dimensions":{"Width":1920,"Height":1080}}]]]>
  </BlogPostContentTeaserMediaFileImage>
  <BlogPostContentTitle>
    <![CDATA[Creating a video embed widget with visibility conditions]]>
  </BlogPostContentTitle>
  <ContentItemDataCommonDataID>
    <GUID>3880744c-db47-4c64-9c64-d913619afc40</GUID>
    <ObjectType>cms.contentitemcommondata</ObjectType>
    <Parent>
      <CodeName>CreatingAVideoEmbedWidgetWithVisibilityConditions-0qiejc7n-localtest</CodeName>
      <GUID>39f8842c-b86a-4b18-a31c-514095b72970</GUID>
      <ObjectType>cms.contentitem</ObjectType>
    </Parent>
  </ContentItemDataCommonDataID>
  <ContentItemDataGUID>9ffd8405-e965-42cf-8704-fdba563f41b3</ContentItemDataGUID>
</contentitemdata.kenticocommunity.blogpostcontent>